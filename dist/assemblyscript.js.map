{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/serialize.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__16__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","common_1","tokenizer_1","Token","Range","NodeKind","util_1","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","nodeIsGenericCallable","Node","parent","flags","CommonFlags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","range","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","text","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","length","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizedPath","normalizePath","startsWith","resolvePath","source","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","LIBRARY_PREFIX","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","assert","charCodeAt","ACTION","BUILTIN","DATABASE","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","PATH_DELIMITER","simplePath","substring","Array","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","STATIC_DELIMITER","INSTANCE_DELIMITER","endsWith","findDecorator","decorator","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INNER_DELIMITER","LIBRARY_SUBST","FILESPACE_PREFIX","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","line","column","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","warning","error","OperatorKind","diagnostics_1","types_1","ast_1","module_1","abi_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","resolver","Resolver","sources","toAbi","abi","Abi","resolve","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","instance","resolveClass","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","globalName","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","Element","program","_internalName","replaceComma","str","result","str_1","str_1_1","ch","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","NativeType","I32","I64","F32","F64","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","byteSize","toSize","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","None","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","__export","g","eval","e","window","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","builtins_1","program_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","functionTableSize","functionTableExported","entries","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_e","_f","_g","_h","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_j","_k","fullName","_l","_m","ctor","compileSourceByPath","reportNode","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","resolveFunctionInclTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","repeatLabel","alwaysTrue","condPre","incrExpr","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","retainConstantType","scopedThis","_this_cannot_be_referenced_in_current_location","superType","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","compileObjectLiteral","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","elementType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","classInstance","currentClassInstance","makeAllocate","propertyAccess","resolvePropertyAccess","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","field","fieldType","nativeFieldType","fieldDeclaration","parentElement","serialize_1","Struct","fields","AbiTypeAlias","newTypeName","wasmType","new_type_name","Action","ricardian_contract","AbiHelper","abiTypeLookup","Table","index_type","keys_names","keys_types","typeAliasSet","structsLookup","elementLookup","fileSerializeLookup","abiInfo","version","structs","actions","tables","toAbiStruct","methodName","struct","types_1_1","typeKind","addAbiTypeAlias","typeKindName","originalTypeName","findContractOriginalType","typeAlias","commonaTypeName","findScriptOriginalTypeName","findScriptOriginalType","checkFuncPrototypeDecorator","funcPrototype","isActionDecorator","decorators_1","decorators_1_1","isWrapWithQutation","undefined","charAt","isActionFuncPrototype","funcType","resolveClassDecorator","decorators_2","decorators_2_1","retrieveArgumentText","resolveExpressionToStruct","argu","NodeUtil","getInternalName","retrieveStructByInternalName","resolveClassPrototypeToStruct","members_1","members_1_1","filedDeclare","filedName","filedType","addStruct","checkName","resolveClassDispatcher","clzPrototype","hasActionDecorator","contractName","contractVarName","resolveFunctionPrototype","funcName","abiType","resolveAbiParameterType","isArray","VarialbeKind","NUMBER","factType","BOOL","printTypeAliasInfo","typesLookupKeys","keys","typesLookupKeys_1","typesLookupKeys_1_1","console","log","typesAliasKeys","typesAliasKeys_1","typesAliasKeys_1_1","printElementLookUpInfo","keys_1","keys_1_1","printClassProtoTypeInfo","keys_2","keys_2_1","serializeHelper","SerializeHelper","dispatchBuffer","forEach","dispatch","assemblyDispatch","hasElement","nameMap","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","contextualFunction","targetExpression","propertyName","elementAccess","explicitLocal","functionTarget","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","typeParameterNodes","binaryen","emitText","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","stack","AssertionError","ASC_TARGET","defineProperties","writable","Math","fround","MIN_POSITIVE_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","EPSILON","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","fromCodePoint","Number","isInteger","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","gte","lte","minSafeF64","maxSafeF64","toNumber","i64_to_string","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","indexOf","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","ClzI64","CtzI64","PopcntI64","RotlI32","RotlI64","RotrI32","RotrI64","AbsF32","AbsF64","tempLocal0","tempLocal1","MaxF32","MaxF64","MinF32","MinF64","CeilF32","CeilF64","FloorF32","FloorF64","CopysignF32","CopysignF64","NearestF32","NearestF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","SqrtF32","SqrtF64","TruncF32","TruncF64","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","CurrentMemory","GrowMemory","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","valueType","allocateInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","indent","readI32","readI64","readF32","readF64","valueI64","commonTypeNode","variableType","declareType","baseTypeName","getBaseTypeName","findAbiType","findFactType","bracketIndex","findFactTypeName","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needImplSerialize","needImplDeSerialize","needImplPrimary","generatorSerializeFlag","functionPrototype","checkFieldImplSerialize","hasImplSerialize","SERIALIZE_INTERFANCE","getSerializePoints","serializePoint","SerializePoint","needDeserialize","needSerialize","needPrimaryKey","addSerializeExpr","serializeField","addDeserializeExpr","deserializeField","typeNodeHelper","paramDeclaration","serialize","deserialize","primaryKey","toSerialize","toDeserialize","toPrimarykey","serializeClassname","classDeclaration","classpath","addSerializePoint","sortSerializePoints","fileSerialize","sort","decompiler_1","definitions_1","formatDiagnostic","parser_1","parseFile","parser","Parser","nextFile","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","decompiler","Decompiler","decompile","buildIDL","IDLBuilder","build","buildTSD","TSDBuilder","functionId","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Break","Switch","CallImport","CallIndirect","SetGlobal","Store","Drop","Return","Host","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","indentLevel","isConst","typeToString","visitInterface","numMembers","members_2","members_2_1","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","skipBlock","depth","Precedence"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,mBAAAC,eAAAC,IACAD,QAAA,YAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,UARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAZ,YAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA0DA,OArDAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,cAAiD4B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAnC,GACA,IAAAkB,EAAAlB,KAAA8B,WACA,WAA2B,OAAA9B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,2ZC7EA,IAAAC,EAAAlC,EAAA,GAQAmC,EAAAnC,EAAA,GAYST,EAAA6C,MAXPD,EAAAC,MAWc7C,EAAA8C,MATdF,EAAAE,MAGF,IASYC,EATZC,EAAAvC,EAAA,IASA,SAAYsC,GAEVA,IAAA,mBAGAA,IAAA,eACAA,IAAA,iCACAA,IAAA,yBACAA,IAAA,yBAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,kBACAA,IAAA,kCACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,gBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,sBAvEF,CAAYA,EAAA/C,EAAA+C,WAAA/C,EAAA+C,cA2EZ/C,EAAAiD,oBAAA,SAAoCC,GAClC,OAAQA,GACN,KAAKH,EAASI,QACd,KAAKJ,EAASK,KACd,KAAKL,EAASM,KACd,KAAKN,EAASO,MAAO,OAAO,EAE9B,OAAO,GAITtD,EAAAuD,eAAA,SAA+BL,GAC7B,OAAQA,GACN,KAAKH,EAASS,WACd,KAAKT,EAASU,KACd,KAAKV,EAASW,cACd,KAAKX,EAASY,eAAgB,OAAO,EAEvC,OAAO,GAIT3D,EAAA4D,sBAAA,SAAsCV,GACpC,OAAQA,GACN,KAAKH,EAASS,WACd,KAAKT,EAASY,eAAgB,OAAO,EAEvC,OAAO,GAIT,IAAAE,EAAA,oBAAAA,IAOEvD,KAAAwD,OAAsB,KAEtBxD,KAAAyD,MAAqBpB,EAAAqB,YAAYC,KAm4BnC,OAh4BEJ,EAAAtB,UAAA2B,GAAA,SAAGC,GAA2B,OAAQ7D,KAAKyD,MAAQI,IAASA,GAE5DN,EAAAtB,UAAA6B,MAAA,SAAMD,GAA2B,OAA8B,IAAtB7D,KAAKyD,MAAQI,IAEtDN,EAAAtB,UAAA8B,IAAA,SAAIF,GAA2B7D,KAAKyD,OAASI,GAItCN,EAAAS,WAAP,SACEpD,EACAqD,EACAC,EACAC,GAEA,IAAIC,EAAO,IAAIC,EAKf,OAJAD,EAAKD,MAAQA,EACbC,EAAKxD,KAAOA,EAAMA,EAAK4C,OAASY,EAChCA,EAAKH,cAAgBA,EAAmBA,GAAeK,GAAUL,EAAeG,GAChFA,EAAKF,WAAaA,EACXE,GAGFb,EAAAgB,kBAAP,SACEJ,GAEA,OAAOZ,EAAKS,WACVT,EAAKiB,2BAA2B,GAAIL,GACpC,MACA,EACAA,IAIGZ,EAAAkB,oBAAP,SACE7D,EACA8D,EACAP,GAEA,IAAIQ,EAAO,IAAIC,EAIf,OAHAD,EAAKR,MAAQA,EACbQ,EAAK/D,KAAOA,EAAMA,EAAK4C,OAASmB,EAChCA,EAAKD,YAAcA,EAAiBA,IAAaA,EAAYlB,OAASmB,GAC/DA,GAGFpB,EAAAsB,gBAAP,SACEjE,EACAwD,EACAU,EACAlC,EACAuB,GAEA,IAAIQ,EAAO,IAAII,EAMf,OALAJ,EAAKR,MAAQA,EACbQ,EAAK/D,KAAOA,EAAMA,EAAK4C,OAASmB,EAChCA,EAAKP,KAAOA,EAAUA,IAAMA,EAAKZ,OAASmB,GAC1CA,EAAKG,YAAcA,EAAiBA,IAAaA,EAAYtB,OAASmB,GACtEA,EAAKK,cAAgBpC,EACd+B,GAGFpB,EAAA0B,gBAAP,SACEC,EACAC,EACAC,EACAlB,EACAC,GAEA,IAAIkB,EAAM,IAAIC,EAMd,OALAD,EAAIlB,MAAQA,EACZkB,EAAIH,WAAaA,EAAYZ,GAAUY,EAAYG,GACnDA,EAAIF,WAAaA,EAAYA,EAAW3B,OAAS6B,EACjDA,EAAID,iBAAmBA,EAAsBA,IAAkBA,EAAiB5B,OAAS6B,GACzFA,EAAInB,WAAaA,EACVmB,GAKF9B,EAAAgC,gBAAP,SACE3E,EACA4E,EACArB,GAEA,IAAIsB,EAAO,IAAIC,EAKf,OAJAD,EAAKtB,MAAQA,EACbsB,EAAK7E,KAAOA,EAAMA,EAAK4C,OAASiC,EAChCA,EAAKE,UAAYH,EAAUA,GAAMlB,GAAUkB,EAAMC,GACjDA,EAAKG,cAAgBC,EAAoBjF,GAClC6E,GAGFlC,EAAAuC,cAAP,SACEC,EACAnD,EACAuB,GAEA,IAAI6B,EAAO,IAAIC,EAIf,OAHAD,EAAK7B,MAAQA,EACb6B,EAAKE,YAActD,EACnBoD,EAAKD,KAAOA,EACLC,GAKFzC,EAAAiB,2BAAP,SACE5D,EACAuD,GAEA,IAAIgC,EAAO,IAAIC,EAGf,OAFAD,EAAKhC,MAAQA,EACbgC,EAAKJ,KAAOnF,EACLuF,GAGF5C,EAAA8C,gCAAP,SACElC,GAEA,IAAIgC,EAAO,IAAIC,EAGf,OAFAD,EAAKhC,MAAQA,EACbgC,EAAKJ,KAAO,GACLI,GAGF5C,EAAA+C,6BAAP,SACEC,EACApC,GAEA,IAAIgC,EAAO,IAAIK,EAGf,OAFAL,EAAKhC,MAAQA,EACbgC,EAAKM,mBAAqBF,EAgsD9B,SAA4BG,EAAwBlD,GAClD,IAAK,IAAInD,EAAI,EAAGsG,EAAID,EAAME,OAAQvG,EAAIsG,IAAKtG,EAAG,CAC5C,IAAI2F,EAAOU,EAAMrG,GACb2F,IAAMA,EAAKxC,OAASA,IAnsDYqD,CAAmBN,EAAUJ,GAC1DA,GAGF5C,EAAAuD,0BAAP,SACEC,EACAC,EACAC,EACA9C,GAEA,IAAIgC,EAAO,IAAIe,EAKf,OAJAf,EAAKhC,MAAQA,EACbgC,EAAKY,cAAgBA,EACrBZ,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKc,OAASA,EAAQA,EAAOzD,OAAS2C,EAC/BA,GAGF5C,EAAA4D,uBAAP,SACEC,EACAC,EACAC,EACAnD,GAEA,IAAIgC,EAAO,IAAIoB,EAKf,OAJApB,EAAKhC,MAAQA,EACbgC,EAAKiB,SAAWA,EAChBjB,EAAKkB,KAAOA,EAAMA,EAAK7D,OAAS2C,EAChCA,EAAKmB,MAAQA,EAAOA,EAAM9D,OAAS2C,EAC5BA,GAGF5C,EAAAiE,qBAAP,SACER,EACAS,EACAjC,EACArB,GAEA,IAAIgC,EAAO,IAAIuB,EAKf,OAJAvB,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKlC,cAAgBwD,EAAcA,GAAUnD,GAAUmD,EAAUtB,GACjEA,EAAKR,UAAYH,EAAMlB,GAAUkB,EAAMW,GAChCA,GAGF5C,EAAAoE,sBAAP,SACEC,GAEA,IAAIzB,EAAO,IAAI0B,EAGf,OAFA1B,EAAKhC,MAAQyD,EAAYzD,MACzBgC,EAAKyB,YAAcA,EACZzB,GAGF5C,EAAAuE,sBAAP,SACEC,EACA5D,GAEA,IAAIgC,EAAO,IAAI6B,EAGf,OAFA7B,EAAKhC,MAAQA,EACbgC,EAAK4B,YAAcA,EAAazD,GAAUyD,EAAa5B,GAChDA,GAGF5C,EAAA0E,4BAAP,SACE9D,GAEA,IAAIgC,EAAO,IAAI+B,EAEf,OADA/B,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAA4E,8BAAP,SACEnB,EACAoB,EACAjE,GAEA,IAAIgC,EAAO,IAAIkC,EAIf,OAHAlC,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKmC,kBAAoBF,EAASA,EAAQ5E,OAAS2C,EAC5CA,GAGF5C,EAAAgF,sBAAP,SACEpE,GAEA,IAAIgC,EAAO,IAAIqC,EAEf,OADArC,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAkF,6BAAP,SACEnH,EACA6C,GAEA,IAAIgC,EAAO,IAAIuC,EAGf,OAFAvC,EAAKhC,MAAQA,EACbgC,EAAK7E,MAAQA,EACN6E,GAGF5C,EAAAoF,yBAAP,SACEf,GAEA,IAAIzB,EAAO,IAAIyC,EAIf,OAHAzC,EAAK1C,MAAQmE,EAAYnE,MAAQpB,EAAAqB,YAAYmF,MAC7C1C,EAAKhC,MAAQyD,EAAYzD,MACzBgC,EAAKyB,YAAcA,EACZzB,GAGF5C,EAAAuF,2BAAP,SACE9B,EACA+B,EACA5E,GAEA,IAAIgC,EAAO,IAAI6C,EAIf,OAHA7C,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAK4C,OAASA,EAAQA,EAAOvF,OAAS2C,EAC/BA,GAGF5C,EAAA0F,+BAAP,SACE3H,EACA6C,GAEA,IAAIgC,EAAO,IAAI+C,EAGf,OAFA/C,EAAKhC,MAAQA,EACbgC,EAAK7E,MAAQA,EACN6E,GAGF5C,EAAA4F,oBAAP,SACEnC,EACAS,EACAjC,EACArB,GAEA,IAAIgC,EAAO,IAAIiD,EAKf,OAJAjD,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKlC,cAAgBwD,EAAcA,GAAUnD,GAAUmD,EAAUtB,GACjEA,EAAKR,UAAYH,EAAMlB,GAAUkB,EAAMW,GAChCA,GAGF5C,EAAA8F,qBAAP,SACElF,GAEA,IAAIgC,EAAO,IAAImD,EAEf,OADAnD,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAgG,8BAAP,SACEC,EACAC,EACAtF,GAEA,IAAIgC,EAAO,IAAIuD,EAIf,OAHAvD,EAAKhC,MAAQA,EACbgC,EAAKqD,MAAQA,EACbrD,EAAKsD,OAASA,EACPtD,GAGF5C,EAAAoG,8BAAP,SACE3C,EACA7C,GAEA,IAAIgC,EAAO,IAAIyD,EAGf,OAFAzD,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAC3CA,GAGF5C,EAAAsG,+BAAP,SACE7C,EACAhF,EACAmC,GAEA,IAAIgC,EAAO,IAAI2D,EAIf,OAHA3D,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKnE,SAAWA,EAAUA,EAASwB,OAAS2C,EACrCA,GAGF5C,EAAAwG,8BAAP,SACEC,EACAvG,EACAU,GAEA,IAAIgC,EAAO,IAAI8D,EAIf,OAHA9D,EAAKhC,MAAQA,EACbgC,EAAK6D,QAAUA,EACf7D,EAAK+D,aAAezG,EACb0C,GAGF5C,EAAA4G,wBAAP,SACEC,EACAC,EACAC,EACAnG,GAEA,IAAIgC,EAAO,IAAIoE,EAKf,OAJApE,EAAKhC,MAAQA,EACbgC,EAAKiE,UAAYA,EAAWA,EAAU5G,OAAS2C,EAC/CA,EAAKkE,OAASA,EAAQA,EAAO7G,OAAS2C,EACtCA,EAAKmE,OAASA,EAAQA,EAAO9G,OAAS2C,EAC/BA,GAGF5C,EAAAiH,8BAAP,SACElJ,EACA6C,GAEA,IAAIgC,EAAO,IAAIsE,EAGf,OAFAtE,EAAKhC,MAAQA,EACbgC,EAAK7E,MAAQA,EACN6E,GAGF5C,EAAAmH,sBAAP,SACEvG,GAEA,IAAIgC,EAAO,IAAIwE,EAEf,OADAxE,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAqH,qBAAP,SACEzG,GAEA,IAAIgC,EAAO,IAAI0E,EAEf,OADA1E,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAuH,qBAAP,SACE3G,GAEA,IAAIgC,EAAO,IAAI4E,EAEf,OADA5E,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAyH,6BAAP,SACE5D,EACA6D,EACA9G,GAEA,IAAIgC,EAAO,IAAI+E,EAIf,OAHA/E,EAAKhC,MAAQA,EACbgC,EAAKiB,SAAWA,EAChBjB,EAAK8E,QAAUA,EAASA,EAAQzH,OAAS2C,EAClCA,GAGF5C,EAAA4H,4BAAP,SACE/D,EACA6D,EACA9G,GAEA,IAAIgC,EAAO,IAAIiF,EAIf,OAHAjF,EAAKhC,MAAQA,EACbgC,EAAKiB,SAAWA,EAChBjB,EAAK8E,QAAUA,EAASA,EAAQzH,OAAS2C,EAClCA,GAKF5C,EAAA8H,qBAAP,SACEC,EACAnH,GAEA,IAAIsB,EAAO,IAAI8F,GAGf,OAFA9F,EAAKtB,MAAQA,EACbsB,EAAK6F,WAAaA,EAAYhH,GAAUgH,EAAY7F,GAC7CA,GAGFlC,EAAAiI,qBAAP,SACEC,EACAtH,GAEA,IAAIsB,EAAO,IAAIiG,GAGf,OAFAjG,EAAKtB,MAAQA,EACbsB,EAAKgG,MAAQA,EAAWA,IAAOA,EAAMjI,OAASiC,GACvCA,GAGFlC,EAAAoI,uBAAP,SACEC,EACAC,EACAnH,EACAoH,EACAC,EACAC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIwG,GASf,OARAxG,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK7E,KAAOgL,EAAYA,EAAWpI,OAASiC,EAC5CA,EAAKoG,eAAiBA,EAAgBvH,GAAUuH,EAAgBpG,GAChEA,EAAKf,YAAcA,EAAiBA,IAAaA,EAAYlB,OAASiC,GACtEA,EAAKqG,gBAAkBA,EAAqBA,GAAiBxH,GAAUwH,EAAiBrG,GACxFA,EAAKsG,QAAUA,EAASzH,GAAUyH,EAAStG,GAC3CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAA2I,wBAAP,SACET,EACAtH,GAEA,IAAIsB,EAAO,IAAI0G,GAGf,OAFA1G,EAAKtB,MAAQA,EACbsB,EAAKgG,MAAQA,EAAWA,IAAOA,EAAMjI,OAASiC,GACvCA,GAGFlC,EAAA6I,kBAAP,SACEC,EACAjC,EACAjG,GAEA,IAAIsB,EAAO,IAAI6G,GAIf,OAHA7G,EAAKtB,MAAQA,EACbsB,EAAK4G,UAAYA,EAAWA,EAAU7I,OAASiC,EAC/CA,EAAK2E,UAAYA,EAAWA,EAAU5G,OAASiC,EACxCA,GAGFlC,EAAAgJ,qBAAP,SACEpI,GAEA,IAAIsB,EAAO,IAAI+G,GAEf,OADA/G,EAAKtB,MAAQA,EACNsB,GAGFlC,EAAAkJ,sBAAP,SACE7L,EACAmL,EACAC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIiH,GAMf,OALAjH,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK7E,KAAOA,EAAMA,EAAK4C,OAASiC,EAChCA,EAAKgE,OAASsC,EAASzH,GAAUyH,EAAStG,GAC1CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAoJ,2BAAP,SACE/L,EACAU,EACAmC,EACAU,GAEA,IAAIsB,EAAO,IAAImH,GAKf,OAJAnH,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK7E,KAAOA,EAAMA,EAAK4C,OAASiC,EAChCA,EAAKnE,MAAQA,EAAWA,IAAOA,EAAMkC,OAASiC,GACvCA,GAGFlC,EAAAsJ,sBAAP,SACEd,EACAe,EACArJ,EACAU,GAEA,IAAIsB,EAAO,IAAIsH,GAKf,GAJAtH,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAKsG,QAAUA,EAAaA,GAASzH,GAAUyH,EAAStG,GACxDA,EAAKqH,KAAOA,EACRA,EAAM,CACR,IAAIE,EAAiBtK,EAAAuK,cAAcH,EAAKxL,OACpCwL,EAAKxL,MAAM4L,WAAW,KACxBzH,EAAKuH,eAAiBtK,EAAAyK,YACpBH,EACA7I,EAAMiJ,OAAOJ,gBAGfvH,EAAKuH,eAAiBA,EAExBvH,EAAK4H,aAAeC,GAAmB7H,EAAKuH,qBAE5CvH,EAAKuH,eAAiB,KACtBvH,EAAK4H,aAAe,KAEtB,OAAO5H,GAGFlC,EAAAgK,4BAAP,SACE3M,EACA4M,EACArJ,GAEA,IAAIsB,EAAO,IAAIgI,GAIf,OAHAhI,EAAKtB,MAAQA,EACbsB,EAAK7E,KAAOA,EAAMA,EAAK4C,OAASiC,EAChCA,EAAK+H,aAAeA,EAAcA,EAAahK,OAASiC,EACjDA,GAGFlC,EAAAmK,mBAAP,SACE9M,EACA4M,EACArJ,GAEA,IAAIQ,EAAO,IAAIgJ,GASf,OARAhJ,EAAKR,MAAQA,EACbQ,EAAK/D,KAAOA,EAAMA,EAAK4C,OAASmB,EAC3B6I,EAGHA,EAAahK,OAASmB,EAFtB6I,EAAe5M,EAIjB+D,EAAK6I,aAAeA,EACb7I,GAGFpB,EAAAqK,0BAAP,SACE5G,GAEA,IAAIvB,EAAO,IAAIoI,GAGf,OAFApI,EAAKtB,MAAQ6C,EAAW7C,MACxBsB,EAAKuB,WAAaA,EAAYA,EAAWxD,OAASiC,EAC3CA,GAGFlC,EAAAuK,kBAAP,SACE1D,EACA2D,EACAC,EACA7J,GAEA,IAAIsB,EAAO,IAAIwI,GAKf,OAJAxI,EAAKtB,MAAQA,EACbsB,EAAK2E,UAAYA,EAAWA,EAAU5G,OAASiC,EAC/CA,EAAKsI,OAASA,EAAQA,EAAOvK,OAASiC,EACtCA,EAAKuI,QAAUA,EAAaA,IAASA,EAAQxK,OAASiC,GAC/CA,GAGFlC,EAAA2K,sBAAP,SACEC,EACArB,EACA3I,GAEA,IAAIsB,EAAO,IAAI2I,GACf3I,EAAKtB,MAAQA,EACbsB,EAAK4I,aAAeF,EAAWA,GAAO7J,GAAU6J,EAAO1I,GACvDA,EAAK6I,cAAgB,KACrB7I,EAAKqH,KAAOA,EACZ,IAAIE,EAAiBtK,EAAAuK,cAAcH,EAAKxL,OAaxC,OAZIwL,EAAKxL,MAAM4L,WAAW,KACxBzH,EAAKuH,eAAiBtK,EAAAyK,YACpBH,EACA7I,EAAMiJ,OAAOJ,iBAGVA,EAAeE,WAAW7K,EAAAkM,kBAC7BvB,EAAiB3K,EAAAkM,eAAiBvB,GAEpCvH,EAAKuH,eAAiBA,GAExBvH,EAAK4H,aAAeC,GAAmB7H,EAAKuH,gBACrCvH,GAGFlC,EAAAiL,kCAAP,SACE5C,EACAkB,EACA3I,GAEA,IAAIsB,EAAO,IAAI2I,GAUf,OATA3I,EAAKtB,MAAQA,EACbsB,EAAK4I,aAAe,KACpB5I,EAAK6I,cAAgB1C,EACrBnG,EAAKqH,KAAOA,EACZrH,EAAKuH,eAAiBtK,EAAAyK,YACpBzK,EAAAuK,cAAcH,EAAKxL,OACnB6C,EAAMiJ,OAAOJ,gBAEfvH,EAAK4H,aAAeC,GAAmB7H,EAAKuH,gBACrCvH,GAGFlC,EAAAkL,wBAAP,SACEjB,EACA5M,EACAuD,GAEA,IAAIQ,EAAO,IAAI+J,GASf,OARA/J,EAAKR,MAAQA,EACbQ,EAAK6I,aAAeA,EAAcA,EAAahK,OAASmB,EACnD/D,EAGHA,EAAK4C,OAASmB,EAFd/D,EAAO4M,EAIT7I,EAAK/D,KAAOA,EACL+D,GAGFpB,EAAAoL,2BAAP,SACE/N,EACAiL,EACAnH,EACAqH,EACAC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAImJ,GAQf,OAPAnJ,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK7E,KAAOA,EAAMA,EAAK4C,OAASiC,EAChCA,EAAKoG,eAAiBA,EAAoBA,GAAgBvH,GAAUuH,EAAgBpG,GACpFA,EAAKf,YAAcA,EAAiBA,IAAaA,EAAYlB,OAASiC,GACtEA,EAAKsG,QAAUA,EAASzH,GAAUyH,EAAStG,GAC3CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAsL,uBAAP,SACEjO,EACAwD,EACAU,EACAkH,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIqJ,GAOf,OANArJ,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK7E,KAAOA,EAAMA,EAAK4C,OAASiC,EAChCA,EAAKrB,KAAOA,EAAUA,IAAMA,EAAKZ,OAASiC,GAC1CA,EAAKX,YAAcA,EAAiBA,IAAaA,EAAYtB,OAASiC,GACtEA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAwL,mBAAP,SACEjK,EACAsF,EACA4E,EACA3C,EACAlI,GAEA,IAAIsB,EAAO,IAAIwJ,GAMf,OALAxJ,EAAKtB,MAAQA,EACbsB,EAAKX,YAAcA,EAAiBA,IAAaA,EAAYtB,OAASiC,GACtEA,EAAK2E,UAAYA,EAAeA,IAAWA,EAAU5G,OAASiC,GAC9DA,EAAKuJ,YAAcA,EAAiBA,IAAaA,EAAYxL,OAASiC,GACtEA,EAAK4G,UAAYA,EAAWA,EAAU7I,OAASiC,EACxCA,GAGFlC,EAAA2L,0BAAP,SACEtO,EACAiL,EACAsD,EACAC,EACApD,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAI4J,GAQf,OAPA5J,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK7E,KAAOA,EAAMA,EAAK4C,OAASiC,EAChCA,EAAKoG,eAAiBA,EAAoBA,GAAgBvH,GAAUuH,EAAgBpG,GACpFA,EAAK0J,UAAYA,EAAWA,EAAU3L,OAASiC,EAC/CA,EAAK2J,KAAOA,EAAUA,IAAMA,EAAK5L,OAASiC,GAC1CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAA+L,wBAAP,SACE1O,EACAiL,EACAsD,EACAC,EACApD,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAI8J,GAQf,OAPA9J,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK7E,KAAOA,EAAMA,EAAK4C,OAASiC,EAChCA,EAAKoG,eAAiBA,EAAoBA,GAAgBvH,GAAUuH,EAAgBpG,GACpFA,EAAK0J,UAAYA,EAAWA,EAAU3L,OAASiC,EAC/CA,EAAK2J,KAAOA,EAAUA,IAAMA,EAAK5L,OAASiC,GAC1CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAiM,2BAAP,SACE5O,EACAmL,EACAC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIgK,GAMf,OALAhK,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK7E,KAAOA,EAAMA,EAAK4C,OAASiC,EAChCA,EAAKsG,QAAUA,EAASzH,GAAUyH,EAAStG,GAC3CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAmM,sBAAP,SACEpO,EACA6C,GAEA,IAAIsB,EAAO,IAAIkK,GAGf,OAFAlK,EAAKtB,MAAQA,EACbsB,EAAKnE,MAAQA,EAAWA,IAAOA,EAAMkC,OAASiC,GACvCA,GAGFlC,EAAAqM,sBAAP,SACExF,EACAyF,EACA1L,GAEA,IAAIsB,EAAO,IAAIqK,GAIf,OAHArK,EAAKtB,MAAQA,EACbsB,EAAK2E,UAAYA,EAAWA,EAAU5G,OAASiC,EAC/CA,EAAKoK,MAAQA,EAAOvL,GAAUuL,EAAOpK,GAC9BA,GAGFlC,EAAAwM,iBAAP,SACEtE,EACAH,EACAnH,GAEA,IAAIQ,EAAO,IAAIqL,GAIf,OAHArL,EAAKR,MAAQA,EACbQ,EAAK8G,MAAQA,EAAWA,IAAOA,EAAMjI,OAASmB,GAC9CA,EAAK2G,WAAaA,EAAYhH,GAAUgH,EAAY3G,GAC7CA,GAGFpB,EAAA0M,qBAAP,SACE3O,EACA6C,GAEA,IAAIsB,EAAO,IAAIyK,GAGf,OAFAzK,EAAKtB,MAAQA,EACbsB,EAAKnE,MAAQA,EAAOA,EAAMkC,OAASiC,EAC5BA,GAGFlC,EAAA4M,mBAAP,SACE7E,EACA8E,EACAC,EACAC,EACAnM,GAEA,IAAIsB,EAAO,IAAI8K,GASf,OARA9K,EAAKtB,MAAQA,EACbsB,EAAK6F,WAAaA,EAAYhH,GAAUgH,EAAY7F,GACpDA,EAAK2K,cAAgBA,EACjBA,IAAeA,EAAc5M,OAASiC,GAC1CA,EAAK4K,gBAAkBA,EACnBA,GAAiB/L,GAAU+L,EAAiB5K,GAChDA,EAAK6K,kBAAoBA,EACrBA,GAAmBhM,GAAUgM,EAAmB7K,GAC7CA,GAGFlC,EAAAiN,sBAAP,SACE5P,EACAiL,EACA4E,EACAzE,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIiL,GAOf,OANAjL,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK7E,KAAOA,EAAMA,EAAK4C,OAASiC,EAChCA,EAAKoG,eAAiBA,EAAoBA,GAAgBvH,GAAUuH,EAAgBpG,GACpFA,EAAKrB,KAAOqM,EAAOA,EAAMjN,OAASiC,EAClCA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAoN,wBAAP,SACEtC,EACArC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAImL,GAKf,OAJAnL,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK4I,aAAeA,EAAc/J,GAAU+J,EAAc5I,GAC1DA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAsN,0BAAP,SACEjQ,EACAwD,EACAU,EACAkH,EACAvI,EACAU,GAEA,IAAIQ,EAAO,IAAImM,GAOf,OANAnM,EAAKR,MAAQA,EACbQ,EAAKlB,MAAQA,EACbkB,EAAK/D,KAAOA,EAAMA,EAAK4C,OAASmB,EAChCA,EAAKP,KAAOA,EAAUA,IAAMA,EAAKZ,OAASmB,GAC1CA,EAAKG,YAAcA,EAAiBA,IAAaA,EAAYtB,OAASmB,GACtEA,EAAKqH,WAAaA,EACXrH,GAGFpB,EAAAwN,oBAAP,SACE/J,EACA7C,GAEA,IAAIsB,EAAO,IAAIuL,GAGf,OAFAvL,EAAKtB,MAAQA,EACbsB,EAAKuB,WAAaA,EACXvB,GAGFlC,EAAA0N,qBAAP,SACE7G,EACAiC,EACAlI,GAEA,IAAIsB,EAAO,IAAIyL,GAIf,OAHAzL,EAAKtB,MAAQA,EACbsB,EAAK2E,UAAYA,EAAWA,EAAU5G,OAASiC,EAC/CA,EAAK4G,UAAYA,EAAWA,EAAU7I,OAASiC,EACxCA,GAEXlC,EA54BA,GAAsB7D,EAAA6D,OAg5BtB,IAAA4N,EAAA,SAAAC,GAAA,SAAAD,mDAKA,OAL6CE,EAAAF,EAAAC,GAK7CD,EALA,CAA6C5N,GAAvB7D,EAAAyR,iBAQtB,IAAA9M,EAAA,SAAA+M,GAAA,SAAA/M,IAAA,IAAAiN,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS+O,OAMlB,OAP8BH,EAAAhN,EAAA+M,GAO9B/M,EAPA,CAA8B8M,GAAjBzR,EAAA2E,WAUb,IAAAO,EAAA,SAAAwM,GAAA,SAAAxM,IAAA,IAAA0M,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASgP,gBAMlB,OAPuCJ,EAAAzM,EAAAwM,GAOvCxM,EAPA,CAAuCrB,GAA1B7D,EAAAkF,oBAUb,SAAY8M,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,eANF,CAAYhS,EAAAgS,gBAAAhS,EAAAgS,mBAUZ,IAAA3M,EAAA,SAAAqM,GAAA,SAAArM,IAAA,IAAAuM,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASkP,UAWhBL,EAAAM,yBAAoD,OACtD,OAbmCP,EAAAtM,EAAAqM,GAanCrM,EAbA,CAAmCxB,GAAtB7D,EAAAqF,gBAgBb,IAcY8M,EAdZvM,EAAA,SAAA8L,GAAA,SAAA9L,IAAA,IAAAgM,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASqP,YAQlB,OATmCT,EAAA/L,EAAA8L,GASnC9L,EATA,CAAmC6L,GAgCnC,SAAAtL,EAAoCjF,GAElC,GAAIA,EAAKgC,MAAQH,EAASS,WAAY,CACpC,IAAI6O,EAAiCnR,EAAMmF,KAE3C,OADAiM,OAAOD,EAAQnL,QACPmL,EAAQE,WAAW,IACzB,QACE,GAAe,UAAXF,EAAqB,OAAOF,EAAcK,OAC9C,MAEF,QACE,GAAe,WAAXH,EAAsB,OAAOF,EAAcM,QAC/C,MAEF,SACE,GAAe,YAAXJ,EAAuB,OAAOF,EAAcO,SAElD,SACE,GAAe,YAAXL,EAAuB,OAAOF,EAAcQ,SAChD,MAEF,SACE,GAAe,UAAXN,EAAqB,OAAOF,EAAcS,OAC9C,MAEF,SACE,GAAe,UAAXP,EAAqB,OAAOF,EAAcU,OAC9C,MAEF,SACE,GAAe,YAAXR,EAAuB,OAAOF,EAAcW,SAChD,MAEF,SACE,GAAe,UAAXT,EAAqB,OAAOF,EAAcY,OAC9C,MAEF,SACE,GAAe,aAAXV,EAAwB,OAAOF,EAAca,gBAIhD,GACL9R,EAAKgC,MAAQH,EAASY,gBACKzC,EAAMoG,WAAWpE,MAAQH,EAASS,WAC7D,CACI6O,EAA4DnR,EAAMoG,WAAYjB,KAClFiM,OAAOD,EAAQnL,QACf,IAAI+L,EAAqC/R,EAAMoB,SAAS+D,KAGxD,GAFAiM,OAAOW,EAAQ/L,QAEA,YAAXmL,EACF,OAAQY,EAAQV,WAAW,IACzB,QACE,GAAe,UAAXU,EAAqB,OAAOd,EAAce,gBAC9C,MAEF,SACE,OAAQD,GACN,IAAK,SAAU,OAAOd,EAAcgB,gBACpC,IAAK,UAAW,OAAOhB,EAAciB,mBAO/C,OAAOjB,EAAckB,OAnGVrT,EAAA4F,gBAcb,SAAYuM,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,uCACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,sBAbF,CAAYA,EAAAnS,EAAAmS,gBAAAnS,EAAAmS,mBAkBZnS,EAAAmG,sBAuEA,IAAAH,EAAA,SAAA0L,GAAA,SAAA1L,IAAA,IAAA4L,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASuQ,YAQlB,OATmC3B,EAAA3L,EAAA0L,GASnC1L,EATA,CAAmCnC,GAAtB7D,EAAAgG,gBAYb,SAAYuN,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,iBANF,CAAYvT,EAAAuT,cAAAvT,EAAAuT,iBAUZ,IAAAhN,EAAA,SAAAmL,GAAA,SAAAnL,IAAA,IAAAqL,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASyQ,UAMlB,OAPiC7B,EAAApL,EAAAmL,GAOjCnL,EAPA,CAAiC1C,GAApB7D,EAAAuG,cAYb,IAAAkN,EAAA,SAAA/B,GAAA,SAAA+B,mDAAgD,OAAP9B,EAAA8B,EAAA/B,GAAO+B,EAAhD,CAAyC5P,GAAnB7D,EAAAyT,aAGtB,IAQYC,EARZhN,EAAA,SAAAgL,GAAA,SAAAhL,IAAA,IAAAkL,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASS,aAIlB,OAL0CmO,EAAAjL,EAAAgL,GAK1ChL,EALA,CAA0C+M,GAA7BzT,EAAA0G,uBAQb,SAAYgN,GACVA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,mBANF,CAAYA,EAAA1T,EAAA0T,cAAA1T,EAAA0T,iBAUZ,IAAAC,EAAA,SAAAjC,GAAA,SAAAiC,IAAA,IAAA/B,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASI,UAIlB,OALgDwO,EAAAgC,EAAAjC,GAKhDiC,EALA,CAAgDF,GAA1BzT,EAAA2T,oBAQtB,IAAA7M,EAAA,SAAA4K,GAAA,SAAA5K,IAAA,IAAA8K,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAAgC,YAAcF,EAAYG,QAI5B,OAL4ClC,EAAA7K,EAAA4K,GAK5C5K,EALA,CAA4C6M,GAA/B3T,EAAA8G,yBAQb,SAAYgN,GACVA,IAAA,mBACAA,IAAA,WAFF,CAAY9T,EAAA8T,gBAAA9T,EAAA8T,mBAMZ,IAAAtM,EAAA,SAAAkK,GAAA,SAAAlK,IAAA,IAAAoK,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASgR,YAQlB,OATyCpC,EAAAnK,EAAAkK,GASzClK,EATA,CAAyCiM,GAA5BzT,EAAAwH,sBAYb,IAAAK,EAAA,SAAA6J,GAAA,SAAA7J,IAAA,IAAA+J,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASiR,SAQlB,OATsCrC,EAAA9J,EAAA6J,GAStC7J,EATA,CAAsC4L,GAAzBzT,EAAA6H,mBAYb,IAAAG,EAAA,SAAA0J,GAAA,SAAA1J,IAAA,IAAA4J,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASU,OAQlB,OAToCkO,EAAA3J,EAAA0J,GASpC1J,EATA,CAAoCyL,GAAvBzT,EAAAgI,iBAYb,IAAAG,EAAA,SAAAuJ,GAAA,SAAAvJ,IAAA,IAAAyJ,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASkR,QAIlB,OALqCtC,EAAAxJ,EAAAuJ,GAKrCvJ,EALA,CAAqCsL,GAAxBzT,EAAAmI,kBAQb,IAAAG,EAAA,SAAAoJ,GAAA,SAAApJ,IAAA,IAAAsJ,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASmR,QAIlB,OALqCvC,EAAArJ,EAAAoJ,GAKrCpJ,EALA,CAAqCmL,GAAxBzT,EAAAsI,kBAQb,IAAAE,EAAA,SAAAkJ,GAAA,SAAAlJ,IAAA,IAAAoJ,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASoR,YAChBvC,EAAAvL,KAAO,gBACT,OAH2CsL,EAAAnJ,EAAAkJ,GAG3ClJ,EAHA,CAA2C9B,GAA9B1G,EAAAwI,wBAMb,IAAAG,EAAA,SAAA+I,GAAA,SAAA/I,IAAA,IAAAiJ,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASW,gBAMlB,OAP6CiO,EAAAhJ,EAAA+I,GAO7C/I,EAPA,CAA6C8K,GAAhCzT,EAAA2I,0BAUb,IAAAK,EAAA,SAAA0I,GAAA,SAAA1I,IAAA,IAAA4I,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAAgC,YAAcF,EAAYU,QAI5B,OAL4CzC,EAAA3I,EAAA0I,GAK5C1I,EALA,CAA4C2K,GAA/B3T,EAAAgJ,yBAQb,IAAAE,EAAA,SAAAwI,GAAA,SAAAxI,IAAA,IAAA0I,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASsR,WAIlB,OALwC1C,EAAAzI,EAAAwI,GAKxCxI,EALA,CAAwCuK,GAA3BzT,EAAAkJ,qBAQb,IAAAI,EAAA,SAAAoI,GAAA,SAAApI,IAAA,IAAAsI,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASuR,aAMlB,OAP0C3C,EAAArI,EAAAoI,GAO1CpI,EAPA,CAA0CmK,GAA7BzT,EAAAsJ,uBAUb,IAAAE,EAAA,SAAAkI,GAAA,SAAAlI,IAAA,IAAAoI,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAAgC,YAAcF,EAAYa,UAI5B,OAL8C5C,EAAAnI,EAAAkI,GAK9ClI,EALA,CAA8CmK,GAAjC3T,EAAAwJ,2BAQb,IAAAE,EAAA,SAAAgI,GAAA,SAAAhI,IAAA,IAAAkI,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASyR,MAClB,OAFmC7C,EAAAjI,EAAAgI,GAEnChI,EAFA,CAAmC1B,GAAtBhI,EAAA0J,gBAKb,IAAAE,EAAA,SAAA8H,GAAA,SAAA9H,IAAA,IAAAgI,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASK,KAChBwO,EAAAvL,KAAO,SACT,OAHoCsL,EAAA/H,EAAA8H,GAGpC9H,EAHA,CAAoClD,GAAvB1G,EAAA4J,iBAMb,IAAAI,EAAA,SAAA0H,GAAA,SAAA1H,IAAA,IAAA4H,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAAgC,YAAcF,EAAYe,SAM5B,OAP6C9C,EAAA3H,EAAA0H,GAO7C1H,EAPA,CAA6C2J,GAAhC3T,EAAAgK,0BAUb,IAAAE,EAAA,SAAAwH,GAAA,SAAAxH,IAAA,IAAA0H,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS2R,gBAIlB,OAL6C/C,EAAAzH,EAAAwH,GAK7CxH,EALA,CAA6CuJ,GAAhCzT,EAAAkK,0BAQb,IAAAE,EAAA,SAAAsH,GAAA,SAAAtH,IAAA,IAAAwH,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASY,iBAMlB,OAP8CgO,EAAAvH,EAAAsH,GAO9CtH,EAPA,CAA8CqJ,GAAjCzT,EAAAoK,2BAUb,IAAAG,EAAA,SAAAmH,GAAA,SAAAnH,IAAA,IAAAqH,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAAgC,YAAcF,EAAYiB,SAM5B,OAP6ChD,EAAApH,EAAAmH,GAO7CnH,EAPA,CAA6CoJ,GAAhC3T,EAAAuK,0BAUb,IAAAM,EAAA,SAAA6G,GAAA,SAAA7G,IAAA,IAAA+G,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS6R,UAQlB,OATuCjD,EAAA9G,EAAA6G,GASvC7G,EATA,CAAuC4I,GAA1BzT,EAAA6K,oBAYb,IAAAE,EAAA,SAAA2G,GAAA,SAAA3G,IAAA,IAAA6G,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAAgC,YAAcF,EAAYmB,SAI5B,OAL6ClD,EAAA5G,EAAA2G,GAK7C3G,EALA,CAA6C4I,GAAhC3T,EAAA+K,0BAQb,IAAAE,EAAA,SAAAyG,GAAA,SAAAzG,IAAA,IAAA2G,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS+R,MAChBlD,EAAAvL,KAAO,UACT,OAHqCsL,EAAA1G,EAAAyG,GAGrCzG,EAHA,CAAqCvE,GAAxB1G,EAAAiL,kBAMb,IAAAE,EAAA,SAAAuG,GAAA,SAAAvG,IAAA,IAAAyG,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASgS,KAChBnD,EAAAvL,KAAO,SACT,OAHoCsL,EAAAxG,EAAAuG,GAGpCvG,EAHA,CAAoCzE,GAAvB1G,EAAAmL,iBAMb,IAAAE,EAAA,SAAAqG,GAAA,SAAArG,IAAA,IAAAuG,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASM,KAChBuO,EAAAvL,KAAO,SACT,OAHoCsL,EAAAtG,EAAAqG,GAGpCrG,EAHA,CAAoC3E,GAAvB1G,EAAAqL,iBAMb,IAAAvC,EAAA,SAAA4I,GAAA,SAAA5I,IAAA,IAAA8I,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASO,MAChBsO,EAAAvL,KAAO,UACT,OAHqCsL,EAAA7I,EAAA4I,GAGrC5I,EAHA,CAAqCpC,GAAxB1G,EAAA8I,kBAMb,IAAAkM,EAAA,SAAAtD,GAAA,SAAAsD,mDAMA,OAN8CrD,EAAAqD,EAAAtD,GAM9CsD,EANA,CAA8CvB,GAAxBzT,EAAAgV,kBAStB,IAAAxJ,EAAA,SAAAkG,GAAA,SAAAlG,IAAA,IAAAoG,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASkS,eAClB,OAF4CtD,EAAAnG,EAAAkG,GAE5ClG,EAFA,CAA4CwJ,GAA/BhV,EAAAwL,yBAKb,IAAAE,EAAA,SAAAgG,GAAA,SAAAhG,IAAA,IAAAkG,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASmS,cAClB,OAF2CvD,EAAAjG,EAAAgG,GAE3ChG,EAFA,CAA2CsJ,GAA9BhV,EAAA0L,wBAMb1L,EAAAmV,gBAAA,SAAgCxI,GAC9B,IAAI7I,EAASwO,OAAO3F,EAAU7I,QAC9B,GAAIA,EAAOZ,MAAQH,EAASqS,MAAO,CACjC,IAAIxJ,EAA8B9H,EAAQ8H,WAC1C,GAAIA,EAAWA,EAAW1E,OAAS,KAAOyF,EACxC,OAAQ2F,OAAOxO,EAAOA,QAAQZ,MAC5B,KAAKH,EAASsS,oBACd,KAAKtS,EAASuS,kBAAmB,OAAO,GAI9C,OAAO,GAIT,IAGYC,EAHZC,EAAA,SAAA9D,GAAA,SAAA8D,mDAA+C,OAAP7D,EAAA6D,EAAA9D,GAAO8D,EAA/C,CAAwC3R,GAAlB7D,EAAAwV,YAGtB,SAAYD,GAEVA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,qBANF,CAAYA,EAAAvV,EAAAuV,aAAAvV,EAAAuV,gBAUZ,IAAAE,EAAA,SAAA/D,GAwBE,SAAA+D,EAAYnI,EAAwBjH,EAAcnD,GAAlD,IAAA0O,EACEF,EAAA5Q,KAAAR,OAAOA,KAxBTsR,EAAA1O,KAAOH,EAAS2S,OAChB9D,EAAA9N,OAAS,KAeT8N,EAAA+D,UAA8B,KAE9B/D,EAAAgE,gBAAuB,EAEvBhE,EAAAiE,YAAkC,KAKhCjE,EAAKkE,WAAa5S,EAClB0O,EAAKtE,eAAiBA,EACtB,IAAIK,EAAeC,GAAmBgE,EAAKtE,gBAC3CsE,EAAKjE,aAAeA,EACpB,IAAIoI,EAAMpI,EAAaqI,YAAYrT,EAAAsT,uBACnCrE,EAAKsE,WAAaH,GAAO,EAAIpI,EAAawI,UAAUJ,EAAM,GAAKpI,EAC/DiE,EAAKhG,WAAa,IAAIwK,MACtBxE,EAAKnN,MAAQ,IAAI7B,EAAAE,MAAM8O,EAAM,EAAGvL,EAAKa,QACrC0K,EAAKvL,KAAOA,IAOhB,OAzC4BsL,EAAA8D,EAAA/D,GAsC1BrQ,OAAAC,eAAImU,EAAAlT,UAAA,eAAJ,WAAsB,OAAOjC,KAAKwV,YAAcP,EAAWc,uCAE3DhV,OAAAC,eAAImU,EAAAlT,UAAA,iBAAJ,WAAwB,OAAOjC,KAAKwV,YAAcP,EAAWe,yCAC/Db,EAzCA,CAA4B5R,GAAf7D,EAAAyV,SA4Cb,IAAAc,EAAA,SAAA7E,GAAA,SAAA6E,IAAA,IAAA3E,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YAKEsR,EAAAtF,WAAqC,KAE3BsF,EAAA4E,+BAAgD,KAChD5E,EAAA6E,4BAA6C,OAwDzD,OAhEmD9E,EAAA4E,EAAA7E,GAWjDrQ,OAAAC,eAAIiV,EAAAhU,UAAA,gCAAJ,WAIE,OAHKjC,KAAKkW,iCACRlW,KAAKkW,+BAAiCE,GAAmBpW,MAAM,IAE1DA,KAAKkW,gEAIdnV,OAAAC,eAAIiV,EAAAhU,UAAA,6BAAJ,WAIE,OAHKjC,KAAKmW,8BACRnW,KAAKmW,4BAA8BC,GAAmBpW,MAAM,IAEvDA,KAAKmW,6DAIdpV,OAAAC,eAAIiV,EAAAhU,UAAA,kBAAJ,WACE,IAAIuB,EAASxD,KAAKwD,OAClB,QAAKA,MAGDA,EAAOZ,MAAQH,EAAS4T,YAAc7S,EAASA,EAAOA,UAGnDA,EAAOZ,MAAQH,EAAS2S,yCAIjCrU,OAAAC,eAAIiV,EAAAhU,UAAA,wBAAJ,WACE,IAAIuB,EAASxD,KAAKwD,OAClB,SAAKA,GAAWA,EAAOZ,MAAQH,EAAS4T,YAAc7S,EAASA,EAAOA,WAGlEA,EAAOZ,MAAQH,EAAS6T,qBACnBtW,KAAK4D,GAAGvB,EAAAqB,YAAY6S,SAAkC/S,EAAQgT,iBAEnEhT,EAAOZ,MAAQH,EAASgU,iBACnBzW,KAAK4D,GAAGvB,EAAAqB,YAAYgT,SAA8BlT,EAAQgT,iBAE5DhT,EAAOZ,MAAQH,EAAS2S,QAAUpV,KAAK4D,GAAGvB,EAAAqB,YAAY6S,0CAI/DN,EAAAhU,UAAA0U,oBAAA,SAAoBC,GAIlB,OACEA,EAAOhW,KAAKmF,MAAQ6Q,EAAOpJ,aAAazH,MACxC/F,KAAKmE,MAAMiJ,QAAUwJ,EAAOzS,MAAMiJ,SACjCpN,KAAKwW,kBAGZP,EAhEA,CAAmDf,GAA7BxV,EAAAuW,uBAmEtB,IAAAY,EAAA,SAAAzF,GAAA,SAAAyF,mDAMA,OAN+DxF,EAAAwF,EAAAzF,GAM/DyF,EANA,CAA+DZ,GAAzCvW,EAAAmX,mCAStB,IAAAtL,GAAA,SAAA6F,GAAA,SAAA7F,IAAA,IAAA+F,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASqS,QAIlB,OALoCzD,EAAA9F,EAAA6F,GAKpC7F,EALA,CAAoC2J,GAAvBxV,EAAA6L,kBAQb,IAAAG,GAAA,SAAA0F,GAAA,SAAA1F,IAAA,IAAA4F,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASqU,QAIlB,OALoCzF,EAAA3F,EAAA0F,GAKpC1F,EALA,CAAoCwJ,GAAvBxV,EAAAgM,kBAQb,IAAAO,GAAA,SAAAmF,GAAA,SAAAnF,IAAA,IAAAqF,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASgU,mBAelB,OAhBsCpF,EAAApF,EAAAmF,GAYpCrQ,OAAAC,eAAIiL,EAAAhK,UAAA,iBAAJ,WACE,IAAI4J,EAAiB7L,KAAK6L,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAejF,OAAS,mCAE7DqF,EAhBA,CAAsCgK,GAAzBvW,EAAAuM,oBAmBb,IAAAE,GAAA,SAAAiF,GAAA,SAAAjF,IAAA,IAAAmF,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASsU,WAIlB,OALuC1F,EAAAlF,EAAAiF,GAKvCjF,EALA,CAAuC+I,GAA1BxV,EAAAyM,qBAQb,IAAAG,GAAA,SAAA8E,GAAA,SAAA9E,IAAA,IAAAgF,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASuU,KAMlB,OAPiC3F,EAAA/E,EAAA8E,GAOjC9E,EAPA,CAAiC4I,GAApBxV,EAAA4M,eAUb,IAAAE,GAAA,SAAA4E,GAAA,SAAA5E,IAAA,IAAA8E,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASwU,QAClB,OAFoC5F,EAAA7E,EAAA4E,GAEpC5E,EAFA,CAAoC0I,GAAvBxV,EAAA8M,kBAKb,IAAAE,GAAA,SAAA0E,GAAA,SAAA1E,IAAA,IAAA4E,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASyU,kBAIlB,OALqC7F,EAAA3E,EAAA0E,GAKrC1E,EALA,CAAqCuJ,GAAxBvW,EAAAgN,mBAQb,IAAAE,GAAA,SAAAwE,GAAA,SAAAxE,IAAA,IAAA0E,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS0U,uBAKlB,OAN0C9F,EAAAzE,EAAAwE,GAM1CxE,EANA,CAA0CqJ,GAA7BvW,EAAAkN,wBASb,IAAAa,GAAA,SAAA2D,GAAA,SAAA3D,IAAA,IAAA6D,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS2U,eAMlB,OAP2C/F,EAAA5D,EAAA2D,GAO3C3D,EAPA,CAA2ClK,GAA9B7D,EAAA+N,yBAUb,IAAAE,GAAA,SAAAyD,GAAA,SAAAzD,IAAA,IAAA2D,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS4U,eAMlB,OAPkChG,EAAA1D,EAAAyD,GAOlCzD,EAPA,CAAkCpK,GAArB7D,EAAAiO,gBAUb,IAAAZ,GAAA,SAAAqE,GAAA,SAAArE,IAAA,IAAAuE,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS8T,SAUlB,OAXqClF,EAAAtE,EAAAqE,GAWrCrE,EAXA,CAAqCmI,GAAxBxV,EAAAqN,mBAcb,IAAAc,GAAA,SAAAuD,GAAA,SAAAvD,IAAA,IAAAyD,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS6U,aAIlB,OALyCjG,EAAAxD,EAAAuD,GAKzCvD,EALA,CAAyCqH,GAA5BxV,EAAAmO,uBAQb,IAAAiB,GAAA,SAAAsC,GAAA,SAAAtC,IAAA,IAAAwC,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS8U,iBAGhBjG,EAAAkG,gBAAuB,IACzB,OALsCnG,EAAAvC,EAAAsC,GAKtCtC,EALA,CAAsC+H,GAAzBnX,EAAAoP,oBAQb,IAAAG,GAAA,SAAAmC,GAAA,SAAAnC,IAAA,IAAAqC,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASgV,MAalB,OAdkCpG,EAAApC,EAAAmC,GAclCnC,EAdA,CAAkCiG,GAArBxV,EAAAuP,gBAiBb,IAAAI,GAAA,SAAA+B,GAAA,SAAA/B,IAAA,IAAAiC,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASsS,sBAalB,OAdyC1D,EAAAhC,EAAA+B,GAUvCrQ,OAAAC,eAAIqO,EAAApN,UAAA,iBAAJ,WACE,IAAI4J,EAAiB7L,KAAK6L,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAejF,OAAS,mCAE7DyI,EAdA,CAAyC4G,GAA5BvW,EAAA2P,uBAiBb,IAAApB,GAAA,SAAAmD,GAAA,SAAAnD,IAAA,IAAAqD,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASiV,KAQlB,OATiCrG,EAAApD,EAAAmD,GASjCnD,EATA,CAAiCiH,GAApBxV,EAAAuO,eAYb,IAAAS,GAAA,SAAA0C,GAAA,SAAA1C,IAAA,IAAA4C,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASkV,oBAIlB,OALuCtG,EAAA3C,EAAA0C,GAKvC1C,EALA,CAAuCuH,GAA1BvW,EAAAgP,qBAQb,IAAAN,GAAA,SAAAgD,GAAA,SAAAhD,IAAA,IAAAkD,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASmV,SAYlB,OAbqCvG,EAAAjD,EAAAgD,GAarChD,EAbA,CAAqC8G,GAAxBxV,EAAA0O,mBAgBb,IAAAQ,GAAA,SAAAwC,GAAA,SAAAxC,IAAA,IAAA0C,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASoV,uBAClB,OAF0CxG,EAAAzC,EAAAwC,GAE1CxC,EAFA,CAA0C3C,IAA7BvM,EAAAkP,wBAKb,IAAAW,GAAA,SAAA6B,GAAA,SAAA7B,IAAA,IAAA+B,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASuS,oBAClB,OAFuC3D,EAAA9B,EAAA6B,GAEvC7B,EAFA,CAAuCF,IAA1B3P,EAAA6P,qBAKb,IAAAE,GAAA,SAAA2B,GAAA,SAAA3B,IAAA,IAAA6B,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS6T,uBAIlB,OAL0CjF,EAAA5B,EAAA2B,GAK1C3B,EALA,CAA0CwG,GAA7BvW,EAAA+P,wBAQb,IAAAE,GAAA,SAAAyB,GAAA,SAAAzB,IAAA,IAAA2B,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASqV,SAIlB,OALqCzG,EAAA1B,EAAAyB,GAKrCzB,EALA,CAAqCuF,GAAxBxV,EAAAiQ,mBAQb,IAAAK,GAAA,SAAAoB,GAAA,SAAApB,IAAA,IAAAsB,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASsV,aAMlB,OAPgC1G,EAAArB,EAAAoB,GAOhCpB,EAPA,CAAgCzM,GAAnB7D,EAAAsQ,cAUb,IAAAF,GAAA,SAAAsB,GAAA,SAAAtB,IAAA,IAAAwB,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASuV,SAMlB,OAPqC3G,EAAAvB,EAAAsB,GAOrCtB,EAPA,CAAqCoF,GAAxBxV,EAAAoQ,mBAUb,IAAAI,GAAA,SAAAkB,GAAA,SAAAlB,IAAA,IAAAoB,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASwV,QAIlB,OALoC5G,EAAAnB,EAAAkB,GAKpClB,EALA,CAAoCgF,GAAvBxV,EAAAwQ,kBAQb,IAAAK,GAAA,SAAAa,GAAA,SAAAb,IAAA,IAAAe,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAASyV,MAUlB,OAXkC7G,EAAAd,EAAAa,GAWlCb,EAXA,CAAkC2E,GAArBxV,EAAA6Q,gBAcb,IAAAG,GAAA,SAAAU,GAAA,SAAAV,IAAA,IAAAY,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS0V,kBAMlB,OAPqC9G,EAAAX,EAAAU,GAOrCV,EAPA,CAAqCuF,GAAxBvW,EAAAgR,mBAUb,IAAAI,GAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAQ,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS2V,sBAClB,OAFyC/G,EAAAP,EAAAM,GAEzCN,EAFA,CAAyC+F,GAA5BnX,EAAAoR,uBAKb,IAAAF,GAAA,SAAAQ,GAAA,SAAAR,IAAA,IAAAU,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS4T,WAMlB,OAPuChF,EAAAT,EAAAQ,GAOvCR,EAPA,CAAuCsE,GAA1BxV,EAAAkR,qBAUb,IAAAI,GAAA,SAAAI,GAAA,SAAAJ,IAAA,IAAAM,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS4V,OAIlB,OALmChH,EAAAL,EAAAI,GAKnCJ,EALA,CAAmCkE,GAAtBxV,EAAAsR,iBAQb,IAAAE,GAAA,SAAAE,GAAA,SAAAF,IAAA,IAAAI,EAAA,OAAAF,KAAAG,MAAAvR,KAAA2F,YAAA3F,YACEsR,EAAA1O,KAAOH,EAAS6V,QAMlB,OAPoCjH,EAAAH,EAAAE,GAOpCF,EAPA,CAAoCgE,GAqBpC,SAAAkB,GAAmCxO,EAAmC2Q,QAAA,IAAAA,OAAA,GACpE,IAAI3X,EAAOgH,EAAYhH,KAAKmF,KACxBvC,EAASoE,EAAYpE,OACzB,OAAKA,IAEHoE,EAAYhF,MAAQH,EAAS2V,qBAC7B5U,EAAOZ,MAAQH,EAAS4T,WAElB7S,EAASA,EAAOA,SAEpBA,EAAOZ,MAAQH,EAASgU,iBACnBL,GAAqC5S,EAAQ+U,IAClD3Q,EAAYhE,GAAGvB,EAAAqB,YAAYgT,QACvBrU,EAAAmW,iBACAnW,EAAAoW,oBACF7X,EAGJ4C,EAAOZ,MAAQH,EAAS6T,sBACxB9S,EAAOZ,MAAQH,EAASyU,gBAEjBd,GAAyC5S,EAAQ+U,GACjDlW,EAAAmW,iBAAmB5X,EAErB2X,EACH3X,EACAgH,EAAYzD,MAAMiJ,OAAOC,aAAehL,EAAAsT,eAAiB/U,EAvBzCA,EA2BtB,SAAA0M,GAAmCR,GAEjC,OADIA,EAAK4L,SAAS,SAAQ5L,EAAOA,EAAK+I,UAAU,EAAG/I,EAAKlG,OAAS,IAC1DkG,EAMT,SAAAxI,GAAmBoC,EAAelD,GAChC,IAAK,IAAInD,EAAI,EAAGsG,EAAID,EAAME,OAAQvG,EAAIsG,IAAKtG,EACzCqG,EAAMrG,GAAGmD,OAASA,EA7DT9D,EAAAwR,kBAUbxR,EAAAiZ,cAAA,SAA8B/V,EAAqBoJ,GACjD,GAAIA,EACF,IAAK,IAAI3L,EAAI,EAAGsG,EAAIqF,EAAWpF,OAAQvG,EAAIsG,IAAKtG,EAAG,CACjD,IAAIuY,EAAY5M,EAAW3L,GAC3B,GAAIuY,EAAUhT,eAAiBhD,EAAM,OAAOgW,EAGhD,OAAO,MAITlZ,EAAA0W,sBA8BA1W,EAAA4N,qGCh8DA,SAAY5J,GAEVA,IAAA,eAKAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,cAEAA,IAAA,oBAEAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,4BAEAA,IAAA,gBAEAA,IAAA,gBAKAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,yCAEAA,IAAA,2BAEAA,IAAA,kCAEAA,IAAA,sBAEAA,IAAA,sCAEAA,IAAA,uCAKAA,IAAA,6BAEAA,IAAA,2BAEAA,IAAA,yBAEAA,IAAA,kCAEAA,IAAA,4BAEAA,IAAA,sBAIAA,IAAA,2BArEF,CAAYhE,EAAAgE,cAAAhE,EAAAgE,iBAyEChE,EAAAiW,eAAiB,IAEjBjW,EAAAmZ,aAAe,KAEfnZ,EAAAoZ,cAAgB,OAEhBpZ,EAAAqZ,cAAgB,OAEhBrZ,EAAA+Y,mBAAqB,IAErB/Y,EAAA8Y,iBAAmB,IAEnB9Y,EAAAsZ,gBAAkB,IAElBtZ,EAAAuZ,cAAgB,OAEhBvZ,EAAA6O,eAAiB7O,EAAAuZ,cAAgBvZ,EAAAiW,eAEjCjW,EAAAwZ,iBAAmB,uFCvFhC,IAeYC,EAfZC,EAAAjZ,EAAA,IAKAuC,EAAAvC,EAAA,GAIAkZ,EAAAlZ,EAAA,IAgBA,SAAAmZ,EAA2CC,GACzC,OAAQA,GACN,KAAKJ,EAAmBK,KAAM,MAAO,OACrC,KAAKL,EAAmBM,QAAS,MAAO,UACxC,KAAKN,EAAmBO,MAAO,MAAO,QACtC,QAEE,OADA1H,QAAO,GACA,IAeb,SAAA2H,EAA0CJ,GACxC,OAAQA,GACN,KAAKJ,EAAmBK,KAAM,OAAO9Z,EAAAka,WACrC,KAAKT,EAAmBM,QAAS,OAAO/Z,EAAAma,aACxC,KAAKV,EAAmBO,MAAO,OAAOha,EAAAoa,UACtC,QAEE,OADA9H,QAAO,GACA,IA5CXtS,EAAAqa,eAAAV,EAAAU,eACAra,EAAAsa,uBAAAX,EAAAW,uBAIF,SAAYb,GAEVA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAYA,EAAAzZ,EAAAyZ,qBAAAzZ,EAAAyZ,wBAUZzZ,EAAA4Z,6BAaa5Z,EAAAka,WAAqB,QAErBla,EAAAma,aAAuB,QAEvBna,EAAAoa,UAAoB,QAEpBpa,EAAAua,YAAsB,OAGnCva,EAAAia,4BAaA,IAAAO,EAAA,WAYE,SAAAA,EAAoBC,EAAWZ,EAA8Ba,GAH7Dpa,KAAAmE,MAAsB,KAIpBnE,KAAKma,KAAOA,EACZna,KAAKuZ,SAAWA,EAChBvZ,KAAKoa,QAAUA,EA4EnB,OAxESF,EAAAvY,OAAP,SACEwY,EACAZ,EACAc,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIH,EAAUhB,EAAAY,uBAAuBG,GAIrC,OAHY,MAARE,IAAcD,EAAUA,EAAQI,QAAQ,MAAOH,IACvC,MAARC,IAAcF,EAAUA,EAAQI,QAAQ,MAAOF,IACvC,MAARC,IAAcH,EAAUA,EAAQI,QAAQ,MAAOD,IAC5C,IAAIL,EAAkBC,EAAMZ,EAAUa,IAIxCF,EAAAO,WAAP,SACEN,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkBvY,OAAOwY,EAAMhB,EAAmBK,KAAMa,EAAMC,IAIhEJ,EAAAQ,cAAP,SACEP,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkBvY,OAAOwY,EAAMhB,EAAmBM,QAASY,EAAMC,IAInEJ,EAAAS,YAAP,SACER,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkBvY,OAAOwY,EAAMhB,EAAmBO,MAAOW,EAAMC,IAIxEJ,EAAAjY,UAAA2Y,UAAA,SAAUzW,GAER,OADAnE,KAAKmE,MAAQA,EACNnE,MAITka,EAAAjY,UAAA4Y,SAAA,WACE,OAAI7a,KAAKmE,MAELmV,EAA2BtZ,KAAKuZ,UAChC,IACAvZ,KAAKma,KAAKU,SAAS,IACnB,MACA7a,KAAKoa,QACL,QACApa,KAAKmE,MAAMiJ,OAAOJ,eAClB,IACAhN,KAAKmE,MAAM2W,KAAKD,SAAS,IACzB,IACA7a,KAAKmE,MAAM4W,OAAOF,SAAS,IAI7BvB,EAA2BtZ,KAAKuZ,UAChC,IACAvZ,KAAKma,KAAKU,SAAS,IACnB,KACA7a,KAAKoa,SAGXF,EA3FA,GAqIA,SAAAc,EAAwC7W,EAAc8W,QAAA,IAAAA,OAAA,GAKpD,IAJA,IAAIlV,EAAO5B,EAAMiJ,OAAOrH,KACpBmV,EAAMnV,EAAKa,OACXuU,EAAQhX,EAAMgX,MACdC,EAAMjX,EAAMiX,IACTD,EAAQ,IAAMzY,EAAA2Y,YAAYtV,EAAKkM,WAAWkJ,EAAQ,KAAKA,IAC9D,KAAOC,EAAMF,IAAQxY,EAAA2Y,YAAYtV,EAAKkM,WAAWmJ,KAAOA,IAMxD,IALA,IAAIE,GACF,MACAvV,EAAK8P,UAAUsF,EAAOC,GACtB,OAEKD,EAAQhX,EAAMgX,OACnBG,EAAGC,KAAK,KACRJ,IAGF,GADIF,GAAWK,EAAGC,KAAK7b,EAAAoa,WACnB3V,EAAMgX,OAAShX,EAAMiX,IACvBE,EAAGC,KAAK,UAER,KAAOJ,IAAUhX,EAAMiX,KAAKE,EAAGC,KAAK,KAGtC,OADIN,GAAWK,EAAGC,KAAK7b,EAAAua,aAChBqB,EAAGE,KAAK,IA5JJ9b,EAAAwa,oBA8Fbxa,EAAA+b,wBAAA,SACErB,EACAa,EACAS,QADA,IAAAT,OAAA,QACA,IAAAS,OAAA,GAIA,IAAIJ,KAUJ,GATIL,GAAWK,EAAGC,KAAK5B,EAA0BS,EAAQb,WACzD+B,EAAGC,KAAKjC,EAA2Bc,EAAQb,WACvC0B,GAAWK,EAAGC,KAAK7b,EAAAua,aACvBqB,EAAGC,KAAKnB,EAAQD,KAAO,IAAO,MAAQ,OACtCmB,EAAGC,KAAKnB,EAAQD,KAAKU,SAAS,KAC9BS,EAAGC,KAAK,MACRD,EAAGC,KAAKnB,EAAQA,SAGZA,EAAQjW,MAAO,CAGjB,IAAIA,EAAQiW,EAAQjW,MAChBuX,IACFJ,EAAGC,KAAK,MACRD,EAAGC,KAAKP,EAAwBZ,EAAQjW,MAAO8W,KAGjDK,EAAGC,KAAK,MACRD,EAAGC,KAAK,QACRD,EAAGC,KAAKpX,EAAMiJ,OAAOJ,gBACrBsO,EAAGC,KAAK,KACRD,EAAGC,KAAKpX,EAAM2W,KAAKD,SAAS,KAC5BS,EAAGC,KAAK,KACRD,EAAGC,KAAKpX,EAAM4W,OAAOF,SAAS,KAC9BS,EAAGC,KAAK,KAEV,OAAOD,EAAGE,KAAK,KAIjB9b,EAAAsb,0BA2BA,IAAAW,EAAA,WAME,SAAAA,EAAsBC,QAAA,IAAAA,MAAA,MACpB5b,KAAK4b,YAAcA,GAAiD,IAAI9F,MAkD5E,OA9CE6F,EAAA1Z,UAAA4Z,eAAA,SACE1B,EACAZ,EACApV,EACAkW,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIH,EAAUF,EAAkBvY,OAAOwY,EAAMZ,EAAUc,EAAMC,EAAMC,GAAMK,UAAUzW,GACnFnE,KAAK4b,YAAYL,KAAKnB,IAMxBuB,EAAA1Z,UAAA6Z,KAAA,SACE3B,EACAhW,EACAkW,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAva,KAAK6b,eAAe1B,EAAMhB,EAAmBK,KAAMrV,EAAOkW,EAAMC,EAAMC,IAIxEoB,EAAA1Z,UAAA8Z,QAAA,SACE5B,EACAhW,EACAkW,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAva,KAAK6b,eAAe1B,EAAMhB,EAAmBM,QAAStV,EAAOkW,EAAMC,EAAMC,IAI3EoB,EAAA1Z,UAAA+Z,MAAA,SACE7B,EACAhW,EACAkW,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAva,KAAK6b,eAAe1B,EAAMhB,EAAmBO,MAAOvV,EAAOkW,EAAMC,EAAMC,IAE3EoB,EAzDA,GAAsBjc,EAAAic,q5BCjOtB,IA4IYM,EA5IZ5Z,EAAAlC,EAAA,GAgBA+b,EAAA/b,EAAA,GAMAgc,EAAAhc,EAAA,GAOAic,EAAAjc,EAAA,GAsCAkc,EAAAlc,EAAA,GAsCAmc,EAAAnc,EAAA,IAGAoc,EAAApc,EAAA,IAKAqc,EAAA,WAKA,OALA,gBAQAC,EAAA,WAIA,OAJA,gBAOAC,EAAA,WAGA,OAHA,gBA4DA,SAAAC,EAAmC/W,EAA8BgX,GAE/D,OADA5K,OAAO4K,EAAIhW,QACHhB,GACN,KAAKwW,EAAAvK,cAAcW,SACnB,KAAK4J,EAAAvK,cAAce,gBACjB,OAAQgK,EAAI3K,WAAW,IACrB,QACE,GAAW,MAAP2K,EAAa,OAAOX,EAAaY,YACrC,GAAW,OAAPD,EAAc,OAAOX,EAAaa,YACtC,MAEF,SACE,GAAW,MAAPF,EAAa,OAAOX,EAAac,sBACrC,GAAW,OAAPH,EAAc,OAAOX,EAAae,sBACtC,MAEF,QACE,GAAW,KAAPJ,EAAY,OAAOX,EAAagB,IACpC,MAEF,QACE,GAAW,KAAPL,EAAY,OAAOX,EAAaiB,IACpC,MAEF,QACE,GAAW,KAAPN,EAAY,OAAOX,EAAakB,IACpC,GAAW,MAAPP,EAAa,OAAOX,EAAamB,IACrC,MAEF,QACE,GAAW,KAAPR,EAAY,OAAOX,EAAaoB,IACpC,MAEF,QACE,GAAW,KAAPT,EAAY,OAAOX,EAAaqB,IACpC,MAEF,QACE,GAAW,KAAPV,EAAY,OAAOX,EAAasB,YACpC,MAEF,SACE,GAAW,KAAPX,EAAY,OAAOX,EAAauB,WACpC,MAEF,QACE,GAAW,KAAPZ,EAAY,OAAOX,EAAawB,YACpC,MAEF,QACE,GAAW,MAAPb,EAAa,OAAOX,EAAayB,GACrC,MAEF,QACE,GAAW,MAAPd,EAAa,OAAOX,EAAa0B,GACrC,MAEF,QACE,GAAW,KAAPf,EAAY,OAAOX,EAAa2B,GACpC,GAAW,MAAPhB,EAAa,OAAOX,EAAa4B,GACrC,GAAW,MAAPjB,EAAa,OAAOX,EAAa6B,YACrC,GAAW,OAAPlB,EAAc,OAAOX,EAAa8B,cACtC,MAEF,QACE,GAAW,KAAPnB,EAAY,OAAOX,EAAa+B,GACpC,GAAW,MAAPpB,EAAa,OAAOX,EAAagC,GACrC,GAAW,MAAPrB,EAAa,OAAOX,EAAaiC,YAIzC,MAEF,KAAK9B,EAAAvK,cAAcgB,gBACjB,OAAQ+J,EAAI3K,WAAW,IACrB,QACE,GAAW,KAAP2K,EAAY,OAAOX,EAAakC,KACpC,GAAW,MAAPvB,EAAa,OAAOX,EAAamC,WACrC,MAEF,QACE,GAAW,KAAPxB,EAAY,OAAOX,EAAaoC,MACpC,GAAW,MAAPzB,EAAa,OAAOX,EAAaqC,WACrC,MAEF,QACE,GAAW,KAAP1B,EAAY,OAAOX,EAAasC,IACpC,MAEF,SACE,GAAW,KAAP3B,EAAY,OAAOX,EAAauC,YAIxC,MAEF,KAAKpC,EAAAvK,cAAciB,iBACjB,OAAQ8J,EAAI3K,WAAW,IACrB,QACE,GAAW,MAAP2K,EAAa,OAAOX,EAAawC,YACrC,MAEF,QACE,GAAW,MAAP7B,EAAa,OAAOX,EAAayC,aAO7C,OAAOzC,EAAa0C,SA9JtB,SAAY1C,GACVA,IAAA,qBAGAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,iDACAA,IAAA,iDAGAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,kCACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAGAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,4BAGAA,IAAA,8BACAA,IAAA,8BAvCF,CAAYA,EAAAvc,EAAAuc,eAAAvc,EAAAuc,kBAiKZ,IAorDY2C,EAmCAC,EAvtDNC,EAAa,IAAIC,IAGvBC,EAAA,SAAA5N,GAyCE,SAAA4N,EAAYpD,QAAA,IAAAA,MAAA,MAAZ,IAAAtK,EACEF,EAAA5Q,KAAAR,KAAM4b,IAAY5b,YAnCpBsR,EAAA2N,kBAAyB,EAKzB3N,EAAA4N,eAAsC,IAAIH,IAE1CzN,EAAA6N,gBAAuC,IAAIJ,IAE3CzN,EAAA8N,YAAgCN,EAEhCxN,EAAA+N,YAAqC,IAAIN,IAEzCzN,EAAAgO,iBAAwC,IAAIP,IAE5CzN,EAAAiO,mBAA+C,IAAIR,IAGnDzN,EAAAkO,eAAwC,KAExClO,EAAAmO,eAA+B,KAI/BnO,EAAAoO,aAAyC,KAEzCpO,EAAAqO,cAAiC,KAEjCrO,EAAAsO,uBAA0C,KAQxCtO,EAAKuO,SAAW,IAAItD,EAAAuD,SAASxO,GAC7BA,EAAKyO,aAkoDT,OA9qD6B1O,EAAA2N,EAAA5N,GAgD3B4N,EAAA/c,UAAA+d,MAAA,WACE,IAAIC,EAAM,IAAI3D,EAAA4D,IAAIlgB,MAElB,OADAigB,EAAIE,UACGF,GAITjB,EAAA/c,UAAAme,UAAA,SAAUpT,GAER,IADA,IAAI+S,EAAU/f,KAAK+f,QACV1f,EAAI,EAAGsG,EAAIoZ,EAAQnZ,OAAQvG,EAAIsG,IAAKtG,EAAG,CAC9C,IAAI+M,EAAS2S,EAAQ1f,GACrB,GAAI+M,EAAOJ,gBAAkBA,EAAgB,OAAOI,EAEtD,OAAO,MAIT4R,EAAA/c,UAAAoe,mBAAA,SAAmBC,GACjB,IAAIC,EACJ,OACEvgB,KAAKogB,UAAUE,EAAiC,QAChDtgB,KAAKogB,UAAUE,EAAiC,cAChDtgB,KAAKogB,WAAWG,EAAMle,EAAAkM,eAAiB+R,GAAkC,QACzEtgB,KAAKogB,UAAWG,EAAyD,cAK7EvB,EAAA/c,UAAAue,WAAA,SAAWC,eACTzgB,KAAKygB,QAAUA,EAGfzgB,KAAKof,YAAc,IAAIL,MACpB,KAAM5C,EAAAuE,KAAKC,KACX,MAAOxE,EAAAuE,KAAKE,MACZ,MAAOzE,EAAAuE,KAAKG,MACZ,MAAO1E,EAAAuE,KAAKI,MACZ,QAASL,EAAQM,YACjB,KAAM5E,EAAAuE,KAAKM,KACX,MAAO7E,EAAAuE,KAAKO,MACZ,MAAO9E,EAAAuE,KAAKQ,MACZ,MAAO/E,EAAAuE,KAAKS,MACZ,QAASV,EAAQW,YACjB,OAAQjF,EAAAuE,KAAKW,OACb,MAAOlF,EAAAuE,KAAKY,MACZ,MAAOnF,EAAAuE,KAAKa,MACZ,OAAQpF,EAAAuE,KAAKc,OACb,SAAUrF,EAAAuE,KAAKa,MACf,UAAWpF,EAAAuE,KAAKW,QAInBrhB,KAAKyhB,mBAAmB,aAActF,EAAAuE,KAAKG,IACzCa,QAAQjB,EAAQkB,SAAW,EAAI,IACjC3hB,KAAKyhB,mBAAmB,qBAAsBtF,EAAAuE,KAAKW,KACjDK,QAAQjB,EAAQmB,cAAgB,EAAI,EAAG,IACzC5hB,KAAKyhB,mBAAmB,gBAAiBtF,EAAAuE,KAAKW,KAC5CK,QAAQjB,EAAQoB,SAAW,EAAI,EAAG,IACpC7hB,KAAKyhB,mBAAmB,kBAAmBtF,EAAAuE,KAAKG,IAC9Ca,QAAQjB,EAAQqB,WAAY,IAC9B9hB,KAAKyhB,mBAAmB,qBAAsBtF,EAAAuE,KAAKG,IACjDa,QAAQjB,EAAQsB,kBAAmB,IACrC/hB,KAAKyhB,mBAAmB,mBAAoBtF,EAAAuE,KAAKG,IAC/Ca,QAAQjB,EAAQuB,gBAAiB,IACnChiB,KAAKyhB,mBAAmB,6BAA8BtF,EAAAuE,KAAKW,KACzDK,QAAQjB,EAAQwB,WAAU,GAA2B,EAAI,EAAG,IAC9DjiB,KAAKyhB,mBAAmB,6BAA8BtF,EAAAuE,KAAKW,KACzDK,QAAQjB,EAAQwB,WAAU,GAA2B,EAAI,EAAG,IAS9D,IANA,IAAIC,EAAgB,IAAIpM,MACpBqM,EAAgB,IAAIpD,IACpBqD,EAAgB,IAAItM,MACpBuM,EAAmB,IAAIvM,MAGlBzV,EAAI,EAAGsG,EAAI3G,KAAK+f,QAAQnZ,OAAQvG,EAAIsG,IAAKtG,EAAG,CACnD,IAAI+M,EAASpN,KAAK+f,QAAQ1f,GAGtBiiB,EAAY,IAAIC,EAAUviB,KAAMoN,GACpCpN,KAAKkf,eAAenb,IAAIue,EAAUE,aAAcF,GAChDtiB,KAAKyiB,iBAAmBH,EAIxB,IADA,IAAIhX,EAAa8B,EAAO9B,WACfoX,EAAI,EAAGpiB,EAAIgL,EAAW1E,OAAQ8b,EAAIpiB,IAAKoiB,EAAG,CACjD,IAAIrW,EAAYf,EAAWoX,GAC3B,OAAQrW,EAAUzJ,MAChB,KAAKwZ,EAAA3Z,SAASgU,iBACZzW,KAAK2iB,gBAAkCtW,EAAW+V,EAAeC,GACjE,MAEF,KAAKjG,EAAA3Z,SAASyU,gBACZlX,KAAK4iB,eAAgCvW,GACrC,MAEF,KAAK+P,EAAA3Z,SAAS8T,OACZvW,KAAK6iB,kBAAmCxW,EAAW8V,GACnD,MAEF,KAAK/F,EAAA3Z,SAASsS,oBACZ/U,KAAK8iB,mBAAwCzW,GAC7C,MAEF,KAAK+P,EAAA3Z,SAASmV,OACZ5X,KAAK+iB,kBAAmC1W,EAAW8V,EAAeD,GAClE,MAEF,KAAK9F,EAAA3Z,SAASoV,qBACZ7X,KAAKgjB,oBAA0C3W,GAC/C,MAEF,KAAK+P,EAAA3Z,SAAS6T,qBACZtW,KAAKijB,oBAA0C5W,EAAW+V,EAAeC,GACzE,MAEF,KAAKjG,EAAA3Z,SAAS0V,gBACZnY,KAAKkjB,oBAAqC7W,GAC1C,MAEF,KAAK+P,EAAA3Z,SAAS4T,SACZrW,KAAKmjB,oBAAuC9W,KAQpD,IAAShM,EAAI,EAAGA,EAAI6hB,EAActb,QAAS,CACzC,IAAIwc,EAAelB,EAAc7hB,GAEjC,GADIuH,EAAcwb,EAAaxb,aAEzBQ,EAAUpI,KAAKqjB,gBAAgBD,EAAa5V,aAAc2U,KAE5DniB,KAAKkf,eAAenb,IAAIqf,EAAaE,UAAWlb,GAChD8Z,EAAcqB,OAAOljB,EAAG,KAEpB+H,EAAUpI,KAAKqjB,gBAAgBD,EAAaI,gBAAiBrB,KAC/DniB,KAAKkf,eAAenb,IAAIqf,EAAaE,UAAWlb,GAChD8Z,EAAcqB,OAAOljB,EAAG,KAExBL,KAAKgc,MACHE,EAAAnC,eAAe0J,kCACf7b,EAAYzD,MACMyD,EAAYpE,OAAQsJ,KAAKxL,MAC3CsG,EAAY4F,aAAazH,QAEzB1F,QAIF+H,EAAUpI,KAAKkf,eAAehe,IAAIkiB,EAAa5V,gBAEjDxN,KAAKkf,eAAenb,IAAIqf,EAAaE,UAAWlb,GAChD8Z,EAAcqB,OAAOljB,EAAG,KAEpB+H,EAAUpI,KAAKkf,eAAehe,IAAIkiB,EAAaI,mBACjDxjB,KAAKkf,eAAenb,IAAIqf,EAAaE,UAAWlb,GAChD8Z,EAAcqB,OAAOljB,EAAG,KAExB2R,QAAO,KACL3R,OAOV,IAAuC,IAAAqjB,EAAAC,EAAAxB,GAAayB,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAE,CAA7C,IAAAE,EAAAC,EAAAJ,EAAAtiB,MAAA,GAAC2iB,EAAAF,EAAA,GAAYG,EAAAH,EAAA,GAChBI,EAAqCD,EACrC9b,OAAO,EACX,EAAG,CACD,IAAI+b,EAAcC,WAkBX,EAGFhc,EAAUpI,KAAKkf,eAAehe,IAAIijB,EAAc3W,iBAEhDpF,EAAUpI,KAAKkf,eAAehe,IAAIijB,EAAcvN,OAAOhW,KAAKmF,OAE7D/F,KAAKqkB,yBACHJ,EACA7b,EACA+b,EAAcvN,OAAOpJ,cAGvBxN,KAAKgc,MACHE,EAAAnC,eAAeuK,mBACfJ,EAAatN,OAAOzS,MAAO+f,EAAatN,OAAOhW,KAAKmF,MAGxD,MAnCA,GAAIqC,EAAUpI,KAAKsf,iBAAiBpe,IAAIijB,EAAc3W,cAAe,CACnExN,KAAKqkB,yBACHJ,EACA7b,EACA+b,EAAcvN,OAAOpJ,cAEvB,OAEF2W,EAAgBhC,EAAcjhB,IAAIijB,EAAc3W,gBAE9CxN,KAAKgc,MACHE,EAAAnC,eAAe0J,kCACfS,EAAatN,OAAOpJ,aAAarJ,MACW+f,EAAatN,OAAOpT,OAAQsJ,KAAMxL,MAC9E4iB,EAAatN,OAAOpJ,aAAazH,YAuBhCoe,qGAIX,IAAItE,EAAW7f,KAAK6f,SACpB,IAASxf,EAAI,EAAGsG,EAAIyb,EAAcxb,OAAQvG,EAAIsG,IAAKtG,EAAG,CACpD,IAAIkkB,EAAmBnC,EAAc/hB,GACjCmkB,EAAqBD,EAAiB3c,YACtC6c,EAAczS,OAAOwS,EAAmB9f,aACxCggB,EAAc7E,EAAS8E,kBAAkBF,EAAY7jB,KAAM,MAC/D,GAAK8jB,EACL,GAAIA,EAAY9hB,MAAQgc,EAAYgG,gBAAiB,CACnD,IAAIC,EAAgCH,EACpCH,EAAiBM,cAAgBA,OAEjC7kB,KAAKgc,MACHE,EAAAnC,eAAe+K,sCACfL,EAAYtgB,OAOhB,IAAI4gB,EAAgBtE,EAAQsE,cAC5B,GAAIA,MACF,IAA0B,IAAAC,EAAArB,EAAAoB,GAAaE,EAAAD,EAAAnB,QAAAoB,EAAAnB,KAAAmB,EAAAD,EAAAnB,OAAE,CAAhC,IAAAqB,EAAAlB,EAAAiB,EAAA3jB,MAAA,GAACmP,EAAAyU,EAAA,GAAOtkB,EAAAskB,EAAA,GACf,GAAKtkB,EAAKgG,OAAV,CAEA,KADIwB,EAAUpI,KAAKkf,eAAehe,IAAIN,IAEjC,MAAM,IAAIukB,MAAM,sBAAwBvkB,GADhCZ,KAAKkf,eAAenb,IAAI0M,EAAOrI,sGAOlD,GAAIpI,KAAKkf,eAAekG,IAAI,SAAU,CAChChd,EAAU4J,OAAOhS,KAAKkf,eAAehe,IAAI,UAC7C8Q,OAAO5J,EAAQxF,MAAQgc,EAAYgG,iBACnC5kB,KAAKwf,eAAiCpX,EAIxC,GAAIpI,KAAKkf,eAAekG,IAAI,UAAW,CACjChd,EAAU4J,OAAOhS,KAAKkf,eAAehe,IAAI,WAG7C,GAFA8Q,OAAO5J,EAAQxF,MAAQgc,EAAYgG,iBAC/BS,EAAWxF,EAASyF,aAA6Bld,EAAS,MAE5D,GAAIpI,KAAKof,YAAYgG,IAAI,UAAW,CAClC,IAAIxd,EAA+BQ,EAASR,YAC5C5H,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOyD,EAAY4d,+BAGtCxlB,KAAKyf,eAAiB4F,EACtBrlB,KAAKof,YAAYrb,IAAI,SAAUshB,EAASjhB,MAOxCgE,EAAU4J,OAAOhS,KAAKkf,eAAehe,IAAI,WAC7C8Q,OAAO5J,EAAQxF,MAAQgc,EAAY6G,oBACnCzlB,KAAK0lB,cAAmCtd,EAItCpI,KAAKuf,mBAAmB6F,IAAI,YAC1Bhd,EAAyBpI,KAAKuf,mBAAmBre,IAAI,QAASkH,SAExDxF,MAAQgc,EAAY6G,oBACPrd,EAAStE,MAAMzB,EAAAqB,YAAYiiB,QAAUtjB,EAAAqB,YAAYkiB,WAElDxd,EAASrE,IAAI1B,EAAAqB,YAAYmiB,MAC7C7lB,KAAK0f,aAAkCtX,IAK3C,GAAIpI,KAAKkf,eAAekG,IAAI,SAAU,CAChChd,EAAmBpI,KAAKkf,eAAehe,IAAI,SAC/C8Q,OAAO5J,EAAQxF,MAAQgc,EAAY6G,qBAC/BJ,EAAWrlB,KAAK6f,SAASiG,gBAAmC1d,EAAS,SAC3DpI,KAAK2f,cAAgB0F,GAIrC,GAAIrlB,KAAKkf,eAAekG,IAAI,UAAW,CACrC,IAMQC,EALJtZ,GADA3D,EAAmBpI,KAAKkf,eAAehe,IAAI,WACzB6K,QACtB,GAAIA,EACF,GAAIA,EAAQqZ,IAAI,YACdhd,EAAU4J,OAAOjG,EAAQ7K,IAAI,aAC7B8Q,OAAO5J,EAAQxF,MAAQgc,EAAY6G,qBAC/BJ,EAAWrlB,KAAK6f,SAASiG,gBAAmC1d,EAAS,SAC3DpI,KAAK4f,uBAAyByF,KAOpDrG,EAAA/c,UAAAwf,mBAAA,SAAmBsE,EAAoB3hB,EAAY9C,GACjD0Q,OAAO5N,EAAKR,GAAE,IACd5D,KAAKkf,eAAenb,IAAIgiB,EACtB,IAAIC,EAAOhmB,KAAM+lB,EAAYA,EAAY3hB,EAAM,KAAMya,EAAelb,MACjEsiB,yBAAyB3kB,KAKhC0d,EAAA/c,UAAAikB,iBAAA,SAAiBH,EAAoB3hB,EAAY9C,GAC/C0Q,OAAO5N,EAAKR,GAAE,IACd5D,KAAKkf,eAAenb,IAAIgiB,EACtB,IAAIC,EAAOhmB,KAAM+lB,EAAYA,EAAY3hB,EAAM,KAAMya,EAAelb,MACjEwiB,uBAAuB7kB,KAKtB0d,EAAA/c,UAAAohB,gBAAR,SACE7V,EACA4Y,GAIA,IAFA,IAAIhe,EACAkX,EAAmBtf,KAAKsf,mBACzB,CACD,GAAIlX,EAAUkX,EAAiBpe,IAAIsM,GAAe,OAAOpF,EACzD,IAAI8b,EAAekC,EAAmBllB,IAAIsM,GAC1C,IAAK0W,EAAc,MACnB,IAAIA,EAAaE,WAIjB,OAAOpkB,KAAKkf,eAAehe,IAAIgjB,EAAa1W,cAH1CA,EAAe0W,EAAa1W,aAKhC,OAAO,MAIDwR,EAAA/c,UAAAokB,gBAAR,SACEra,EACAsa,GAGA,IADA,IAAIC,EAAe1H,EAAelb,KACzBtD,EAAI,EAAGsG,EAAIqF,EAAWpF,OAAQvG,EAAIsG,IAAKtG,EAAG,CACjD,IAAIuY,EAAY5M,EAAW3L,GAEvBwD,EAAO2iB,EADApK,EAAAvW,oBAAoB+S,EAAUhY,OAErCiD,IACEA,GAAQgb,EAAe1M,QACrByG,EAAUzU,MAAMiJ,OAAOqZ,UACzBF,GAAgB1iB,EAEhB7D,KAAKgc,MACHE,EAAAnC,eAAe2M,8BACf9N,EAAUzU,MAAOyU,EAAUhY,KAAKuD,MAAM0W,YAG/ByL,EAAgBziB,EAKlB0iB,EAAe1iB,EACxB7D,KAAKgc,MACHE,EAAAnC,eAAe4M,oBACf/N,EAAUzU,MAAOyU,EAAUhY,KAAKuD,MAAM0W,YAGxC0L,GAAgB1iB,EAVhB7D,KAAKgc,MACHE,EAAAnC,eAAe2M,8BACf9N,EAAUzU,MAAOyU,EAAUhY,KAAKuD,MAAM0W,aAY9C,OAAO0L,GAIDvH,EAAA/c,UAAA2kB,YAAR,SACExe,EACAR,GAEA,IAAIif,EAAajf,EAAYpE,OAE7B,GACG4E,EAAQ0e,aAAajI,EAAevM,SAEnC1K,EAAYzD,MAAMiJ,OAAOqZ,WACzBre,EAAQxE,GAAGvB,EAAAqB,YAAY6S,UAErBvE,OAAO6U,GAAYjkB,MAAQwZ,EAAA3Z,SAAS2S,QAE5ByR,EAAYjkB,MAAQwZ,EAAA3Z,SAAS4T,UACnCrE,OAAc6U,EAAYrjB,QAAQZ,MAAQwZ,EAAA3Z,SAAS2S,QAGzD,CACA,IAAI2Q,EAAane,EAAY4d,yBACzBxlB,KAAKkf,eAAekG,IAAIW,GAC1B/lB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOiE,EAAQoa,cAGlCxiB,KAAKkf,eAAenb,IAAIgiB,EAAY3d,GAIpCA,EAAQ0e,aAAajI,EAAe1M,WACtC/J,EAAQoa,aAAe5a,EAAY4d,2BAK/BxG,EAAA/c,UAAA0gB,gBAAR,SACE/a,EACAwa,EACAC,EACA0E,QAAA,IAAAA,MAAA,MAEA,IAAIvE,EAAe5a,EAAYof,sBAC/B,GAAIhnB,KAAKkf,eAAekG,IAAI5C,GAC1BxiB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,OAH5B,CAQA,IAAIxW,EAAapE,EAAYoE,WACzBib,EAAarf,EAAYhH,KAAKmF,KAC9B9D,EAAY,IAAIilB,EAClBlnB,KACAinB,EACAzE,EACA5a,EACAoE,EACIhM,KAAKqmB,gBAAgBra,EACnB6S,EAAevM,OACfuM,EAAepM,OACfoM,EAAenM,WAEjBmM,EAAelb,MAErB1B,EAAUuB,OAASujB,EACnB/mB,KAAKkf,eAAenb,IAAIye,EAAcvgB,GAEtC,IAAI6J,EAAkBlE,EAAYkE,gBAClC,GAAIA,EAAiB,CACnB,IAAIqb,EAAqBrb,EAAgBlF,OACzC,GAAI3E,EAAU6kB,aAAajI,EAAenM,WACpCyU,GACFnnB,KAAKgc,MACHE,EAAAnC,eAAeqN,8CACfhL,EAAA5Z,MAAMgZ,KACJ5T,EAAYhH,KAAKuD,MACjB2H,EAAgBqb,EAAqB,GAAGhjB,aAMzC,GAAIgjB,EAAoB,CAC7B,IAAK,IAAI9mB,EAAI,EAAGA,EAAI8mB,IAAsB9mB,EACxCL,KAAK+b,QACHG,EAAAnC,eAAesN,wBACfvb,EAAgBzL,GAAG8D,OAGvBke,EAAiB9G,KAAKtZ,IAQ1B,GAHI2F,EAAYlD,aAAa0d,EAAc7G,KAAKtZ,GAG5C8kB,EAAW,CACb,GAAIA,EAAUhb,SACZ,GAAIgb,EAAUhb,QAAQqZ,IAAI6B,GAKxB,YAJAjnB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,QAK5BuE,EAAUhb,QAAU,IAAIgT,IAE1BgI,EAAUhb,QAAQhI,IAAIkjB,EAAYhlB,GAC9B8kB,EAAUnjB,GAAGvB,EAAAqB,YAAY4jB,gBAAkBrlB,EAAU2B,GAAGvB,EAAAqB,YAAY6S,SACtEtU,EAAU8B,IAAI1B,EAAAqB,YAAY4jB,oBAIvB,GAAIrlB,EAAU2B,GAAGvB,EAAAqB,YAAY6S,QAAS,CAC3C,GAAIvW,KAAKsf,iBAAiB8F,IAAI5C,GAK5B,YAJAxiB,KAAKgc,MACHE,EAAAnC,eAAewN,4DACf3f,EAAYhH,KAAKuD,MAAOqe,GAM5B,GAFAxiB,KAAKsf,iBAAiBvb,IAAIye,EAAcvgB,GACxCjC,KAAKyiB,iBAAiB1W,QAAQhI,IAAIkjB,EAAYhlB,GAC1CA,EAAU2B,GAAGvB,EAAAqB,YAAY6S,SAAW3O,EAAYzD,MAAMiJ,OAAOoa,QAAS,CACxE,GAAIxnB,KAAKuf,mBAAmB6F,IAAI6B,GAAa,CAC3C,IAAIQ,EAA+BznB,KAAKuf,mBAAmBre,IAAI+lB,GAK/D,YAJAjnB,KAAKgc,MACHE,EAAAnC,eAAewN,4DACf3f,EAAYhH,KAAKuD,MAAOsjB,EAAerf,QAAQoa,cAInDvgB,EAAU8B,IAAI1B,EAAAqB,YAAY4jB,eAC1BtnB,KAAKuf,mBAAmBxb,IAAIkjB,GAC1B7e,QAASnG,EACT2J,WAAYhE,EAAYhH,QAO9B,IADA,IAAI8mB,EAAqB9f,EAAYmE,QACrBpF,GAAPtG,EAAI,EAAOqnB,EAAmB9gB,QAAQvG,EAAIsG,IAAKtG,EAAG,CACzD,IAAIsnB,EAAoBD,EAAmBrnB,GAC3C,OAAQsnB,EAAkB/kB,MACxB,KAAKwZ,EAAA3Z,SAAS8U,iBACZvX,KAAK4nB,gBAAkCD,EAAmB1lB,GAC1D,MAEF,KAAKma,EAAA3Z,SAASuS,kBACR2S,EAAkB7jB,MAAMzB,EAAAqB,YAAYmkB,IAAMxlB,EAAAqB,YAAYokB,KACxD9nB,KAAK+nB,mBAAsCJ,EAAmB1lB,GAE9DjC,KAAKgoB,iBAAoCL,EAAmB1lB,GAE9D,MAEF,QAEE,YADA+P,QAAO,IAMbhS,KAAK4mB,YAAY3kB,EAAW2F,KAItBoX,EAAA/c,UAAA2lB,gBAAR,SACEhgB,EACAqgB,GAEA,IAAIrnB,EAAOgH,EAAYhH,KAAKmF,KACxByc,EAAe5a,EAAYof,sBAC3Bhb,EAAapE,EAAYoE,WACzBkc,EAAcD,EAAerlB,MAAQgc,EAAYuJ,oBAGrD,GAAIvgB,EAAYhE,GAAGvB,EAAAqB,YAAYgT,QAAS,CAKtC,GAJIwR,GAEFlW,QAAO,GAELhS,KAAKkf,eAAekG,IAAI5C,GAK1B,YAJAxiB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,GAI5B,GAAIyF,EAAelc,SACjB,GAAIkc,EAAelc,QAAQqZ,IAAIxkB,GAK7B,YAJAZ,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,QAK5ByF,EAAelc,QAAU,IAAIgT,IAE/B,IAAIqJ,EAAc,IAAIpC,EACpBhmB,KACAY,EACA4hB,EACArG,EAAAuE,KAAKc,KACL5Z,EACAoE,EACIhM,KAAKqmB,gBAAgBra,EAAY6S,EAAetM,QAChDsM,EAAelb,MAErBykB,EAAY5kB,OAASykB,EACrBA,EAAelc,QAAQhI,IAAInD,EAAMwnB,GACjCpoB,KAAKkf,eAAenb,IAAIye,EAAc4F,GAClCH,EAAerkB,GAAGvB,EAAAqB,YAAY4jB,gBAChCc,EAAYrkB,IAAI1B,EAAAqB,YAAY4jB,eAG1Bc,EAAYtB,aAAajI,EAAetM,UAAY6V,EAAYxkB,GAAGvB,EAAAqB,YAAY2kB,WACjFroB,KAAKgc,MACHE,EAAAnC,eAAe2M,8BACf1U,OAAOoK,EAAAzD,cAAcyD,EAAAvK,cAAcU,OAAQvG,IAAa7H,MAAO,cAK9D,CAKL,GAJI+jB,GAEFlW,QAAQpK,EAAY9D,MAAMzB,EAAAqB,YAAY4kB,SAAWjmB,EAAAqB,YAAYmkB,IAAMxlB,EAAAqB,YAAYokB,MAE7EG,EAAeM,iBACjB,GAAIN,EAAeM,gBAAgBnD,IAAIxkB,GAKrC,YAJAZ,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,QAK5ByF,EAAeM,gBAAkB,IAAIxJ,IAEvC,IAAIyJ,EAAgB,IAAIC,EACtBR,EACArnB,EACA4hB,EACA5a,GAEEoE,GAAYhM,KAAKqmB,gBAAgBra,EAAY6S,EAAelb,MAChEskB,EAAeM,gBAAgBxkB,IAAInD,EAAM4nB,KAKrCxJ,EAAA/c,UAAA+lB,iBAAR,SACEpgB,EACAqgB,GAEA,IAAIhB,EAAarf,EAAYhH,KAAKmF,KAC9Byc,EAAe5a,EAAYof,sBAC3B/kB,EAAsC,KAEtC+J,EAAapE,EAAYoE,WACzB0c,EAAiB7J,EAAelb,KAWpC,GAVIqI,IACF0c,EAAiB1oB,KAAKqmB,gBAAgBra,EACpC6S,EAAejM,gBACfiM,EAAehM,gBACfgM,EAAe/L,iBACf+L,EAAetM,SAKf3K,EAAYhE,GAAGvB,EAAAqB,YAAYgT,QAAS,CAGtC,GAFA1E,OAAOpK,EAAYhH,KAAKgC,MAAQwZ,EAAA3Z,SAASoR,aAErC7T,KAAKkf,eAAekG,IAAI5C,GAK1B,YAJAxiB,KAAKgc,MACHE,EAAAnC,eAAewL,uBAAwB3d,EAAYhH,KAAKuD,MACxDqe,GAIJ,GAAIyF,EAAelc,SACjB,GAAIkc,EAAelc,QAAQqZ,IAAI6B,GAK7B,YAJAjnB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,QAK5ByF,EAAelc,QAAU,IAAIgT,IAE/B9c,EAAY,IAAI0mB,EACd3oB,KACAinB,EACAzE,EACA5a,EACAqgB,EACAS,GAEFT,EAAelc,QAAQhI,IAAIkjB,EAAYhlB,GACvCjC,KAAKkf,eAAenb,IAAIye,EAAcvgB,GAClCgmB,EAAerkB,GAAGvB,EAAAqB,YAAY4jB,gBAChCrlB,EAAU8B,IAAI1B,EAAAqB,YAAY4jB,mBAIvB,CACL,GAAIW,EAAeM,iBACjB,GAAIN,EAAeM,gBAAgBnD,IAAI6B,GAKrC,YAJAjnB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,QAK5ByF,EAAeM,gBAAkB,IAAIxJ,IAEvC9c,EAAY,IAAI0mB,EACd3oB,KACAinB,EACAzE,EACA5a,EACAqgB,EACAS,GAKE9gB,EAAYhH,KAAKgC,MAAQwZ,EAAA3Z,SAASoR,YAChCoU,EAAeW,qBACjB5oB,KAAKgc,MACHE,EAAAnC,eAAe8O,qDACfjhB,EAAYhH,KAAKuD,QAGnBlC,EAAU8B,IAAI1B,EAAAqB,YAAYmQ,aAC1BoU,EAAeW,qBAAuB3mB,GAGxCgmB,EAAeM,gBAAgBxkB,IAAIkjB,EAAYhlB,GAE7CgmB,EAAerkB,GAAGvB,EAAAqB,YAAY4jB,gBAChCrlB,EAAU8B,IAAI1B,EAAAqB,YAAY4jB,eAI9BtnB,KAAK8oB,uBAAuBlhB,EAAYoE,WAAY/J,EAAWgmB,IAGzDjJ,EAAA/c,UAAA6mB,uBAAR,SACE9c,EACA/J,EACAgmB,GAEA,GAAIjc,EACF,IAAK,IAAI3L,EAAI,EAAGsG,EAAIqF,EAAWpF,OAAQvG,EAAIsG,IAAKtG,EAAG,CACjD,IAAIuY,EAAY5M,EAAW3L,GAC3B,OAAQuY,EAAUhT,eAChB,KAAKwW,EAAAvK,cAAcW,SACnB,KAAK4J,EAAAvK,cAAce,gBACnB,KAAKwJ,EAAAvK,cAAcgB,gBACnB,KAAKuJ,EAAAvK,cAAciB,iBACjB,IAAIiW,EAAUnQ,EAAUjT,WAAaiT,EAAUjT,UAAUiB,QAAU,EACnE,GAAe,GAAXmiB,EAAc,CAChB,IAAIC,EAA0BpQ,EAAUjT,UAAW,GACnD,GACEqjB,EAASpmB,MAAQwZ,EAAA3Z,SAASI,SACNmmB,EAAU1V,aAAe8I,EAAAhJ,YAAYmB,OACzD,CACA,IAAI3R,EAAO+Z,EACT/D,EAAUhT,cACgBojB,EAAU1nB,OAEtC,GAAIsB,GAAQqZ,EAAa0C,QACvB3e,KAAKgc,MACHE,EAAAnC,eAAesN,wBACf2B,EAAS7kB,WAEN,CACL,IAAI8kB,EAAYhB,EAAeiB,mBAC3BD,EAAU7D,IAAIxiB,GAChB5C,KAAKgc,MACHE,EAAAnC,eAAeoP,kCACfH,EAAS7kB,QAGXlC,EAAUmnB,aAAexmB,EACzBqmB,EAAUllB,IAAInB,EAAMX,UAIxBjC,KAAKgc,MACHE,EAAAnC,eAAesP,wBACfL,EAAS7kB,YAIbnE,KAAKgc,MACHE,EAAAnC,eAAeuP,+BACf1Q,EAAUzU,MAAO,IAAK4kB,EAAQlO,SAAS,OAS7CmE,EAAA/c,UAAA8lB,mBAAR,SACEngB,EACAqgB,GAEA,IAAIhB,EAAarf,EAAYhH,KAAKmF,KAC9BwjB,EAAuB3hB,EAAYof,sBACnCwC,EAAkBxpB,KAAKkf,eAAehe,IAAIqoB,GAC1CE,EAAW7hB,EAAYhE,GAAGvB,EAAAqB,YAAYmkB,KACtC6B,GAAQ,EACZ,GAAIF,GACF,GACEA,EAAgB5mB,MAAQgc,EAAY+K,UAI/B,OAHJF,EACcD,EAAiBI,gBACjBJ,EAAiBK,iBAOhC,YAJA7pB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOolB,QAK5BC,EAAkB,IAAIM,EACpB9pB,KACAinB,EACAsC,EACAtB,GAEFyB,GAAQ,EAGV,IAAI1d,EAAapE,EAAYoE,WACzB0c,EAAiB7J,EAAelb,KAChCqI,IACF0c,EAAiB1oB,KAAKqmB,gBAAgBra,EACpC6S,EAAetM,SAInB,IAAIwX,GAAYN,EAAWpnB,EAAAyW,cAAgBzW,EAAA0W,eAAiBkO,EAG5D,GAAIrf,EAAYhE,GAAGvB,EAAAqB,YAAYgT,QAAS,CACtC,IAAIsT,EAAa/B,EAAezF,aAAengB,EAAAmW,iBAAmBuR,EAClE,GAAI/pB,KAAKkf,eAAekG,IAAI4E,GAK1B,YAJAhqB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAO6lB,GAI5B,IAAIC,EAAkB,IAAItB,EACxB3oB,KACA+pB,EACAC,EACApiB,EACA,KACA8gB,GAOF,GALIe,EACSD,EAAiBI,gBAAkBK,EAEnCT,EAAiBK,gBAAkBI,EAE5CP,EAAO,CACT,GAAIzB,EAAelc,SACjB,GAAIkc,EAAelc,QAAQqZ,IAAI6B,GAK7B,YAJAjnB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAO6lB,QAK5B/B,EAAelc,QAAU,IAAIgT,IAE/BkJ,EAAelc,QAAQhI,IAAIkjB,EAAYuC,QAEvCxX,OAAOiW,EAAelc,SAAWkc,EAAelc,QAAQqZ,IAAI6B,IAE9DjnB,KAAKkf,eAAenb,IAAIwlB,EAAsBC,GAC1CvB,EAAerkB,GAAGvB,EAAAqB,YAAY4jB,gBAChCkC,EAAgBzlB,IAAI1B,EAAAqB,YAAY4jB,mBAI7B,CACL,IAAI4C,EAAejC,EAAezF,aAAengB,EAAAoW,mBAAqBsR,EACtE,GAAI9B,EAAeM,iBACjB,GAAIN,EAAeM,gBAAgBnD,IAAI2E,GAKrC,YAJA/pB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOolB,QAK5BtB,EAAeM,gBAAkB,IAAIxJ,IAEvC,IAAIoL,EAAoB,IAAIxB,EAC1B3oB,KACA+pB,EACAG,EACAtiB,EACAqgB,EACAS,GAEEe,EACSD,EAAiBI,gBAAkBO,EAEnCX,EAAiBK,gBAAkBM,EAEhDlC,EAAeM,gBAAgBxkB,IAAIgmB,EAAUP,GAC7CxpB,KAAKkf,eAAenb,IAAIwlB,EAAsBC,GAC1CvB,EAAerkB,GAAGvB,EAAAqB,YAAY4jB,iBAChCkC,EAAgBzlB,IAAI1B,EAAAqB,YAAY4jB,eAChC6C,EAAkBpmB,IAAI1B,EAAAqB,YAAY4jB,kBAKhCtI,EAAA/c,UAAA2gB,eAAR,SACEhb,EACAmf,QAAA,IAAAA,MAAA,MAEA,IAAIvE,EAAe5a,EAAYof,sBAC/B,GAAIhnB,KAAKkf,eAAekG,IAAI5C,GAC1BxiB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,OAH5B,CAOA,IAAIyE,EAAarf,EAAYhH,KAAKmF,KAC9BqC,EAAU,IAAIgiB,EAAKpqB,KAAMinB,EAAYzE,EAAc5a,GAIvD,GAHAQ,EAAQ5E,OAASujB,EACjB/mB,KAAKkf,eAAenb,IAAIye,EAAcpa,GAElC2e,EAAW,CACb,GAAIA,EAAUhb,SACZ,GAAIgb,EAAUhb,QAAQqZ,IAAI6B,GAKxB,YAJAjnB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,QAK5BuE,EAAUhb,QAAU,IAAIgT,IAE1BgI,EAAUhb,QAAQhI,IAAIkjB,EAAY7e,GAC9B2e,EAAUnjB,GAAGvB,EAAAqB,YAAY4jB,gBAAkBlf,EAAQxE,GAAGvB,EAAAqB,YAAY6S,SACpEnO,EAAQrE,IAAI1B,EAAAqB,YAAY4jB,oBAErB,GAAIlf,EAAQxE,GAAGvB,EAAAqB,YAAY6S,QAAS,CACzC,GAAIvW,KAAKsf,iBAAiB8F,IAAI5C,GAK5B,YAJAxiB,KAAKgc,MACHE,EAAAnC,eAAewN,4DACf3f,EAAYhH,KAAKuD,MAAOqe,GAM5B,GAFAxiB,KAAKsf,iBAAiBvb,IAAIye,EAAcpa,GACxCpI,KAAKyiB,iBAAiB1W,QAAQhI,IAAIkjB,EAAY7e,GAC1CR,EAAYzD,MAAMiJ,OAAOoa,QAAS,CACpC,GAAIxnB,KAAKuf,mBAAmB6F,IAAI6B,GAAa,CAC3C,IAAIQ,EAA+BznB,KAAKuf,mBAAmBre,IAAI+lB,GAK/D,YAJAjnB,KAAKgc,MACHE,EAAAnC,eAAewN,4DACf3f,EAAYhH,KAAKuD,MAAOsjB,EAAerf,QAAQoa,cAInDpa,EAAQrE,IAAI1B,EAAAqB,YAAY4jB,eACxBtnB,KAAKuf,mBAAmBxb,IAAIkjB,GAC1B7e,QAAOA,EACPwD,WAAYhE,EAAYhH,QAM9B,IADA,IAAI6I,EAAS7B,EAAY6B,OAChBpJ,EAAI,EAAGsG,EAAI8C,EAAO7C,OAAQvG,EAAIsG,IAAKtG,EAC1CL,KAAKqqB,oBAAoB5gB,EAAOpJ,GAAI+H,GAGtCpI,KAAK4mB,YAAYxe,EAASR,KAGpBoX,EAAA/c,UAAAooB,oBAAR,SACEziB,EACA0iB,GAEA,IAAI1pB,EAAOgH,EAAYhH,KAAKmF,KACxByc,EAAe5a,EAAYof,sBAC/B,GAAIsD,EAAIve,SACN,GAAIue,EAAIve,QAAQqZ,IAAIxkB,GAKlB,YAJAZ,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,QAK5B8H,EAAIve,QAAU,IAAIgT,IAEpB,IAAIzd,EAAQ,IAAIipB,EAAUD,EAAKtqB,KAAMY,EAAM4hB,EAAc5a,GACzD0iB,EAAIve,QAAQhI,IAAInD,EAAMU,GAClBgpB,EAAI1mB,GAAGvB,EAAAqB,YAAY4jB,gBACrBhmB,EAAMyC,IAAI1B,EAAAqB,YAAY4jB,gBAIlBtI,EAAA/c,UAAA4gB,kBAAR,SACExW,EACA8V,GAEA,IAAIpW,EAAUM,EAAUN,QACxB,GAAIA,EACF,IAAK,IAAI1L,EAAI,EAAGsG,EAAIoF,EAAQnF,OAAQvG,EAAIsG,IAAKtG,EAC3CL,KAAKwqB,iBAAiBze,EAAQ1L,GAAIgM,EAAUgB,aAAc8U,QAG5DniB,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfhb,EAAUlI,QAKR6a,EAAA/c,UAAAoiB,yBAAR,SACE7B,EACApa,EACAqiB,GAGAzqB,KAAKsf,iBAAiBvb,IAAIye,EAAcpa,GAGxC,IAAIiF,EAAeod,EAAmBtmB,MAAMiJ,OAAOC,aAC/Cqd,EAASroB,EAAA6W,iBAAmB7L,EAC5BiV,EAAYtiB,KAAKkf,eAAehe,IAAIwpB,GACnCpI,IAAWA,EAAYtQ,OAAOhS,KAAKkf,eAAehe,IAAIwpB,EAASroB,EAAAsT,eAAiB,WACrF3D,OAAOsQ,EAAU1f,MAAQgc,EAAY+L,WACrC,IAAI1D,EAAawD,EAAmB1kB,KACxBuc,EAAWvW,QAAQhI,IAAIkjB,EAAY7e,GAG/C,IAAIgF,EAASqd,EAAmBtmB,MAAMiJ,OAClCA,EAAOqZ,UACLzmB,KAAKkf,eAAekG,IAAI6B,GAC1BjnB,KAAKgc,MACHE,EAAAnC,eAAewN,4DACfkD,EAAmBtmB,MAAO8iB,IAG5B7e,EAAQoa,aAAeyE,EACvBjnB,KAAKkf,eAAenb,IAAIkjB,EAAY7e,IAI7BgF,EAAOoa,SAChBxnB,KAAKuf,mBAAmBxb,IAAI0mB,EAAmB1kB,MAC7CqC,QAAOA,EACPwD,WAAY6e,KAKVzL,EAAA/c,UAAAuoB,iBAAR,SACE5T,EACAvJ,EACA8U,GAEA,IAQIyI,EACAC,EACA3G,EAVA1W,EAAeoJ,EAAOzS,MAAMiJ,OAAOC,aAAehL,EAAAsT,eAAiBiB,EAAOpJ,aAAazH,KAC3F,GAAI/F,KAAKsf,iBAAiB8F,IAAI5X,GAC5BxN,KAAKgc,MACHE,EAAAnC,eAAewN,4DACf3Q,EAAOpJ,aAAarJ,MAAOqJ,QAS/B,GAAoB,MAAhBH,EAAsB,CAIxB,GAHAud,EAAiBhU,EAAOzS,MAAMiJ,OAAOC,aAAehL,EAAAsT,eAAiBiB,EAAOhW,KAAKmF,KAG7E/F,KAAKkf,eAAekG,IAAIwF,GAM1B,YALA5qB,KAAKqkB,yBACH7W,EACSxN,KAAKkf,eAAehe,IAAI0pB,GACjChU,EAAOpJ,cAMX,GAAI2U,EAAciD,IAAI5X,GAKpB,YAJAxN,KAAKgc,MACHE,EAAAnC,eAAewN,4DACf3Q,EAAOpJ,aAAarJ,MAAOqJ,IAI/B0W,EAAe,IAAIzH,GACN2H,YAAa,EAC1BF,EAAa1W,aAAeod,EAC5B1G,EAAatN,OAASA,EACtBuL,EAAcpe,IAAIyJ,EAAc0W,OAG3B,CAKL,GAJA0G,EAAiBvd,EAAehL,EAAAsT,eAAiBiB,EAAOhW,KAAKmF,KAG7D8kB,EAAoB7qB,KAAKkf,eAAehe,IAAI0pB,GAO1C,YALA5qB,KAAKqkB,yBACH7W,EACAqd,EACAjU,EAAOpJ,cAOX,IADA,IAAIsd,EAAO,IAAIC,IACR7G,EAAe/B,EAAcjhB,IAAI0pB,IAAiB,CACvD,IAAI1G,EAAaE,WAaV,CAEL,GADAyG,EAAoB7qB,KAAKkf,eAAehe,IAAIgjB,EAAa1W,cAOvD,YALAxN,KAAKqkB,yBACH7W,EACAqd,EACAjU,EAAOpJ,cAIX,MArBA,GADAqd,EAAoB7qB,KAAKsf,iBAAiBpe,IAAIgjB,EAAa1W,cAOzD,YALAxN,KAAKqkB,yBACH7W,EACAqd,EACAjU,EAAOpJ,cAKX,GADAod,EAAiB1G,EAAa1W,aAC1Bsd,EAAK1F,IAAIlB,GAAe,MAC5B4G,EAAKE,IAAI9G,GAgBb,GAAI/B,EAAciD,IAAI5X,GAKpB,YAJAxN,KAAKgc,MACHE,EAAAnC,eAAewN,4DACf3Q,EAAOpJ,aAAarJ,MAAOqJ,IAI/B0W,EAAe,IAAIzH,GACN2H,YAAa,EAC1BF,EAAa1W,aAAeod,EAC5B1G,EAAatN,OAASA,EACtBuL,EAAcpe,IAAIyJ,EAAc0W,KAI5BlF,EAAA/c,UAAA6gB,mBAAR,SACElb,EACAmf,QAAA,IAAAA,MAAA,MAEA,IAAIvE,EAAe5a,EAAYof,sBAC/B,GAAIhnB,KAAKkf,eAAekG,IAAI5C,GAC1BxiB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,OAH5B,CAOA,IAAIyE,EAAarf,EAAYhH,KAAKmF,KAC9BiG,EAAapE,EAAYoE,WACzB/J,EAAY,IAAI0mB,EAClB3oB,KACAinB,EACAzE,EACA5a,EACA,KACAoE,EACIhM,KAAKqmB,gBAAgBra,EACnB6S,EAAevM,OACfuM,EAAetM,OACfsM,EAAexM,UAEjBwM,EAAelb,MAKrB,GAHA1B,EAAUuB,OAASujB,EACnB/mB,KAAKkf,eAAenb,IAAIye,EAAcvgB,GAElC8kB,EAAW,CACb,GAAIA,EAAUhb,SACZ,GAAIgb,EAAUhb,QAAQqZ,IAAI6B,GAKxB,YAJAjnB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,QAK5BuE,EAAUhb,QAAU,IAAIgT,IAE1BgI,EAAUhb,QAAQhI,IAAIkjB,EAAYhlB,GAC9B8kB,EAAUnjB,GAAGvB,EAAAqB,YAAY4jB,gBAAkBrlB,EAAU2B,GAAGvB,EAAAqB,YAAY6S,UACtEtU,EAAUuB,OAASujB,EACnB9kB,EAAU8B,IAAI1B,EAAAqB,YAAY4jB,qBAEvB,GAAIrlB,EAAU2B,GAAGvB,EAAAqB,YAAY6S,QAAS,CAC3C,GAAIvW,KAAKsf,iBAAiB8F,IAAI5C,GAK5B,YAJAxiB,KAAKgc,MACHE,EAAAnC,eAAewN,4DACf3f,EAAYhH,KAAKuD,MAAOqe,GAM5B,GAFAxiB,KAAKsf,iBAAiBvb,IAAIye,EAAcvgB,GACxCjC,KAAKyiB,iBAAiB1W,QAAQhI,IAAIkjB,EAAYhlB,GAC1C2F,EAAYzD,MAAMiJ,OAAOoa,QAAS,CACpC,GAAIxnB,KAAKuf,mBAAmB6F,IAAI6B,GAAa,CAC3C,IAAIQ,EAA+BznB,KAAKuf,mBAAmBre,IAAI+lB,GAK/D,YAJAjnB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOsjB,EAAerf,QAAQoa,cAInDvgB,EAAU8B,IAAI1B,EAAAqB,YAAY4jB,eAC1BtnB,KAAKuf,mBAAmBxb,IAAIkjB,GAC1B7e,QAASnG,EACT2J,WAAYhE,EAAYhH,QAK9BZ,KAAK4mB,YAAY3kB,EAAW2F,KAGtBoX,EAAA/c,UAAA8gB,kBAAR,SACE1W,EACA8V,EACAD,GAEA,IAAI7T,EAAehC,EAAUgC,aAC7B,GAAIA,EACF,IAAK,IAAIhO,EAAI,EAAGsG,EAAI0H,EAAazH,OAAQvG,EAAIsG,IAAKtG,EAChDL,KAAKirB,iBACH5c,EAAahO,GACbgM,EAAUgB,aACV8U,EAAeD,QAGd,GAAI7V,EAAUiC,cAAe,CAClC,IAAI2Y,EAAa5a,EAAUiC,cAAcvI,KACrCyc,EACFnW,EAAUlI,MAAMiJ,OAAOC,aACvBhL,EAAAsT,eACAsR,EAEF,GAAIjnB,KAAKkf,eAAekG,IAAI5C,GAM1B,YALAxiB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACflZ,EAAUiC,cAAcnK,MACxBqe,GAMJ,IAAIF,EAAYtiB,KAAKkf,eAAehe,IAAImL,EAAUgB,cAClD,GAAIiV,EAEF,YADAtiB,KAAKkf,eAAenb,IAAIye,EAAcF,GAKxC,IAAIc,EAAe,IAAI5G,EACvB4G,EAAaE,UAAYd,EACzB,IAAIhV,EAAenL,EAAA6W,iBAAmB7M,EAAUgB,aAChD+V,EAAa5V,aAAeA,EAC5B4V,EAAaI,gBAAkBhW,EAAenL,EAAAsT,eAAiB,QAC/DyN,EAAaxb,YAAc,KAC3Bsa,EAAc3G,KAAK6H,KAIfpE,EAAA/c,UAAAgpB,iBAAR,SACErjB,EACAyF,EACA+Y,EACAlE,GAEA,IAAIoB,EAAY1b,EAAYof,sBAC5B,GAAIhnB,KAAKkf,eAAekG,IAAI9B,GAC1BtjB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOmf,OAH5B,CAQA,IAGIlb,EAHAoF,EAAeH,EAAehL,EAAAsT,eAAiB/N,EAAY4F,aAAazH,KAI5E,GAAIqC,EAAUpI,KAAKsf,iBAAiBpe,IAAIsM,GACtCxN,KAAKkf,eAAenb,IAAIuf,EAAWlb,OADrC,CAMA,IAAM8iB,EAAY7oB,EAAAsT,eAAiB,QAC/ByN,EAAe,IAAI5G,EACvB4G,EAAaE,UAAYA,EACrBjW,EAAaqL,SAASwS,IACxB9H,EAAa5V,aAAeA,EAC5B4V,EAAaI,gBACXnW,EAAawI,UAAU,EAAGxI,EAAazG,OAASskB,EAAUtkB,OAAS,GACnEgB,EAAY4F,aAAazH,OAG3Bqd,EAAa5V,aAAeA,EAC5B4V,EAAaI,gBACXnW,EACA6d,EACA7oB,EAAAsT,eACA/N,EAAY4F,aAAazH,MAG7Bqd,EAAaxb,YAAcA,EAC3Bsa,EAAc3G,KAAK6H,MAGbpE,EAAA/c,UAAA+gB,oBAAR,SAA4Bpb,EAAmCmf,QAAA,IAAAA,MAAA,MAC7D,IAAIvE,EAAe5a,EAAYof,sBAC/B,GAAIhnB,KAAKkf,eAAekG,IAAI5C,GAC1BxiB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,OAH5B,CAQA,IAAIxW,EAAapE,EAAYoE,WACzBib,EAAarf,EAAYhH,KAAKmF,KAC9B9D,EAAY,IAAIkpB,EAClBnrB,KACAinB,EACAzE,EACA5a,EACAoE,EACIhM,KAAKqmB,gBAAgBra,EAAY6S,EAAevM,QAChDuM,EAAelb,MAKrB,GAHA1B,EAAUuB,OAASujB,EACnB/mB,KAAKkf,eAAenb,IAAIye,EAAcvgB,GAElC8kB,EAAW,CACb,GAAIA,EAAUhb,SACZ,GAAIgb,EAAUhb,QAAQqZ,IAAInjB,EAAUugB,cAKlC,YAJAxiB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,QAK5BuE,EAAUhb,QAAU,IAAIgT,IAE1BgI,EAAUhb,QAAQhI,IAAI9B,EAAUugB,aAAcvgB,GAC1C8kB,EAAUnjB,GAAGvB,EAAAqB,YAAY4jB,gBAAkBrlB,EAAU2B,GAAGvB,EAAAqB,YAAY6S,SACtEtU,EAAU8B,IAAI1B,EAAAqB,YAAY4jB,oBAEvB,GAAIrlB,EAAU2B,GAAGvB,EAAAqB,YAAY6S,QAAS,CAC3C,GAAIvW,KAAKsf,iBAAiB8F,IAAI5C,GAK5B,YAJAxiB,KAAKgc,MACHE,EAAAnC,eAAewN,4DACf3f,EAAYhH,KAAKuD,MAAOqe,GAM5B,GAFAxiB,KAAKsf,iBAAiBvb,IAAIye,EAAcvgB,GACxCjC,KAAKyiB,iBAAiB1W,QAAQhI,IAAIkjB,EAAYhlB,GAC1C2F,EAAYzD,MAAMiJ,OAAOoa,QAAS,CACpC,GAAIxnB,KAAKuf,mBAAmB6F,IAAI6B,GAAa,CAC3C,IAAIQ,EAA+BznB,KAAKuf,mBAAmBre,IAAI+lB,GAK/D,YAJAjnB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOsjB,EAAerf,QAAQoa,cAInDvgB,EAAU8B,IAAI1B,EAAAqB,YAAY4jB,eAC1BtnB,KAAKuf,mBAAmBxb,IAAIkjB,GAC1B7e,QAASnG,EACT2J,WAAYhE,EAAYhH,QAM9B,IADA,IAAI8mB,EAAqB9f,EAAYmE,QAC5B1L,EAAI,EAAGsG,EAAI+gB,EAAmB9gB,OAAQvG,EAAIsG,IAAKtG,EAAG,CACzD,IAAIsnB,EAAoBD,EAAmBrnB,GAC3C,OAAQsnB,EAAkB/kB,MAExB,KAAKwZ,EAAA3Z,SAAS8U,iBACZvX,KAAK4nB,gBAAkCD,EAAmB1lB,GAC1D,MAEF,KAAKma,EAAA3Z,SAASuS,kBACR2S,EAAkB7jB,MAAMzB,EAAAqB,YAAYmkB,IAAMxlB,EAAAqB,YAAYokB,KACxD9nB,KAAK+nB,mBAAsCJ,EAAmB1lB,GAE9DjC,KAAKgoB,iBAAoCL,EAAmB1lB,GAE9D,MAEF,QACE,MAAM,IAAIkjB,MAAM,8BAKtBnlB,KAAK4mB,YAAY3kB,EAAW2F,KAGtBoX,EAAA/c,UAAAghB,oBAAR,SACErb,EACAwa,EACAC,EACA+I,QAAA,IAAAA,MAAA,MAEA,IAAI5I,EAAe5a,EAAYof,sBAC3BC,EAAarf,EAAYhH,KAAKmF,KAC9BghB,EAAY/mB,KAAKkf,eAAehe,IAAIshB,GAQxC,GAPKuE,KACHA,EAAY,IAAIsE,EAAUrrB,KAAMinB,EAAYzE,EAAc5a,IAChDpE,OAAS4nB,EACnBprB,KAAKkf,eAAenb,IAAIye,EAAcuE,GACtC/mB,KAAK4mB,YAAYG,EAAWnf,IAG1BwjB,EAAiB,CACnB,GAAIA,EAAgBrf,SAClB,GAAIqf,EAAgBrf,QAAQqZ,IAAI6B,GAK9B,YAJAjnB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,QAK5B4I,EAAgBrf,QAAU,IAAIgT,IAEhCqM,EAAgBrf,QAAQhI,IAAIkjB,EAAYF,GACpCqE,EAAgBxnB,GAAGvB,EAAAqB,YAAY4jB,gBAAkBP,EAAUnjB,GAAGvB,EAAAqB,YAAY6S,SAC5EwQ,EAAUhjB,IAAI1B,EAAAqB,YAAY4jB,oBAEvB,GAAIP,EAAUnjB,GAAGvB,EAAAqB,YAAY6S,QAAS,CAC3C,IAAIkR,EAAiBznB,KAAKsf,iBAAiBpe,IAAIshB,GAa/C,GAZIiF,GACGA,EAAe7jB,GAAGvB,EAAAqB,YAAY6S,SACjCvW,KAAKgc,MACHE,EAAAnC,eAAeuR,kFACf1jB,EAAYhH,KAAKuD,MAAO4iB,EAAUvE,cAGtCuE,EAAYU,GAEZznB,KAAKsf,iBAAiBvb,IAAIye,EAAcuE,GAE1C/mB,KAAKyiB,iBAAiB1W,QAAQhI,IAAIkjB,EAAYF,GAC1Cnf,EAAYzD,MAAMiJ,OAAOoa,QAAS,CACpC,GAAIxnB,KAAKuf,mBAAmB6F,IAAI6B,GAAa,CAC3C,IAAIsE,EAA+BvrB,KAAKuf,mBAAmBre,IAAI+lB,GAC/D,GAAIsE,EAAenjB,UAAY2e,EAK7B,YAJA/mB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOonB,EAAenjB,QAAQoa,mBAKnDxiB,KAAKuf,mBAAmBxb,IAAIkjB,GAC1B7e,QAAS2e,EACTnb,WAAYhE,EAAYhH,OAG5BmmB,EAAUhjB,IAAI1B,EAAAqB,YAAY4jB,gBAK9B,IADA,IAAIvb,EAAUnE,EAAYmE,QACjB1L,EAAI,EAAGsG,EAAIoF,EAAQnF,OAAQvG,EAAIsG,IAAKtG,EAC3C,OAAQ0L,EAAQ1L,GAAGuC,MACjB,KAAKwZ,EAAA3Z,SAASgU,iBACZzW,KAAK2iB,gBAAkC5W,EAAQ1L,GAAI+hB,EAAeC,EAAkB0E,GACpF,MAEF,KAAK3K,EAAA3Z,SAASyU,gBACZlX,KAAK4iB,eAAgC7W,EAAQ1L,GAAI0mB,GACjD,MAEF,KAAK3K,EAAA3Z,SAASsS,oBACZ/U,KAAK8iB,mBAAwC/W,EAAQ1L,GAAI0mB,GACzD,MAEF,KAAK3K,EAAA3Z,SAASoV,qBACZ7X,KAAKgjB,oBAA0CjX,EAAQ1L,GAAI0mB,GAC3D,MAEF,KAAK3K,EAAA3Z,SAAS6T,qBACZtW,KAAKijB,oBAA0ClX,EAAQ1L,GAAI+hB,EAAeC,EAAkB0E,GAC5F,MAEF,KAAK3K,EAAA3Z,SAAS0V,gBAGZnY,KAAKgc,MACHE,EAAAnC,eAAesN,wBACftb,EAAQ1L,GAAG8D,OAEb,MAEF,KAAKiY,EAAA3Z,SAAS4T,SACZrW,KAAKmjB,oBAAuCpX,EAAQ1L,GAAI0mB,GACxD,MAEF,QACE,MAAM,IAAI5B,MAAM,+BAMhBnG,EAAA/c,UAAAihB,oBAAR,SAA4Btb,EAA8Bmf,QAAA,IAAAA,MAAA,MAGxD,IAAInmB,EAAOgH,EAAYhH,KAAKmF,KAC5B,GAAI/F,KAAKof,YAAYgG,IAAIxkB,IAASZ,KAAKqf,YAAY+F,IAAIxkB,GACrDZ,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOvD,OAH5B,CAOA,IAAI6P,EAAQ,IAAIiM,EAChBjM,EAAM5E,eAAiBjE,EAAYiE,eACnC4E,EAAMrM,KAAOwD,EAAYxD,KAEzBpE,KAAKqf,YAAYtb,IAAInD,EAAM6P,KAGrBuO,EAAA/c,UAAAkhB,oBAAR,SAA4B9W,EAA8B0a,QAAA,IAAAA,MAAA,MAExD,IADA,IAAI1Y,EAAehC,EAAUgC,aACpBhO,EAAI,EAAGsG,EAAI0H,EAAazH,OAAQvG,EAAIsG,IAAKtG,EAAG,CACnD,IAAIuH,EAAcyG,EAAahO,GAC3B2L,EAAapE,EAAYoE,WACzBwW,EAAe5a,EAAYof,sBAC/B,GAAIhnB,KAAKkf,eAAekG,IAAI5C,GAC1BxiB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,OAH5B,CAOA,IAAIyE,EAAarf,EAAYhH,KAAKmF,KAC9BylB,EAAS,IAAIxF,EACfhmB,KACAinB,EACAzE,EACArG,EAAAuE,KAAKc,KACL5Z,EACAoE,EACIhM,KAAKqmB,gBAAgBra,EACnB6S,EAAevM,OACfuM,EAAetM,OACfsM,EAAexM,UAEjBwM,EAAelb,MAYrB,GAVA6nB,EAAOhoB,OAASujB,EAChB/mB,KAAKkf,eAAenb,IAAIye,EAAcgJ,GAElCA,EAAO1E,aAAajI,EAAetM,UAAYiZ,EAAO5nB,GAAGvB,EAAAqB,YAAY+nB,QACvEzrB,KAAKgc,MACHE,EAAAnC,eAAe2M,8BACf1U,OAAOoK,EAAAzD,cAAcyD,EAAAvK,cAAcU,OAAQvG,IAAa7H,MAAO,UAI/D4iB,EAAW,CACb,GAAIA,EAAUhb,SACZ,GAAIgb,EAAUhb,QAAQqZ,IAAI6B,GAAa,CACrCjnB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,GAE1B,eAGFuE,EAAUhb,QAAU,IAAIgT,IAE1BgI,EAAUhb,QAAQhI,IAAIkjB,EAAYuE,GAC9BzE,EAAUnjB,GAAGvB,EAAAqB,YAAY4jB,gBAAkBkE,EAAO5nB,GAAGvB,EAAAqB,YAAY6S,SACnEiV,EAAOznB,IAAI1B,EAAAqB,YAAY4jB,oBAEpB,GAAIkE,EAAO5nB,GAAGvB,EAAAqB,YAAY6S,UAC3BvW,KAAKsf,iBAAiB8F,IAAI5C,GAC5BxiB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOqe,GAG1BxiB,KAAKsf,iBAAiBvb,IAAIye,EAAcgJ,GAE1CxrB,KAAKyiB,iBAAiB1W,QAAQhI,IAAIkjB,EAAYuE,GAC1C5jB,EAAYzD,MAAMiJ,OAAOoa,SAAS,CACpC,GAAIxnB,KAAKuf,mBAAmB6F,IAAI6B,GAAa,CAC3C,IAAIQ,EAA+BznB,KAAKuf,mBAAmBre,IAAI+lB,GAC/DjnB,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOsjB,EAAerf,QAAQoa,cAEjD,SAEFgJ,EAAOznB,IAAI1B,EAAAqB,YAAY4jB,eACvBtnB,KAAKuf,mBAAmBxb,IAAIkjB,GAC1B7e,QAASojB,EACT5f,WAAYhE,EAAYhH,OAI9BZ,KAAK4mB,YAAY4E,EAAQ5jB,MAG/BoX,EA9qDA,CAA6B9C,EAAAP,mBA2uD7B,SAAA6K,EAAoC5jB,GAClC,OAAQA,GACN,KAAKwZ,EAAAvK,cAAcS,OAAQ,OAAOuM,EAAevM,OACjD,KAAK8J,EAAAvK,cAAcW,SACnB,KAAK4J,EAAAvK,cAAce,gBAAiB,OAAOiM,EAAejM,gBAC1D,KAAKwJ,EAAAvK,cAAcgB,gBAAiB,OAAOgM,EAAehM,gBAC1D,KAAKuJ,EAAAvK,cAAciB,iBAAkB,OAAO+L,EAAe/L,iBAC3D,KAAKsJ,EAAAvK,cAAca,UAAW,OAAOmM,EAAenM,UACpD,KAAK0J,EAAAvK,cAAcY,OAAQ,OAAOoM,EAAepM,OACjD,KAAK2J,EAAAvK,cAAcU,OAAQ,OAAOsM,EAAetM,OACjD,KAAK6J,EAAAvK,cAAcQ,SAAU,OAAOwM,EAAexM,SACnD,KAAK+J,EAAAvK,cAAcM,QAAS,OAAO0M,EAAe1M,QAClD,QAAS,OAAO0M,EAAelb,MAvvDtBjE,EAAAsf,UAirDb,SAAYJ,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,0BAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,wBAEAA,IAAA,0BAEAA,IAAA,0BAhCF,CAAYA,EAAAlf,EAAAkf,cAAAlf,EAAAkf,iBAmCZ,SAAYC,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,uCAEAA,IAAA,0BAEAA,IAAA,oBAEAA,IAAA,oBAEAA,IAAA,yBAEAA,IAAA,uBApBF,CAAYA,EAAAnf,EAAAmf,iBAAAnf,EAAAmf,oBAuBZnf,EAAA8mB,sBAiBA,IAAAkF,EAAA,WAoBE,SAAAA,EAAsBC,EAAkB1E,EAAoBzE,GAT5DxiB,KAAAyD,MAAqBpB,EAAAqB,YAAYC,KAEjC3D,KAAA0oB,eAAiC7J,EAAelb,KAEhD3D,KAAA+L,QAAsC,KAEtC/L,KAAAwD,OAAyB,KAIvBxD,KAAK2rB,QAAUA,EACf3rB,KAAKinB,WAAaA,EAClBjnB,KAAK4rB,cAAgBpJ,EA4BzB,OAzBSkJ,EAAAG,aAAP,SAAoBC,WAClB,IAAIA,EAAK,OAAOA,EAChB,IAAIC,EAAU,OACd,IAAc,IAAAC,EAAArI,EAAAmI,GAAGG,EAAAD,EAAAnI,QAAAoI,EAAAnI,KAAAmI,EAAAD,EAAAnI,OAAC,CAAd,IAAIqI,EAAED,EAAA3qB,MACRyqB,GAAiB,KAANG,EAAY,IAAMA,oGAE/B,OAAOH,GAGThrB,OAAAC,eAAI0qB,EAAAzpB,UAAA,oBAAJ,WACE,OAAOypB,EAAQG,aAAa7rB,KAAK4rB,oBAGnC,SAAiBpJ,GACfxiB,KAAK4rB,cAAgBpJ,mCAIvBkJ,EAAAzpB,UAAA2B,GAAA,SAAGC,GAA2B,OAAQ7D,KAAKyD,MAAQI,IAASA,GAE5D6nB,EAAAzpB,UAAA6B,MAAA,SAAML,GAA4B,OAA+B,IAAvBzD,KAAKyD,MAAQA,IAEvDioB,EAAAzpB,UAAA8B,IAAA,SAAIF,GAA2B7D,KAAKyD,OAASI,GAE7C6nB,EAAAzpB,UAAA6kB,aAAA,SAAajjB,GAA8B,OAAQ7D,KAAK0oB,eAAiB7kB,IAASA,GACpF6nB,EAnDA,GAAsBhsB,EAAAgsB,UAsDtB,IAAAnJ,EAAA,SAAAnR,GAQE,SAAAmR,EACEoJ,EACAve,GAFF,IAAAkE,EAIEF,EAAA5Q,KAAAR,KAAM2rB,EAASve,EAAOC,aAAchL,EAAA6W,iBAAmB9L,EAAOC,eAAarN,YAV7EsR,EAAA1O,KAAOgc,EAAY+L,UAWjBrZ,EAAKvF,QAAU,IAAIgT,MAEvB,OAf+B1N,EAAAkR,EAAAnR,GAe/BmR,EAfA,CAA+BmJ,GAAlBhsB,EAAA6iB,YAkBb,IAAA8I,EAAA,SAAAja,GASE,SAAAia,EACEM,EACA1E,EACAzE,EACA5a,GAJF,IAAA0J,EAMEF,EAAA5Q,KAAAR,KAAM2rB,EAAS1E,EAAYzE,IAAaxiB,YAZ1CsR,EAAA1O,KAAOgc,EAAYuN,UAajB7a,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,QAE7B,OAnB+B4N,EAAAga,EAAAja,GAmB/Bia,EAnBA,CAA+BK,GAAlBhsB,EAAA2rB,YAsBb,IAAAjB,EAAA,SAAAhZ,GAQE,SAAAgZ,EACEuB,EACA1E,EACAzE,EACA5a,GAJF,IAAA0J,EAMEF,EAAA5Q,KAAAR,KAAM2rB,EAAS1E,EAAYzE,IAAaxiB,YAZ1CsR,EAAA1O,KAAOgc,EAAYwN,KAajB9a,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,QAE7B,OAlB0B4N,EAAA+Y,EAAAhZ,GAkB1BgZ,EAlBA,CAA0BsB,GAAbhsB,EAAA0qB,OAqBb,IAAAG,EAAA,SAAAnZ,GASE,SAAAmZ,EACED,EACAqB,EACA1E,EACAzE,EACA5a,GALF,IAAA0J,EAOEF,EAAA5Q,KAAAR,KAAM2rB,EAAS1E,EAAYzE,IAAaxiB,YAd1CsR,EAAA1O,KAAOgc,EAAYyN,UAKnB/a,EAAAgb,cAAqB,EAUnBhb,EAAK9N,OAAS8mB,EACdhZ,EAAK1J,YAAcA,IAEvB,OApB+ByJ,EAAAkZ,EAAAnZ,GAoB/BmZ,EApBA,CAA+BmB,GAAlBhsB,EAAA6qB,YAsBb,SAAkBgC,GAChBA,IAAA,eACAA,IAAA,qBACAA,IAAA,iBAHF,CAAkB7sB,EAAA6sB,oBAAA7sB,EAAA6sB,uBAMlB,IAAAC,EAAA,SAAApb,GAeE,SAAAob,EACEb,EACA1E,EACAzE,EACApe,EACAwD,GALF,IAAA0J,EAOEF,EAAA5Q,KAAAR,KAAM2rB,EAAS1E,EAAYzE,IAAaxiB,YAb1CsR,EAAAmb,kBAAiB,EAcfnb,EAAKlN,KAAOA,EACZkN,EAAK1J,YAAcA,IAgBvB,OAxCyCyJ,EAAAmb,EAAApb,GA2BvCob,EAAAvqB,UAAAgkB,yBAAA,SAAyB3kB,GAIvB,OAHAtB,KAAKysB,kBAAiB,EACtBzsB,KAAK0sB,qBAAuBprB,EAC5BtB,KAAK+D,IAAI1B,EAAAqB,YAAY+nB,MAAQppB,EAAAqB,YAAYipB,SAClC3sB,MAGTwsB,EAAAvqB,UAAAkkB,uBAAA,SAAuB7kB,GAIrB,OAHAtB,KAAKysB,kBAAiB,EACtBzsB,KAAK4sB,mBAAqBtrB,EAC1BtB,KAAK+D,IAAI1B,EAAAqB,YAAY+nB,MAAQppB,EAAAqB,YAAYipB,SAClC3sB,MAEXwsB,EAxCA,CAAyCd,GAA5BhsB,EAAA8sB,sBA2Cb,IAAAxG,EAAA,SAAA5U,GAIE,SAAA4U,EACE2F,EACA1E,EACAzE,EACApe,EACAwD,EACA8gB,GANF,IAAApX,EAQEF,EAAA5Q,KAAAR,KAAM2rB,EAAS1E,EAAYzE,EAAcpe,EAAMwD,IAAY5H,YAV7DsR,EAAA1O,KAAOgc,EAAYtM,OAWjBhB,EAAK7N,MAAQmE,EAAcA,EAAYnE,MAAQpB,EAAAqB,YAAYC,KAC3D2N,EAAKoX,eAAiBA,EACtBpX,EAAKlN,KAAOA,IAEhB,OAjB4BiN,EAAA2U,EAAA5U,GAiB5B4U,EAjBA,CAA4BwG,GAAf9sB,EAAAsmB,SAoBb,IAAA6G,EAAA,WAiBA,OALE,SAAYjsB,EAAcwD,EAAYU,QAAA,IAAAA,MAAA,MACpC9E,KAAKY,KAAOA,EACZZ,KAAKoE,KAAOA,EACZpE,KAAK8E,YAAcA,GAfvB,GAAapF,EAAAmtB,YAoBb,IAAAC,EAAA,SAAA1b,GASE,SAAA0b,EACEnB,EACA1E,EACA8F,EACA3oB,EACAwD,QAAA,IAAAA,MAAA,MALF,IAAA0J,EAOEF,EAAA5Q,KAAAR,KAAM2rB,EAAS1E,EAAYA,EAAY7iB,EAAMwD,IAAY5H,YAd3DsR,EAAA1O,KAAOgc,EAAYoO,MAKnB1b,EAAA2b,aAA8B,KAU5B3b,EAAKyb,MAAQA,IAEjB,OAnB2B1b,EAAAyb,EAAA1b,GAmB3B0b,EAnBA,CAA2BN,GAAd9sB,EAAAotB,QAsBb,IAAAnE,EAAA,SAAAvX,GAgBE,SAAAuX,EACEgD,EACA1E,EACAzE,EACA5a,EACAqgB,EACAS,QADA,IAAAT,MAAA,WACA,IAAAS,MAAiC7J,EAAelb,MANlD,IAAA2N,EAQEF,EAAA5Q,KAAAR,KAAM2rB,EAAS1E,EAAYzE,IAAaxiB,YAtB1CsR,EAAA1O,KAAOgc,EAAY6G,mBAOnBnU,EAAA4b,UAAkC,IAAInO,IAEtCzN,EAAA6b,mBAAoC,KAEpC7b,EAAA8X,aAA6BnN,EAAa0C,QAYxCrN,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,MACzB6N,EAAK2W,eAAiBA,EACtB3W,EAAKoX,eAAiBA,IAI1B,OAhCuCrX,EAAAsX,EAAAvX,GA+BrCuX,EAAA1mB,UAAA4Y,SAAA,WAAqB,OAAO7a,KAAKinB,YACnC0B,EAhCA,CAAuC+C,GAA1BhsB,EAAAipB,oBAmCb,IAAAyE,EAAA,SAAAhc,GAoCE,SAAAgc,EACEnrB,EACAugB,EACArT,EACA3L,EACA6pB,gBADA,IAAA7pB,MAAA,WACA,IAAA6pB,MAAA,MALF,IAAA/b,EAOEF,EAAA5Q,KAAAR,KAAMiC,EAAU0pB,QAAS1pB,EAAUglB,WAAYzE,IAAaxiB,KAO5D,GAhDFsR,EAAA1O,KAAOgc,EAAY7K,SAOnBzC,EAAAgc,aAAkC,IAAIvO,IAEtCzN,EAAAic,iBAEAjc,EAAAkc,oBAEAlc,EAAAmc,aAA8B,KAM9Bnc,EAAAoc,kBAEApc,EAAAqc,IAAmB,EAEnBrc,EAAAsc,oBAA2B,EAE3Btc,EAAAuc,WAA8B,KAE9Bvc,EAAAwc,WAA0B,KAElBxc,EAAAyc,YAAmB,EACnBzc,EAAA0c,WAA2B,KACnC1c,EAAA2c,aAAoB,EAkFZ3c,EAAA4c,SAA2B,KAC3B5c,EAAA6c,SAA2B,KAC3B7c,EAAA8c,SAA2B,KAC3B9c,EAAA+c,SAA2B,KA1EjC/c,EAAKrP,UAAYA,EACjBqP,EAAKnC,UAAYA,EACjBmC,EAAK9N,OAASA,EACd8N,EAAK7N,MAAQxB,EAAUwB,MACvB6N,EAAKoX,eAAiBzmB,EAAUymB,eAChCpX,EAAK+b,wBAA0BA,GACzBprB,EAAU2B,GAAGvB,EAAAqB,YAAYkiB,SAAW,CACxC,IAAI0I,EAAa,EACjB,GAAI9qB,GAAUA,EAAOZ,MAAQgc,EAAYjL,MAAO,CAC9C3B,OAAOV,EAAK1N,GAAGvB,EAAAqB,YAAY6qB,WAC3B,IAAIC,EAAQ,IAAI1B,EACd7qB,EAAU0pB,QACV,OACA2C,IACAtc,OAAO7C,EAAUsf,WAEnBnd,EAAKgc,aAAavpB,IAAI,OAAQyqB,GAC9Bld,EAAKic,cAAciB,EAAMzB,OAASyB,EAClC,IAAIE,EAAiClrB,EAAQ6pB,wBAC7C,GAAIqB,EAAwB,CACrBpd,EAAK+b,0BAAyB/b,EAAK+b,wBAA0B,IAAItO,SACtE,IAA2C,IAAA4P,EAAAhL,EAAA+K,GAAsBE,EAAAD,EAAA9K,QAAA+K,EAAA9K,KAAA8K,EAAAD,EAAA9K,OAAE,CAA1D,IAAAgL,EAAA7K,EAAA4K,EAAAttB,MAAA,GAACwtB,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GAClBvd,EAAK+b,wBAAwBjI,IAAI0J,IACpCxd,EAAK+b,wBAAwBtpB,IAAI+qB,EAAeC,4GAKtD/c,QAAQV,EAAK1N,GAAGvB,EAAAqB,YAAY6qB,WAG9B,IADA,IAAIS,EAAiB7f,EAAU6f,eACtB3uB,EAAI,EAAGsG,EAAIqoB,EAAepoB,OAAQvG,EAAIsG,IAAKtG,EAAG,CACrD,IAAI4uB,EAAgBD,EAAe3uB,GAC/B6uB,EAAgB/f,EAAUggB,iBAAiB9uB,GAC3CmuB,EAAQ,IAAI1B,EACd7qB,EAAU0pB,QACVuD,EACAZ,IACAW,GAGF3d,EAAKgc,aAAavpB,IAAImrB,EAAeV,GACrCld,EAAKic,cAAciB,EAAMzB,OAASyB,UAGtCld,EAAK8d,KAAOC,EAAK1tB,OAAO2P,KAkL5B,OA3Q8BD,EAAA+b,EAAAhc,GA6F5Bgc,EAAAnrB,UAAAqtB,SAAA,SAASlrB,EAAYxD,EAA4BgH,QAA5B,IAAAhH,MAAA,WAA4B,IAAAgH,MAAA,MAE/C,IAAI0mB,EAAatuB,KAAKmP,UAAU6f,eAAepoB,OAAS5G,KAAKwtB,iBAAiB5mB,OAC1E5G,KAAK4D,GAAGvB,EAAAqB,YAAY6qB,aAAaD,EACrC,IAAIE,EAAQ,IAAI1B,EACd9sB,KAAKiC,UAAU0pB,QACf/qB,GAEI,OAAS0tB,EAAWzT,SAAS,IACjCyT,EACAlqB,EACAwD,GAEF,GAAIhH,EAAM,CACR,GAAIZ,KAAKstB,aAAalI,IAAIxkB,GAAO,MAAM,IAAIukB,MAAM,wBACjDnlB,KAAKstB,aAAavpB,IAAInD,EAAM4tB,GAI9B,OAFAxuB,KAAKutB,cAAciB,EAAMzB,OAASyB,EAClCxuB,KAAKwtB,iBAAiBjS,KAAKnX,GACpBoqB,GASTpB,EAAAnrB,UAAAstB,aAAA,SAAanrB,EAAYorB,GACvB,IAAIC,EAoBAjB,EAnBJ,YAFuB,IAAAgB,OAAA,GAEfprB,EAAKsrB,gBACX,KAAKrT,EAAAsT,WAAWC,IACdH,EAAQzvB,KAAKkuB,SACb,MAEF,KAAK7R,EAAAsT,WAAWE,IACdJ,EAAQzvB,KAAKmuB,SACb,MAEF,KAAK9R,EAAAsT,WAAWG,IACdL,EAAQzvB,KAAKouB,SACb,MAEF,KAAK/R,EAAAsT,WAAWI,IACdN,EAAQzvB,KAAKquB,SACb,MAEF,QAAS,MAAM,IAAIlJ,MAAM,0BAa3B,OAVIsK,GAASA,EAAM7oB,SACjB4nB,EAAQiB,EAAMO,OACR5rB,KAAOA,EACboqB,EAAM/qB,MAAQpB,EAAAqB,YAAYC,MAE1B6qB,EAAQxuB,KAAKsvB,SAASlrB,GAEpBA,EAAKR,GAAG,KACV5D,KAAKovB,KAAKa,gBAAgBzB,EAAMzB,MAAOyC,GAElChB,GAITpB,EAAAnrB,UAAAiuB,cAAA,SAAc1B,GACZ,IAAIA,EAAM5qB,GAAGvB,EAAAqB,YAAYipB,SAAzB,CAEA,IAAI8C,EAEJ,OAHAzd,OAAOwc,EAAMzB,OAAS,GAEtB/a,OAAqB,MAAdwc,EAAMpqB,MACEoqB,EAAMpqB,KAAMsrB,gBACzB,KAAKrT,EAAAsT,WAAWC,IACdH,EAAQzvB,KAAKkuB,WAAaluB,KAAKkuB,aAC/B,MAEF,KAAK7R,EAAAsT,WAAWE,IACdJ,EAAQzvB,KAAKmuB,WAAanuB,KAAKmuB,aAC/B,MAEF,KAAK9R,EAAAsT,WAAWG,IACdL,EAAQzvB,KAAKouB,WAAapuB,KAAKouB,aAC/B,MAEF,KAAK/R,EAAAsT,WAAWI,IACdN,EAAQzvB,KAAKquB,WAAaruB,KAAKquB,aAC/B,MAEF,QAAS,MAAM,IAAIlJ,MAAM,0BAE3BnT,OAAOwc,EAAMzB,OAAS,GACtB0C,EAAMlU,KAAKiT,KAIbpB,EAAAnrB,UAAAkuB,oBAAA,SAAoB/rB,EAAYorB,GAC9B,IAAIC,EAoBAjB,EAnBJ,OAAQpqB,EAAKsrB,gBACX,KAAKrT,EAAAsT,WAAWC,IACdH,EAAQzvB,KAAKkuB,WAAaluB,KAAKkuB,aAC/B,MAEF,KAAK7R,EAAAsT,WAAWE,IACdJ,EAAQzvB,KAAKmuB,WAAanuB,KAAKmuB,aAC/B,MAEF,KAAK9R,EAAAsT,WAAWG,IACdL,EAAQzvB,KAAKouB,WAAapuB,KAAKouB,aAC/B,MAEF,KAAK/R,EAAAsT,WAAWI,IACdN,EAAQzvB,KAAKquB,WAAaruB,KAAKquB,aAC/B,MAEF,QAAS,MAAM,IAAIlJ,MAAM,0BAa3B,OAVIsK,EAAM7oB,QACR4nB,EAAQiB,EAAMA,EAAM7oB,OAAS,IACvBxC,KAAOA,GAEboqB,EAAQxuB,KAAKsvB,SAASlrB,GACtBqrB,EAAMlU,KAAKiT,IAETpqB,EAAKR,GAAG,KACV5D,KAAKovB,KAAKa,gBAAgBzB,EAAMzB,MAAOyC,GAElChB,GAITpB,EAAAnrB,UAAAmuB,kBAAA,WACE,IAAIC,EAAKrwB,KAAK+tB,cAGd,OAFK/tB,KAAKguB,WACLhuB,KAAKguB,WAAWzS,KAAK8U,GADJrwB,KAAKguB,YAAeqC,GAEnCrwB,KAAKytB,aAAe4C,EAAGxV,SAAS,KAIzCuS,EAAAnrB,UAAAquB,kBAAA,WACEte,OAA0B,MAAnBhS,KAAKguB,YACZ,IAAIpnB,EAAiB5G,KAAKguB,WAAYpnB,OACtCoL,OAAOpL,EAAS,GACR5G,KAAKguB,WAAYgC,MACrBppB,EAAS,EACX5G,KAAKytB,aAAuBztB,KAAKguB,WAAYpnB,EAAS,GAAGiU,SAAS,KAElE7a,KAAKytB,aAAe,KACpBztB,KAAKguB,WAAa,OAKtBZ,EAAAnrB,UAAAsuB,SAAA,SAAS5wB,EAAgBguB,GAMvB,GALA3tB,KAAK2tB,IAAMA,EACX3b,QAAQhS,KAAKguB,aAAehuB,KAAKguB,WAAWpnB,QAC5C5G,KAAKguB,WAAa,KAClBhuB,KAAKytB,aAAe,KACpBztB,KAAKkuB,SAAWluB,KAAKmuB,SAAWnuB,KAAKouB,SAAWpuB,KAAKquB,SAAW,KAC5DruB,KAAK2rB,QAAQlL,QAAQ+P,UAEvB,IADA,IAAI9C,EAAiB1tB,KAAK0tB,eACjBrtB,EAAI,EAAGsG,EAAI+mB,EAAe9mB,OAAQvG,EAAIsG,IAAKtG,EAAG,CACrD,IAAIowB,EAAgB/C,EAAertB,GACnCV,EAAO+wB,iBACL/C,EACA8C,EAAcE,aACdF,EAAcrjB,OAAOkI,eACrBmb,EAAc3V,KACd2V,EAAc1V,UAOtBqS,EAAAnrB,UAAA4Y,SAAA,WAAqB,OAAO7a,KAAKiC,UAAUglB,YAC7CmG,EA3QA,CAA8B1B,GAAjBhsB,EAAA0tB,WA8Qb,IAAAwD,EAAA,SAAAxf,GAUE,SAAAwf,EAAYjF,EAAkBxc,GAA9B,IAAAmC,EACEF,EAAA5Q,KAAAR,KAAM2rB,EAAS,GAAI,KAAG3rB,KATxBsR,EAAA1O,KAAOgc,EAAYiS,gBAUjB,IAAI5J,EAAa9X,EAAU2hB,2BAC3Bxf,EAAK2V,WAAaA,EAClB3V,EAAKkR,aAAeyE,EACpB3V,EAAKnC,UAAYA,EACjBmC,EAAKlN,KAAO+X,EAAAuE,KAAKQ,IAAI6P,WAAW5hB,KAEpC,OAlBoCkC,EAAAuf,EAAAxf,GAkBpCwf,EAlBA,CAAoClF,GAAvBhsB,EAAAkxB,iBAqBb,IAAAnI,EAAA,SAAArX,GAUE,SAAAqX,EACER,EACAhB,EACAzE,EACA5a,GAJF,IAAA0J,EAMEF,EAAA5Q,KAAAR,KAAMioB,EAAe0D,QAAS1E,EAAYzE,IAAaxiB,YAdzDsR,EAAA1O,KAAOgc,EAAYoS,gBAejB1f,EAAK2W,eAAiBA,EACtB3W,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,QAE7B,OArBoC4N,EAAAoX,EAAArX,GAqBpCqX,EArBA,CAAoCiD,GAAvBhsB,EAAA+oB,iBAwBb,IAAAwI,EAAA,SAAA7f,GAUE,SAAA6f,EACEhvB,EACAugB,EACApe,EACAwD,EACApE,GALF,IAAA8N,EAOEF,EAAA5Q,KAAAR,KAAMiC,EAAU0pB,QAAS1pB,EAAUglB,WAAYzE,EAAcpe,EAAMwD,IAAY5H,YAfjFsR,EAAA1O,KAAOgc,EAAYsS,MAKnB5f,EAAA6f,cAAqB,EAWnB7f,EAAKrP,UAAYA,EACjBqP,EAAK7N,MAAQxB,EAAUwB,MACvB6N,EAAKlN,KAAOA,EACZkN,EAAK9N,OAASA,IAElB,OAvB2B6N,EAAA4f,EAAA7f,GAuB3B6f,EAvBA,CAA2BzE,GAAd9sB,EAAAuxB,QA0Bb,IAAAnH,EAAA,SAAA1Y,GAYE,SAAA0Y,EACE6B,EACA1E,EACAzE,EACAhf,GAJF,IAAA8N,EAMEF,EAAA5Q,KAAAR,KAAM2rB,EAAS1E,EAAYzE,IAAaxiB,YAhB1CsR,EAAA1O,KAAOgc,EAAY+K,SAKnBrY,EAAAsY,gBAA4C,KAE5CtY,EAAAuY,gBAA4C,KAU1CvY,EAAK9N,OAASA,IAElB,OArB8B6N,EAAAyY,EAAA1Y,GAqB9B0Y,EArBA,CAA8B4B,GAAjBhsB,EAAAoqB,WAwBb,IAAA5C,EAAA,SAAA9V,GAiBE,SAAA8V,EACEyE,EACA1E,EACAzE,EACA5a,EACA8gB,GALF,IAAApX,EAOEF,EAAA5Q,KAAAR,KAAM2rB,EAAS1E,EAAYzE,IAAaxiB,YAtB1CsR,EAAA1O,KAAOgc,EAAYgG,gBAKnBtT,EAAA4b,UAA+B,IAAInO,IAEnCzN,EAAAiX,gBAA8C,KAE9CjX,EAAAuT,cAAuC,KAEvCvT,EAAAsX,qBAAiD,KAEjDtX,EAAA4X,mBAA2D,IAAInK,IAU7DzN,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,MACzB6N,EAAKoX,eAAiBA,IAM1B,OAjCoCrX,EAAA6V,EAAA9V,GA8BlC8V,EAAAjlB,UAAA4Y,SAAA,WACE,OAAO7a,KAAKinB,YAEhBC,EAjCA,CAAoCwE,GAAvBhsB,EAAAwnB,iBAoCb,IAAAkK,EAAA,SAAAhgB,GAsBE,SAAAggB,EACEnvB,EACAglB,EACAzE,EACAve,EACAotB,gBADA,IAAAptB,MAAA,WACA,IAAAotB,MAAA,MALF,IAAA/f,EAOEF,EAAA5Q,KAAAR,KAAMiC,EAAU0pB,QAAS1E,EAAYzE,IAAaxiB,KASlD,GApCFsR,EAAA1O,KAAOgc,EAAYjL,MAWnBrC,EAAA+b,wBAAmD,KAEnD/b,EAAAggB,oBAA2B,EAE3BhgB,EAAAigB,oBAAuC,KAEvCjgB,EAAA2X,UAA+C,KAW7C3X,EAAKrP,UAAYA,EACjBqP,EAAK7N,MAAQxB,EAAUwB,MACvB6N,EAAKoX,eAAiBzmB,EAAUymB,eAChCpX,EAAKrN,cAAgBA,EACrBqN,EAAKlN,KAAOnC,EAAU0pB,QAAQlL,QAAQW,UAAUoQ,QAAQlgB,GACxDA,EAAK+f,KAAOA,EAGRA,EAAM,CACR,IAAI3C,EAAyB2C,EAAKhE,wBAClC,GAAIqB,EAAwB,CACrBpd,EAAK+b,0BAAyB/b,EAAK+b,wBAA0B,IAAItO,SACtE,IAAiC,IAAA0S,EAAA9N,EAAA+K,GAAsBgD,EAAAD,EAAA5N,QAAA6N,EAAA5N,KAAA4N,EAAAD,EAAA5N,OAAE,CAAhD,IAAAgL,EAAA7K,EAAA0N,EAAApwB,MAAA,GAACyoB,EAAA8E,EAAA,GAAU8C,EAAA9C,EAAA,GAClBvd,EAAK+b,wBAAwBtpB,IAAIgmB,EAAU4H,uGAMjD,IACItxB,EAAQsG,EADRiB,EAAc0J,EAAKrP,UAAU2F,YAEjC,GAAIA,EAAa,CACf,IAAIiE,EAAiBjE,EAAYiE,eACjC,GAAI5H,EAAe,CACjB,IAAK0C,EAAI1C,EAAc2C,SAAWiF,EAAejF,OAC/C,MAAM,IAAIue,MAAM,gCAElB,GAAIxe,EAEF,IADK2K,EAAK+b,0BAAyB/b,EAAK+b,wBAA0B,IAAItO,KACjE1e,EAAI,EAAGA,EAAIsG,IAAKtG,EACnBiR,EAAK+b,wBAAwBtpB,IAAI8H,EAAexL,GAAGO,KAAKmF,KAAM9B,EAAc5D,SAG3E,GAAIwL,EAAejF,OACxB,MAAM,IAAIue,MAAM,yCA4CxB,OA5G2B9T,EAAA+f,EAAAhgB,GAsEzBggB,EAAAnvB,UAAA2vB,eAAA,SAAeC,GACb,IAAIC,EAAwB9xB,KAC5B,GAAG,GAAI8xB,GAAWD,EAAQ,OAAO,QAC1BC,EAAUA,EAAQT,MACzB,OAAO,GAITD,EAAAnvB,UAAA8vB,eAAA,SAAenvB,EAAoBovB,GACjC,QADiC,IAAAA,OAAA,GAC7BA,EACF,OAAQpvB,GACN,KAAKqZ,EAAaY,YAEhB,GADIoV,EAAoBjyB,KAAK+xB,eAAe9V,EAAac,uBAClC,OAAOkV,EAC9B,MAEF,KAAKhW,EAAaa,YAChB,IAAImV,EACJ,GADIA,EAAoBjyB,KAAK+xB,eAAe9V,EAAae,uBAClC,OAAOiV,EAC9B,MAEF,QAASjgB,QAAO,GAGpB,IAAIqT,EAAyBrlB,KAC7B,EAAG,CACD,IAAIipB,EAAY5D,EAAS4D,UACzB,GAAIA,EAAW,CACb,IAAIiJ,EAAWjJ,EAAU/nB,IAAI0B,GAC7B,GAAIsvB,EAAU,OAAOA,SAEhB7M,EAAWA,EAASgM,MAC7B,OAAO,MAGTD,EAAAnvB,UAAA4Y,SAAA,WACE,OAAO7a,KAAKinB,YAEhBmK,EA5GA,CAA2B1F,GAAdhsB,EAAA0xB,QA+Gb,IAAAjG,EAAA,SAAA/Z,GAQE,SAAA+Z,EACEQ,EACA1E,EACAzE,EACA5a,EACA8gB,GALF,IAAApX,EAOEF,EAAA5Q,KAAAR,KAAM2rB,EAAS1E,EAAYzE,EAAc5a,EAAa8gB,IAAe1oB,YAbvEsR,EAAA1O,KAAOgc,EAAYuJ,sBAerB,OAjBwC9W,EAAA8Z,EAAA/Z,GAiBxC+Z,EAjBA,CAAwCjE,GAA3BxnB,EAAAyrB,qBAoBb,IAAAgH,EAAA,SAAA/gB,GAUE,SAAA+gB,EACElwB,EACAglB,EACAzE,EACAve,EACAotB,QADA,IAAAptB,eACA,IAAAotB,MAAA,MALF,IAAA/f,EAOEF,EAAA5Q,KAAAR,KAAMiC,EAAWglB,EAAYzE,EAAcve,EAAeotB,IAAKrxB,YAfjEsR,EAAA1O,KAAOgc,EAAYwT,YAiBrB,OAnB+B/gB,EAAA8gB,EAAA/gB,GAmB/B+gB,EAnBA,CAA+Bf,GAAlB1xB,EAAAyyB,YAsBb,SAAkBE,GAEhBA,IAAA,eAKAA,IAAA,qBAEAA,IAAA,qCAEAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,0BAEAA,IAAA,0BAKAA,IAAA,kDAEAA,IAAA,iDAEAA,IAAA,iDAEAA,IAAA,uDAEAA,IAAA,wDAKAA,IAAA,sCAEAA,IAAA,4CAKAA,IAAA,sCAMAA,IAAA,sCAQAA,IAAA,wCAxDF,CAAkB3yB,EAAA2yB,YAAA3yB,EAAA2yB,eAgElB,IAAAhD,EAAA,WAyCE,SAAAA,IAtBArvB,KAAAsyB,aAAyC,KAof3C,OA7eSjD,EAAA1tB,OAAP,SAAc4wB,GACZ,IAAIC,EAAa,IAAInD,EAWrB,OAVAmD,EAAWhvB,OAAS,KACpBgvB,EAAW/uB,MAAK,EAChB+uB,EAAWD,gBAAkBA,EAC7BC,EAAWC,cAAgB,KAC3BD,EAAWE,WAAa,KACxBF,EAAWG,YAAc,KACzBH,EAAWrtB,WAAaotB,EAAgBpjB,UAAUhK,WAClDqtB,EAAWnF,wBAA0BkF,EAAgBlF,wBACrDmF,EAAWI,cAAgBlR,QAAQ,GACnC8Q,EAAWK,iBAAmB,KACvBL,GAMTnD,EAAAptB,UAAA2B,GAAA,SAAGC,GAAyB,OAAQ7D,KAAKyD,MAAQI,IAASA,GAE1DwrB,EAAAptB,UAAA6B,MAAA,SAAMD,GAAyB,OAA8B,IAAtB7D,KAAKyD,MAAQI,IAEpDwrB,EAAAptB,UAAA8B,IAAA,SAAIF,GAAyB7D,KAAKyD,OAASI,GAE3CwrB,EAAAptB,UAAA6wB,MAAA,SAAMjvB,GAAyB7D,KAAKyD,QAAUI,GAG9CwrB,EAAAptB,UAAA8wB,KAAA,WACE,IAAIC,EAAS,IAAI3D,EAWjB,OAVA2D,EAAOxvB,OAASxD,KAChBgzB,EAAOvvB,MAAQzD,KAAKyD,MACpBuvB,EAAOT,gBAAkBvyB,KAAKuyB,gBAC9BS,EAAOP,cAAgBzyB,KAAKyyB,cAC5BO,EAAON,WAAa1yB,KAAK0yB,WACzBM,EAAOL,YAAc3yB,KAAK2yB,YAC1BK,EAAO7tB,WAAanF,KAAKmF,WACzB6tB,EAAO3F,wBAA0BrtB,KAAKqtB,wBACtC2F,EAAOJ,cAAgB5yB,KAAK4yB,cAC5BI,EAAOH,iBAAmB7yB,KAAK6yB,iBAAmB7yB,KAAK6yB,iBAAiBI,QAAU,KAC3ED,GAIT3D,EAAAptB,UAAAixB,KAAA,mBACM1vB,EAASwO,OAAOhS,KAAKwD,QACzB,GAAIxD,KAAKsyB,aAAc,KACrB,IAAwB,IAAAzD,EAAAlL,EAAA3jB,KAAKsyB,aAAa7oB,UAAQsa,EAAA8K,EAAAhL,QAAAE,EAAAD,KAAAC,EAAA8K,EAAAhL,OAAE,CAA/C,IAAIsP,EAAWpP,EAAAziB,MACd6xB,EAAYvvB,GAAGvB,EAAAqB,YAAY0vB,SAC7BpzB,KAAKuyB,gBAAgBrC,cAAciD,qGAGvCnzB,KAAKsyB,aAAe,KAEtB,OAAO9uB,GAIT6rB,EAAAptB,UAAAoxB,eAAA,SAAejvB,EAAYxD,EAAc4uB,EAAe5nB,GACtD,IAAIurB,EAAcnzB,KAAKuyB,gBAAgBhD,aAAanrB,GAAM,GAC1D,GAAKpE,KAAKsyB,aACL,CACH,IAAIgB,EAAgBtzB,KAAKsyB,aAAapxB,IAAIN,GAC1C,GAAI0yB,EAOF,OANI1rB,EACF5H,KAAKuyB,gBAAgB5G,QAAQ3P,MAC3BE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,OAEd6N,QAAO,GACPshB,OAVatzB,KAAKsyB,aAAe,IAAIvT,IAkBhD,OALAoU,EAAYpvB,IAAI1B,EAAAqB,YAAY0vB,QAC5BpzB,KAAKsyB,aAAavuB,IAAInD,EAAMuyB,GACxB/uB,EAAKR,GAAG,KACV5D,KAAKiwB,gBAAgBkD,EAAYpG,MAAOyC,GAEnC2D,GAIT9D,EAAAptB,UAAAsxB,oBAAA,SAAoBxG,EAAY3oB,EAAYxD,GAC1C,GAAKZ,KAAKsyB,aACL,CACH,IAAIgB,EAAgBtzB,KAAKsyB,aAAapxB,IAAIN,GAC1C,GAAI0yB,EAAe,CACjB,IAAI1rB,EAAc0rB,EAAc1rB,YAOhC,OANIA,EACF5H,KAAKuyB,gBAAgB5G,QAAQ3P,MAC3BE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,OAEd6N,QAAO,GACPshB,QAXatzB,KAAKsyB,aAAe,IAAIvT,IAchD/M,OAAO+a,EAAQ/sB,KAAKuyB,gBAAgBhF,cAAc3mB,QAClD,IAAI4sB,EAAc,IAAI1G,EACpB9sB,KAAKuyB,gBAAgB5G,QACrB/qB,EACAmsB,EACA3oB,EACA,MAGF,OADApE,KAAKsyB,aAAavuB,IAAInD,EAAM4yB,GACrBA,GAITnE,EAAAptB,UAAAwxB,eAAA,SAAe7yB,GACb,IAAI4tB,EACAsD,EAAuB9xB,KAC3B,GACE,GAAI8xB,EAAQQ,eAAiB9D,EAAQsD,EAAQQ,aAAapxB,IAAIN,IAC5D,OAAO4tB,QAEFsD,EAAUA,EAAQtuB,QAC3B,OAAOxD,KAAKuyB,gBAAgBjF,aAAapsB,IAAIN,IAI/CyuB,EAAAptB,UAAAyxB,eAAA,SAAe3G,GACb,IAAI4G,EACAC,EACJ,GAAI7G,EAAQ,GAAI,CACd,GAAIA,EAAQ,EAAG,OAAO,EACtB4G,EAAM3zB,KAAK4yB,kBACN,MAAIgB,EAAM5zB,KAAK6yB,kBAMpB,OAAO,EALP,IAAIxyB,GAAM0sB,EAAQ,IAAM,GAAM,EAC9B,GAAI1sB,GAAKuzB,EAAIhtB,OAAQ,OAAO,EAC5B+sB,EAAMC,EAAIvzB,GACV0sB,GAAmB,IAAT1sB,EAAI,GAIhB,OAAOwzB,OACLC,QACEH,EACAI,QACEC,QACAtS,QAAQqL,KAGZkH,WAKJ5E,EAAAptB,UAAAguB,gBAAA,SAAgBlD,EAAYyC,GAC1B,IAAImE,EACAO,GAAY,EAChB,GAAInH,EAAQ,GAAI,CACd,GAAIA,EAAQ,EAAG,OACf4G,EAAM3zB,KAAK4yB,kBACN,CACL,IAAIgB,EAAM5zB,KAAK6yB,iBAMf,IALAqB,GAAQnH,EAAQ,IAAM,GAAM,EACvB6G,IACH5zB,KAAK6yB,iBAAmBe,EAAM,IAAI9d,MAAMoe,EAAM,GAC9CN,EAAIhtB,OAAS,GAERgtB,EAAIhtB,QAAUstB,GAAKN,EAAIrY,KAAKmG,QAAQ,IAC3CiS,EAAMC,EAAIM,GACVnH,GAAqB,IAAXmH,EAAM,GAElBP,EAAMnE,EACF2E,OACER,EACAI,QACEC,QACAtS,QAAQqL,KAGZ+G,QACEH,EACAS,QACEL,QACEC,QACAtS,QAAQqL,MAIdmH,GAAO,EAAWl0B,KAAK6yB,iBAAkBqB,GAAOP,EAC/C3zB,KAAK4yB,cAAgBe,GAI5BtE,EAAAptB,UAAAoyB,QAAA,SAAQC,GACNt0B,KAAKyD,OAAuB,KAAd6wB,EAAM7wB,MACpBzD,KAAK4yB,cAAgB0B,EAAM1B,cAC3B5yB,KAAK6yB,iBAAmByB,EAAMzB,kBAIhCxD,EAAAptB,UAAAsyB,mBAAA,SAAmBD,GACbA,EAAM1wB,GAAE,IACV5D,KAAK+D,IAAG,IAENuwB,EAAM1wB,GAAE,IACV5D,KAAK+D,IAAG,KAENuwB,EAAM1wB,GAAE,IAAsB0wB,EAAM5B,YAAc1yB,KAAK0yB,YACzD1yB,KAAK+D,IAAG,KAENuwB,EAAM1wB,GAAE,KAAyB0wB,EAAM7B,eAAiBzyB,KAAKyyB,eAC/DzyB,KAAK+D,IAAG,KAENuwB,EAAM1wB,GAAE,KACV5D,KAAK+D,IAAG,OAKZsrB,EAAAptB,UAAAuyB,cAAA,SAAcntB,EAAYC,GAExBtH,KAAKyD,OAAS4D,EAAK5D,MAAQ6D,EAAM7D,MAAK,GAGtCzD,KAAKyD,OAAmB,KAAV4D,EAAK5D,MACnBzD,KAAKyD,OAAoB,KAAX6D,EAAM7D,MAGpBzD,KAAK4yB,cAAgBkB,QAAQzsB,EAAKurB,cAAetrB,EAAMsrB,eACvD,IAAI6B,EAAUptB,EAAKwrB,iBACf6B,EAAWptB,EAAMurB,iBACrB,GAAe,MAAX4B,GAA+B,MAAZC,EAAkB,CACvC,IAAIC,EAAU30B,KAAK6yB,iBACf+B,EAAYC,IAAIJ,EAAQ7tB,OAAQ8tB,EAAS9tB,QAC7C,GAAIguB,EAAW,CACb,GAAKD,EACA,KAAOA,EAAQ/tB,OAASguB,GAAWD,EAAQpZ,KAAKmG,QAAQ,SAD/CiT,EAAU,IAAI7e,MAAM8e,GAElC,IAAK,IAAIv0B,EAAI,EAAGA,EAAIu0B,IAAav0B,EAC/Bs0B,EAAQt0B,GAAKyzB,QACXW,EAAQp0B,GACRq0B,EAASr0B,OAYnBgvB,EAAAptB,UAAA6yB,YAAA,SAAY3uB,EAAqB/B,GAM/B,GAHA4N,OAAO5N,GAAQ+X,EAAAuE,KAAKc,OAGfpd,EAAKR,GAAG,IAAsC,OAAO,EAE1D,IAAIqH,EACJ,OAAQoR,EAAA0Y,gBAAgB5uB,IAGtB,KAAKkW,EAAA2Y,aAAaC,SAChB,IAAI1C,EAAkBvyB,KAAKuyB,gBACvB/D,EAAQ+D,EAAgBhF,cAAclR,EAAA6Y,iBAAiB/uB,IAC3D,OAAQosB,EAAgBnD,KAAKsE,eAAelF,EAAMzB,QAC3CoI,EAAsB3G,EAAMpqB,KAAMA,GAI3C,KAAKiY,EAAA2Y,aAAaI,SAEhB,OADApjB,OAAOqK,EAAAgZ,WAAWlvB,IACXnG,KAAK80B,YAAYzY,EAAAiZ,iBAAiBnvB,GAAO/B,GAIlD,KAAKiY,EAAA2Y,aAAaO,UAAW,OAAO,EAEpC,KAAKlZ,EAAA2Y,aAAaQ,OAChB,OAAQnZ,EAAAoZ,YAAYtvB,IAGlB,KAAKkW,EAAAqZ,SAASC,MACd,KAAKtZ,EAAAqZ,SAASE,MACd,KAAKvZ,EAAAqZ,SAASG,MACd,KAAKxZ,EAAAqZ,SAASI,MACd,KAAKzZ,EAAAqZ,SAASK,MACd,KAAK1Z,EAAAqZ,SAASM,MACd,KAAK3Z,EAAAqZ,SAASO,MACd,KAAK5Z,EAAAqZ,SAASQ,MACd,KAAK7Z,EAAAqZ,SAASS,MACd,KAAK9Z,EAAAqZ,SAASU,MACd,KAAK/Z,EAAAqZ,SAASW,MACd,KAAKha,EAAAqZ,SAASY,MACd,KAAKja,EAAAqZ,SAASa,MACd,KAAKla,EAAAqZ,SAASc,MACd,KAAKna,EAAAqZ,SAASe,MACd,KAAKpa,EAAAqZ,SAASgB,MACd,KAAKra,EAAAqZ,SAASiB,MACd,KAAKta,EAAAqZ,SAASkB,MACd,KAAKva,EAAAqZ,SAASmB,MACd,KAAKxa,EAAAqZ,SAASoB,MACd,KAAKza,EAAAqZ,SAASqB,MACd,KAAK1a,EAAAqZ,SAASsB,MACd,KAAK3a,EAAAqZ,SAASuB,MACd,KAAK5a,EAAAqZ,SAASwB,MACd,KAAK7a,EAAAqZ,SAASyB,MACd,KAAK9a,EAAAqZ,SAAS0B,MACd,KAAK/a,EAAAqZ,SAAS2B,MACd,KAAKhb,EAAAqZ,SAAS4B,MACd,KAAKjb,EAAAqZ,SAAS6B,MACd,KAAKlb,EAAAqZ,SAAS8B,MACd,KAAKnb,EAAAqZ,SAAS+B,MACd,KAAKpb,EAAAqZ,SAASgC,MAAO,OAAO,EAG5B,KAAKrb,EAAAqZ,SAASiC,OACZ,QAEItb,EAAA0Y,gBAAgB9pB,EAAUoR,EAAAub,cAAczxB,KAAUkW,EAAA2Y,aAAa6C,QAEhC,GAA7Bxb,EAAAyb,iBAAiB7sB,IAEc,GAA7BoR,EAAAyb,iBAAiB7sB,KAChBjL,KAAK80B,YAAYzY,EAAA0b,eAAe5xB,GAAO/B,KAI5CiY,EAAA0Y,gBAAgB9pB,EAAUoR,EAAA0b,eAAe5xB,KAAUkW,EAAA2Y,aAAa6C,QAEjC,GAA7Bxb,EAAAyb,iBAAiB7sB,IAEc,GAA7BoR,EAAAyb,iBAAiB7sB,KAChBjL,KAAK80B,YAAYzY,EAAAub,cAAczxB,GAAO/B,KASjD,KAAKiY,EAAAqZ,SAASsC,OAGZ,QAGM3b,EAAA0Y,gBAAgB9pB,EAAUoR,EAAAub,cAAczxB,KAAUkW,EAAA2Y,aAAa6C,OAC/Dxb,EAAAyb,iBAAiB7sB,IAAY7G,EAAK6zB,wBAAwB9b,EAAAuE,KAAKG,OAC3D7gB,KAAK80B,YAAY7pB,EAAS7G,IAG9BiY,EAAA0Y,gBAAgB9pB,EAAUoR,EAAA0b,eAAe5xB,KAAUkW,EAAA2Y,aAAa6C,OAChExb,EAAAyb,iBAAiB7sB,IAAY7G,EAAK6zB,wBAAwB9b,EAAAuE,KAAKG,OAC3D7gB,KAAK80B,YAAY7pB,EAAS7G,IAMtC,KAAKiY,EAAAqZ,SAASwC,OACZ,IAAIC,EAAQ,GAAK/zB,EAAKg0B,KACtB,OAAO/b,EAAA0Y,gBAAgB9pB,EAAUoR,EAAA0b,eAAe5xB,KAAUkW,EAAA2Y,aAAa6C,OAChExb,EAAAyb,iBAAiB7sB,GAAWktB,EAIrC,KAAK9b,EAAAqZ,SAAS2C,OACRF,EAAQ,GAAK/zB,EAAKg0B,KACtB,OAAOp4B,KAAK80B,YAAYzY,EAAAub,cAAczxB,GAAO/B,KAC3CiY,EAAA0Y,gBAAgB9pB,EAAUoR,EAAA0b,eAAe5xB,KAAUkW,EAAA2Y,aAAa6C,OAChExb,EAAAyb,iBAAiB7sB,GAAWktB,GAMhC,KAAK9b,EAAAqZ,SAAS4C,OACRH,EAAQ,GAAK/zB,EAAKg0B,KACtB,OAAOh0B,EAAKR,GAAE,KAERyY,EAAA0Y,gBAAgB9pB,EAAUoR,EAAA0b,eAAe5xB,KAAUkW,EAAA2Y,aAAa6C,OAChExb,EAAAyb,iBAAiB7sB,GAAWktB,GAE9Bn4B,KAAK80B,YAAYzY,EAAAub,cAAczxB,GAAO/B,MACpCiY,EAAA0Y,gBAAgB9pB,EAAUoR,EAAA0b,eAAe5xB,KAAUkW,EAAA2Y,aAAa6C,OAChExb,EAAAyb,iBAAiB7sB,IAAYktB,GAKrC,KAAK9b,EAAAqZ,SAAS6C,OACd,KAAKlc,EAAAqZ,SAAS8C,OACd,KAAKnc,EAAAqZ,SAAS+C,OACZ,OAAOz4B,KAAK80B,YAAYzY,EAAAub,cAAczxB,GAAO/B,IACtCpE,KAAK80B,YAAYzY,EAAA0b,eAAe5xB,GAAO/B,GAGlD,MAGF,KAAKiY,EAAA2Y,aAAa0D,MAChB,OAAQrc,EAAAsc,WAAWxyB,IAGjB,KAAKkW,EAAAuc,QAAQC,OACb,KAAKxc,EAAAuc,QAAQE,OAAQ,OAAO,EAG5B,KAAKzc,EAAAuc,QAAQG,OACb,KAAK1c,EAAAuc,QAAQI,OACb,KAAK3c,EAAAuc,QAAQK,UAAW,OAAO70B,EAAKg0B,KAAO,EAE7C,MAIF,KAAK/b,EAAA2Y,aAAa6C,MAChB,IAAIv2B,EAAa,EACjB,OAAQ+a,EAAA6c,kBAAkB/yB,IACxB,KAAKkW,EAAAsT,WAAWC,IAAOtuB,EAAQ+a,EAAAyb,iBAAiB3xB,GAAO,MACvD,KAAKkW,EAAAsT,WAAWE,IAAOvuB,EAAQ+a,EAAA8c,oBAAoBhzB,GAAO,MAC1D,KAAKkW,EAAAsT,WAAWG,IAAOxuB,EAAQuf,IAAIxE,EAAA+c,iBAAiBjzB,IAAQ,MAC5D,KAAKkW,EAAAsT,WAAWI,IAAOzuB,EAAQuf,IAAIxE,EAAAgd,iBAAiBlzB,IAAQ,MAC5D,QAAS6L,QAAO,GAElB,OAAQ5N,EAAKxB,MACX,OAAkB,OAAOtB,EAAQqf,GAAG2Y,WAAah4B,EAAQqf,GAAG4Y,UAC5D,OAAmB,OAAOj4B,EAAQsf,IAAI0Y,WAAah4B,EAAQsf,IAAI2Y,UAC/D,OAAkB,OAAOj4B,EAAQ,GAAKA,EAAQ0f,GAAGuY,UACjD,OAAmB,OAAOj4B,EAAQ,GAAKA,EAAQ2f,IAAIsY,UACnD,QAAoB,OAAuB,KAAP,EAARj4B,GAE9B,MAIF,KAAK+a,EAAA2Y,aAAawE,KAChB,IAAIC,OAAQ,EACZ,OAAQpd,EAAAqd,aAAavzB,IACnB,KAAK,EAAMszB,EAAWpd,EAAAsd,aAAaxzB,GAAQgW,EAAAuE,KAAKC,GAAKxE,EAAAuE,KAAKM,GAAI,MAC9D,KAAK,EAAMyY,EAAWpd,EAAAsd,aAAaxzB,GAAQgW,EAAAuE,KAAKE,IAAMzE,EAAAuE,KAAKO,IAAK,MAChE,QAAWwY,EAAWpd,EAAAsd,aAAaxzB,GAAQgW,EAAAuE,KAAKG,IAAM1E,EAAAuE,KAAKQ,IAE7D,OAAOiU,EAAsBsE,EAAUr1B,GAMzC,KAAKiY,EAAA2Y,aAAa4E,MAChB,IAAKvd,EAAAwd,aAAa1zB,GAAO,CACvB,IAAIiyB,EAAOpmB,OAAOqK,EAAAyd,mBAAmB3zB,IACjC4zB,EAAO1d,EAAA2d,cAAc7zB,EAAMiyB,EAAO,GACtC,OAAOp4B,KAAK80B,YAAYiF,EAAM31B,GAGhC,MAIF,KAAKiY,EAAA2Y,aAAaiF,GAChB,OAAOj6B,KAAK80B,YAAYzY,EAAA6d,UAAU/zB,GAAO/B,IAClCpE,KAAK80B,YAAY9iB,OAAOqK,EAAA8d,WAAWh0B,IAAQ/B,GAIpD,KAAKiY,EAAA2Y,aAAaoF,OAChB,OAAOp6B,KAAK80B,YAAYzY,EAAAge,cAAcl0B,GAAO/B,IACtCpE,KAAK80B,YAAYzY,EAAAie,cAAcn0B,GAAO/B,GAI/C,KAAKiY,EAAA2Y,aAAauF,KAChB,IAAI5O,EAAU3rB,KAAKuyB,gBAAgB5G,QAC/BtG,EAAWrT,OAAO2Z,EAAQxM,gBAAgBje,IAAI8Q,OAAOqK,EAAAme,cAAcr0B,MACvE6L,OAAOqT,EAASziB,MAAQgc,EAAY7K,UACpC,IAAI5O,EAAwBkgB,EAAUlW,UAAUhK,WAChD,OAAmBkgB,EAAU+J,KAAKxrB,GAAE,IAC7BuxB,EAAsBhwB,EAAYf,GAI3C,KAAKiY,EAAA2Y,aAAayF,YAAa,OAAO,EAExC,OAAO,GAITpL,EAAAptB,UAAAsuB,SAAA,WACEve,OAAsB,MAAfhS,KAAKwD,QACZxD,KAAKyyB,cAAgB,KACrBzyB,KAAK0yB,WAAa,KAClB1yB,KAAK2yB,YAAc,KACnB3yB,KAAKqtB,wBAA0B,MAEnCgC,EAvgBA,GA0gBA,SAAA8F,EAA+BsE,EAAgBxyB,GAC7C,IAAIyzB,EAAWjB,EAASkB,SACpBC,EAAS3zB,EAAO0zB,SACpB,OAAQlB,EAAS71B,GAAE,IACZ82B,EAAWE,GACXnB,EAAS71B,GAAE,IAAsBqD,EAAOrD,GAAE,GA/gBtClE,EAAA2vB,sFCj7Fb,IAaYM,EAUAqF,EAvBZ6F,EAAA16B,EAAA,IAaA,SAAYwvB,GACVA,IAAA,KAAOmL,qBAAmB,OAC1BnL,IAAA,IAAMoL,sBAAoB,MAC1BpL,IAAA,IAAMqL,sBAAoB,MAC1BrL,IAAA,IAAMsL,wBAAsB,MAC5BtL,IAAA,IAAOuL,wBAAsB,MAC7BvL,IAAA,YAAcwL,4BAA0B,cACxCxL,IAAA,KAAOyL,qBAAmB,OAP5B,CAAYzL,EAAAjwB,EAAAiwB,aAAAjwB,EAAAiwB,gBAUZ,SAAYqF,GACVA,IAAA,QAAUqG,sBAAoB,UAC9BrG,IAAA,MAAQsG,oBAAkB,QAC1BtG,IAAA,GAAKuG,iBAAe,KACpBvG,IAAA,KAAOwG,mBAAiB,OACxBxG,IAAA,MAAQyG,oBAAkB,QAC1BzG,IAAA,OAAS0G,qBAAmB,SAC5B1G,IAAA,KAAO2G,mBAAiB,OACxB3G,IAAA,WAAa4G,yBAAuB,aACpC5G,IAAA,aAAe6G,2BAAyB,eACxC7G,IAAA,SAAW8G,uBAAqB,WAChC9G,IAAA,SAAW+G,uBAAqB,WAChC/G,IAAA,UAAYgH,wBAAsB,YAClChH,IAAA,UAAYiH,wBAAsB,YAClCjH,IAAA,KAAOkH,mBAAiB,OACxBlH,IAAA,MAAQmH,oBAAkB,QAC1BnH,IAAA,MAAQoH,oBAAkB,QAC1BpH,IAAA,MAAQqH,oBAAkB,QAC1BrH,IAAA,OAASsH,qBAAmB,SAC5BtH,IAAA,OAASuH,qBAAmB,SAC5BvH,IAAA,KAAOwH,mBAAiB,OACxBxH,IAAA,OAASyH,qBAAmB,SAC5BzH,IAAA,KAAO0H,mBAAiB,OACxB1H,IAAA,IAAM2H,kBAAgB,MACtB3H,IAAA,YAAc4H,0BAAwB,cACtC5H,IAAA,cAAgB6H,4BAA0B,gBAC1C7H,IAAA,UAAY8H,wBAAsB,YAClC9H,IAAA,WAAa+H,yBAAuB,aACpC/H,IAAA,WAAagI,yBAAuB,aA5BtC,CAAYhI,EAAAt1B,EAAAs1B,eAAAt1B,EAAAs1B,kBA+BZ,SAAY4D,GACVA,IAAA,OAASqE,qBAAmB,SAC5BrE,IAAA,OAASsE,qBAAmB,SAC5BtE,IAAA,UAAYuE,wBAAsB,YAClCvE,IAAA,OAASwE,uBAAqB,SAC9BxE,IAAA,OAASyE,uBAAqB,SAC9BzE,IAAA,QAAU0E,wBAAsB,UAChC1E,IAAA,SAAW2E,yBAAuB,WAClC3E,IAAA,SAAW4E,yBAAuB,WAClC5E,IAAA,WAAa6E,2BAAyB,aACtC7E,IAAA,QAAU8E,wBAAsB,UAChC9E,IAAA,OAAS+E,qBAAmB,SAC5B/E,IAAA,OAASgF,qBAAmB,SAC5BhF,IAAA,OAASiF,qBAAmB,SAC5BjF,IAAA,UAAYkF,wBAAsB,YAClClF,IAAA,OAASmF,uBAAqB,SAC9BnF,IAAA,OAASoF,uBAAqB,SAC9BpF,IAAA,QAAUqF,wBAAsB,UAChCrF,IAAA,SAAWsF,yBAAuB,WAClCtF,IAAA,SAAWuF,yBAAuB,WAClCvF,IAAA,WAAawF,2BAAyB,aACtCxF,IAAA,QAAUyF,wBAAsB,UAChCzF,IAAA,OAAS0F,qBAAmB,SAC5B1F,IAAA,UAAY2F,yBAAuB,YACnC3F,IAAA,UAAY4F,yBAAuB,YACnC5F,IAAA,QAAU6F,sBAAoB,UAC9B7F,IAAA,cAAgB8F,iCAA+B,gBAC/C9F,IAAA,cAAgB+F,iCAA+B,gBAC/C/F,IAAA,cAAgBgG,iCAA+B,gBAC/ChG,IAAA,cAAgBiG,iCAA+B,gBAC/CjG,IAAA,cAAgBkG,iCAA+B,gBAC/ClG,IAAA,cAAgBmG,iCAA+B,gBAC/CnG,IAAA,cAAgBoG,iCAA+B,gBAC/CpG,IAAA,cAAgBqG,iCAA+B,gBAC/CrG,IAAA,eAAiBsG,+BAA6B,iBAC9CtG,IAAA,eAAiBuG,+BAA6B,iBAC9CvG,IAAA,gBAAkBwG,mCAAiC,kBACnDxG,IAAA,gBAAkByG,mCAAiC,kBACnDzG,IAAA,gBAAkB0G,mCAAiC,kBACnD1G,IAAA,gBAAkB2G,mCAAiC,kBACnD3G,IAAA,gBAAkB4G,mCAAiC,kBACnD5G,IAAA,gBAAkB6G,mCAAiC,kBACnD7G,IAAA,gBAAkB8G,mCAAiC,kBACnD9G,IAAA,gBAAkB+G,mCAAiC,kBACnD/G,IAAA,WAAagH,2BAAyB,aACtChH,IAAA,UAAYiH,0BAAwB,YACpCjH,IAAA,eAAiBkH,6BAA2B,iBAC5ClH,IAAA,eAAiBmH,6BAA2B,iBAG5CnH,IAAA,cAAgBoH,0BAAwB,gBACxCpH,IAAA,eAAiBqH,2BAAyB,iBAC1CrH,IAAA,cAAgBsH,0BAAwB,gBACxCtH,IAAA,eAAiBuH,2BAAyB,iBAC1CvH,IAAA,eAAiBwH,2BAAyB,iBAtD5C,CAAY1gC,EAAAk5B,UAAAl5B,EAAAk5B,aAmEZ,SAAYlD,GACVA,IAAA,OAAS2K,qBAAmB,SAC5B3K,IAAA,OAAS4K,qBAAmB,SAC5B5K,IAAA,OAAS6K,qBAAmB,SAC5B7K,IAAA,OAAS8K,sBAAoB,SAC7B9K,IAAA,OAAS+K,sBAAoB,SAC7B/K,IAAA,OAASgL,sBAAoB,SAC7BhL,IAAA,OAASiL,sBAAoB,SAC7BjL,IAAA,OAASkL,qBAAmB,SAC5BlL,IAAA,MAAQmL,oBAAkB,QAC1BnL,IAAA,OAASoL,qBAAmB,SAC5BpL,IAAA,OAASqL,qBAAmB,SAC5BrL,IAAA,OAASsL,sBAAoB,SAC7BtL,IAAA,OAASuL,sBAAoB,SAC7BvL,IAAA,QAAUwL,sBAAoB,UAC9BxL,IAAA,QAAUyL,sBAAoB,UAC9BzL,IAAA,MAAQ0L,oBAAkB,QAC1B1L,IAAA,MAAQ2L,oBAAkB,QAC1B3L,IAAA,MAAQ4L,qBAAmB,QAC3B5L,IAAA,MAAQ6L,qBAAmB,QAC3B7L,IAAA,MAAQ8L,qBAAmB,QAC3B9L,IAAA,MAAQ+L,qBAAmB,QAC3B/L,IAAA,MAAQgM,qBAAmB,QAC3BhM,IAAA,MAAQiM,qBAAmB,QAC3BjM,IAAA,MAAQkM,qBAAmB,QAC3BlM,IAAA,MAAQmM,qBAAmB,QAC3BnM,IAAA,OAASoM,qBAAmB,SAC5BpM,IAAA,OAASqM,qBAAmB,SAC5BrM,IAAA,OAASsM,qBAAmB,SAC5BtM,IAAA,OAASuM,sBAAoB,SAC7BvM,IAAA,OAASwM,sBAAoB,SAC7BxM,IAAA,OAASyM,sBAAoB,SAC7BzM,IAAA,OAAS0M,sBAAoB,SAC7B1M,IAAA,OAAS2M,qBAAmB,SAC5B3M,IAAA,MAAQ4M,oBAAkB,QAC1B5M,IAAA,OAAS6M,qBAAmB,SAC5B7M,IAAA,OAAS8M,qBAAmB,SAC5B9M,IAAA,OAAS+M,sBAAoB,SAC7B/M,IAAA,OAASgN,sBAAoB,SAC7BhN,IAAA,QAAUiN,sBAAoB,UAC9BjN,IAAA,QAAUkN,sBAAoB,UAC9BlN,IAAA,MAAQmN,oBAAkB,QAC1BnN,IAAA,MAAQoN,oBAAkB,QAC1BpN,IAAA,MAAQqN,qBAAmB,QAC3BrN,IAAA,MAAQsN,qBAAmB,QAC3BtN,IAAA,MAAQuN,qBAAmB,QAC3BvN,IAAA,MAAQwN,qBAAmB,QAC3BxN,IAAA,MAAQyN,qBAAmB,QAC3BzN,IAAA,MAAQ0N,qBAAmB,QAC3B1N,IAAA,MAAQ2N,qBAAmB,QAC3B3N,IAAA,MAAQ4N,qBAAmB,QAC3B5N,IAAA,OAAS6N,uBAAqB,SAC9B7N,IAAA,OAAS8N,uBAAqB,SAC9B9N,IAAA,OAAS+N,uBAAqB,SAC9B/N,IAAA,OAASgO,uBAAqB,SAC9BhO,IAAA,YAAciO,4BAA0B,cACxCjO,IAAA,OAASkO,uBAAqB,SAC9BlO,IAAA,OAASmO,uBAAqB,SAC9BnO,IAAA,MAAQoO,sBAAoB,QAC5BpO,IAAA,MAAQqO,sBAAoB,QAC5BrO,IAAA,MAAQsO,sBAAoB,QAC5BtO,IAAA,MAAQuO,sBAAoB,QAC5BvO,IAAA,MAAQwO,sBAAoB,QAC5BxO,IAAA,MAAQyO,sBAAoB,QAC5BzO,IAAA,OAAS0O,uBAAqB,SAC9B1O,IAAA,OAAS2O,uBAAqB,SAC9B3O,IAAA,OAAS4O,uBAAqB,SAC9B5O,IAAA,OAAS6O,uBAAqB,SAC9B7O,IAAA,YAAc8O,4BAA0B,cACxC9O,IAAA,OAAS+O,uBAAqB,SAC9B/O,IAAA,OAASgP,uBAAqB,SAC9BhP,IAAA,MAAQiP,sBAAoB,QAC5BjP,IAAA,MAAQkP,sBAAoB,QAC5BlP,IAAA,MAAQmP,sBAAoB,QAC5BnP,IAAA,MAAQoP,sBAAoB,QAC5BpP,IAAA,MAAQqP,sBAAoB,QAC5BrP,IAAA,MAAQsP,sBAAoB,QA5E9B,CAAYtlC,EAAAg2B,WAAAh2B,EAAAg2B,cA+EZ,SAAYuP,GACVA,IAAA,SAAWC,qBAAmB,WAC9BD,IAAA,cAAgBE,0BAAwB,gBACxCF,IAAA,WAAaG,uBAAqB,aAClCH,IAAA,WAAaI,uBAAqB,aAJpC,CAAY3lC,EAAAulC,SAAAvlC,EAAAulC,YAWZ,SAAYK,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,OANjC,CAAYlmC,EAAA4lC,cAAA5lC,EAAA4lC,iBASZ,IAAAO,EAAA,oBAAAA,KAWA,OANSA,EAAAlkC,OAAP,SAAcmkC,EAAoBC,GAChC,IAAIC,EAAU,IAAIH,EAGlB,OAFAG,EAAQF,OAASA,EACjBE,EAAQD,OAASA,EACVC,GAEXH,EAXA,GAAanmC,EAAAmmC,gBAab,IAAAI,EAAA,WA+BE,SAAAA,IAsZQjmC,KAAAkmC,oBAA6B,EAC7BlmC,KAAAmmC,sBAA6B,EAqQ7BnmC,KAAAomC,qBAA8B,EAC9BpmC,KAAAqmC,sBAA+B,EAgMzC,OAh3BSJ,EAAAtkC,OAAP,WACE,IAAIhC,EAAS,IAAIsmC,EAGjB,OAFAtmC,EAAOguB,IAAM2Y,wBACb3mC,EAAO4mC,cAAgBC,OAAOC,SAAS,IAChC9mC,GAGFsmC,EAAAS,WAAP,SAAkBZ,GAChB,IAAIa,EAAOC,EAAad,GACxB,IACE,IAAInmC,EAAS,IAAIsmC,EAGjB,OAFAtmC,EAAOguB,IAAMkZ,oBAAoBF,EAAMb,EAAOl/B,QAC9CjH,EAAO4mC,cAAgBC,OAAOC,SAAS,IAChC9mC,UAEP6mC,OAAOtT,KAAK4T,WAAkBH,MAQlCV,EAAAhkC,UAAA8kC,gBAAA,SACEnmC,EACAmrB,EACAib,GAEA,IAAIC,EAAOC,EAAYtmC,GACnB+lC,EAAOQ,EAAcH,GACzB,IACE,OAAOI,yBAAyBpnC,KAAK2tB,IAAKsZ,EAAMlb,EAAQ4a,EAAMK,EAAaA,EAAWpgC,OAAS,WAE/F4/B,OAAOtT,KAAKyT,GACZH,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAAolC,2BAAA,SACEtb,EACAib,GAEA,IAAIL,EAAOQ,EAAcH,GACzB,IACE,OAAOM,oCAAoCtnC,KAAK2tB,IAAK5B,EAAQ4a,EAAMK,EAAaA,EAAWpgC,OAAS,WAEpG4/B,OAAOtT,KAAKyT,KAIhBV,EAAAhkC,UAAAslC,mBAAA,SAAmB3mC,GACjB,IAAIqmC,EAAOC,EAAYtmC,GACvB,IACE4mC,4BAA4BxnC,KAAK2tB,IAAKsZ,WAEtCT,OAAOtT,KAAK+T,KAMhBhB,EAAAhkC,UAAAwlC,UAAA,SAAUnmC,GACR,IAAIomC,EAAM1nC,KAAKumC,cAEf,OADAoB,sBAAsBD,EAAKpmC,GACpBsmC,eAAe5nC,KAAK2tB,IAAK+Z,IAGlCzB,EAAAhkC,UAAA4lC,UAAA,SAAUC,EAAeC,QAAA,IAAAA,MAAA,GACvB,IAAIL,EAAM1nC,KAAKumC,cAEf,OADAyB,sBAAsBN,EAAKI,EAAUC,GAC9BH,eAAe5nC,KAAK2tB,IAAK+Z,IAGlCzB,EAAAhkC,UAAAgmC,UAAA,SAAU3mC,GACR,IAAIomC,EAAM1nC,KAAKumC,cAEf,OADA2B,wBAAwBR,EAAKpmC,GACtBsmC,eAAe5nC,KAAK2tB,IAAK+Z,IAGlCzB,EAAAhkC,UAAAkmC,UAAA,SAAU7mC,GACR,IAAIomC,EAAM1nC,KAAKumC,cAEf,OADA6B,wBAAwBV,EAAKpmC,GACtBsmC,eAAe5nC,KAAK2tB,IAAK+Z,IAKlCzB,EAAAhkC,UAAAomC,YAAA,SACEC,EACAniC,GAEA,OAAOoiC,eAAevoC,KAAK2tB,IAAK2a,EAAIniC,IAGtC8/B,EAAAhkC,UAAAumC,aAAA,SACEF,EACAjhC,EACAC,GAEA,OAAOmhC,gBAAgBzoC,KAAK2tB,IAAK2a,EAAIjhC,EAAMC,IAG7C2+B,EAAAhkC,UAAAymC,WAAA,SACEJ,EACA1nC,EACA+nC,QADA,IAAA/nC,MAAA,WACA,IAAA+nC,MAAA,MAEA,IAAI1B,EAAOC,EAAYtmC,GACnB+lC,EAAOiC,EAAcD,GACzB,IACE,OAAOE,cAAc7oC,KAAK2tB,IAAK2a,EAAIrB,EAAMN,EAAMgC,EAA6BA,EAAU/hC,OAAS,WAE/F4/B,OAAOtT,KAAKyT,GACZH,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAA6mC,eAAA,SACE/b,EACA3oB,GAEA,OAAO2kC,kBAAkB/oC,KAAK2tB,IAAKZ,EAAO3oB,IAG5C6hC,EAAAhkC,UAAA+mC,eAAA,SACEjc,EACAzrB,GAEA,OAAO2nC,kBAAkBjpC,KAAK2tB,IAAKZ,EAAOzrB,IAG5C2kC,EAAAhkC,UAAAinC,gBAAA,SACEtoC,EACAwD,GAEA,IAAI6iC,EAAOC,EAAYtmC,GACvB,IACE,OAAOuoC,mBAAmBnpC,KAAK2tB,IAAKsZ,EAAM7iC,WAE1CoiC,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAAmnC,WAAA,SACEC,EACAC,EACAC,EACAnlC,EACA2hC,GAEA,YAFA,IAAAA,MAAA,GAEOyD,cAAcxpC,KAAK2tB,IAAK0b,EAAOC,EAAS,EAAI,EAAGvD,EAA6BsD,EAAOjlC,EAAMmlC,IAGlGtD,EAAAhkC,UAAAwnC,YAAA,SACEJ,EACAE,EACAjoC,EACA8C,EACA2hC,GAEA,YAFA,IAAAA,MAAA,GAEO2D,eAAe1pC,KAAK2tB,IAAK0b,EAAOtD,EAA6BsD,EAAOE,EAAKjoC,EAAO8C,IAGzF6hC,EAAAhkC,UAAA0nC,iBAAA,SACEN,EACAE,EACAnlC,EACA2hC,GAEA,YAFA,IAAAA,MAAA,GAEO6D,oBAAoB5pC,KAAK2tB,IAAK0b,EAAOtD,EAAQ3hC,EAAMmlC,IAG5DtD,EAAAhkC,UAAA4nC,kBAAA,SACER,EACAE,EACAjoC,EACA8C,EACA2hC,GAEA,YAFA,IAAAA,MAAA,GAEO+D,qBAAqB9pC,KAAK2tB,IAAK0b,EAAOtD,EAAQwD,EAAKjoC,EAAO8C,IAGnE6hC,EAAAhkC,UAAA8nC,gBAAA,SACEzB,EACAe,EACAtD,EACAwD,EACAjoC,EACA8C,GAEA,OAAO4lC,mBAAmBhqC,KAAK2tB,IAAK2a,EAAIe,EAAOtD,EAAQwD,EAAKjoC,EAAO8C,IAGrE6hC,EAAAhkC,UAAAgoC,oBAAA,SACEZ,EACAtD,EACAwD,EACAW,EACAC,EACA/lC,GAEA,OAAOgmC,uBAAuBpqC,KAAK2tB,IAAK0b,EAAOtD,EAAQwD,EAAKW,EAAUC,EAAa/lC,IAGrF6hC,EAAAhkC,UAAAooC,iBAAA,SACEd,EACAW,EACAI,EACAC,GAEA,OAAOC,oBAAoBxqC,KAAK2tB,IAAK4b,EAAKW,EAAUI,EAASC,IAG/DtE,EAAAhkC,UAAAwoC,iBAAA,SACElB,EACAmB,GAEA,OAAOC,oBAAoB3qC,KAAK2tB,IAAK4b,EAAKmB,IAK5CzE,EAAAhkC,UAAA2oC,eAAA,SACE7d,EACAzrB,GAEA,OAAOupC,kBAAkB7qC,KAAK2tB,IAAKZ,EAAOzrB,IAG5C2kC,EAAAhkC,UAAA6oC,gBAAA,SACElqC,EACAU,GAEA,IAAI2lC,EAAOC,EAAYtmC,GACvB,IACE,OAAOmqC,mBAAmB/qC,KAAK2tB,IAAKsZ,EAAM3lC,WAE1CklC,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAA+oC,YAAA,SACEv/B,EACAw/B,EACA7mC,QAAA,IAAAA,MAAmBurB,EAAWub,MAE9B,IAAIjE,EAAOC,EAAYz7B,GACnBk7B,EAAOiC,EAAcqC,GACzB,IACE,OAAOE,eAAenrC,KAAK2tB,IAAKsZ,EAAMN,EAAMsE,EAASrkC,OAAQxC,WAE7DoiC,OAAOtT,KAAKyT,GACZH,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAAmpC,YAAA,SACE3/B,EACArB,EACA9I,QADA,IAAA8I,MAAA,QACA,IAAA9I,MAAA,GAEA,IAAI2lC,EAAOC,EAAYz7B,GACvB,IACE,OAAO4/B,eAAerrC,KAAK2tB,IAAKsZ,EAAM78B,EAAW9I,WAEjDklC,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAAqpC,WAAA,SACEtkC,GAEA,OAAOukC,cAAcvrC,KAAK2tB,IAAK3mB,IAGjCi/B,EAAAhkC,UAAAupC,WAAA,SACE//B,EACA2D,GAEA,IAAI63B,EAAOC,EAAYz7B,GACvB,IACE,OAAOggC,cAAczrC,KAAK2tB,IAAKsZ,EAAM73B,WAErCo3B,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAAypC,SAAA,SACEthC,EACA2D,EACAC,GAEA,YAFA,IAAAA,MAAA,GAEO29B,YAAY3rC,KAAK2tB,IAAKvjB,EAAW2D,EAAQC,IAGlDi4B,EAAAhkC,UAAA2pC,UAAA,WACE,OAAOC,aAAa7rC,KAAK2tB,MAG3BsY,EAAAhkC,UAAA6pC,aAAA,SACE9kC,GAEA,YAFA,IAAAA,MAAA,GAEO+kC,gBAAgB/rC,KAAK2tB,IAAK3mB,IAGnCi/B,EAAAhkC,UAAA+pC,aAAA,SACEj+B,EACAC,EACA5D,GAEA,OAAO6hC,gBAAgBjsC,KAAK2tB,IAAKvjB,EAAW2D,EAAQC,IAGtDi4B,EAAAhkC,UAAAiqC,aAAA,SACE1iC,EACA2iC,EACA/hC,EACA9I,QAAA,IAAAA,MAAA,GAIA,IAFA,IAAI8qC,EAAW5iC,EAAM5C,OACjBylC,EAAO,IAAIv2B,MAAas2B,GACnB/rC,EAAI,EAAGA,EAAI+rC,IAAY/rC,EAC9BgsC,EAAKhsC,GAAK6mC,EAAY19B,EAAMnJ,IAE9B,IAAIsmC,EAAOQ,EAAckF,GACrBpF,EAAOC,EAAYiF,GACvB,IACE,OAAOG,gBAAgBtsC,KAAK2tB,IAAKgZ,EAAMyF,EAAUnF,EAAM78B,EAAW9I,WAElEklC,OAAOtT,KAAK+T,GACZT,OAAOtT,KAAKyT,GACZ,IAAStmC,EAAI+rC,EAAW,EAAG/rC,GAAK,IAAKA,EAAGmmC,OAAOtT,KAAKmZ,EAAKhsC,MAI7D4lC,EAAAhkC,UAAAsqC,WAAA,SACE1a,EACA8W,EACAxjC,GAEA,IAAI8hC,EAAOC,EAAYrV,GACnB8U,EAAOiC,EAAcD,GACzB,IACE,OAAO6D,cAAcxsC,KAAK2tB,IAAKsZ,EAAMN,EAAMgC,GAAYA,EAAS/hC,QAAU,EAAGzB,WAE7EqhC,OAAOtT,KAAKyT,GACZH,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAAwqC,iBAAA,SACE5a,EACA8W,EACAxjC,GAEA,IAAI8hC,EAAOC,EAAYrV,GACnB8U,EAAOiC,EAAcD,GACzB,IACE,OAAO+D,oBAAoB1sC,KAAK2tB,IAAKsZ,EAAMN,EAAMgC,GAAYA,EAAS/hC,QAAU,EAAGzB,WAEnFqhC,OAAOtT,KAAKyT,GACZH,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAA0qC,mBAAA,SACE5f,EACA4b,EACAiE,GAEA,IAAIjG,EAAOiC,EAAcD,GACrB1B,EAAOC,EAAY0F,GACvB,IACE,OAAOC,sBAAsB7sC,KAAK2tB,IAAKZ,EAAO4Z,EAAMgC,GAAYA,EAAS/hC,QAAU,EAAGqgC,WAEtFT,OAAOtT,KAAK+T,GACZT,OAAOtT,KAAKyT,KAIhBV,EAAAhkC,UAAA6qC,kBAAA,WACE,OAAOC,qBAAqB/sC,KAAK2tB,MAKnCsY,EAAAhkC,UAAA+qC,UAAA,SACEpsC,EACAwD,EACA6oC,EACAnoC,GAEA,IAAImiC,EAAOC,EAAYtmC,GACvB,IACE,OAAOssC,mBAAmBltC,KAAK2tB,IAAKsZ,EAAM7iC,EAAM6oC,EAAU,EAAI,EAAGnoC,WAEjE0hC,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAAkrC,YAAA,SACEvsC,EACAwD,EACAgpC,EACAh+B,GAEA,IAAI63B,EAAOC,EAAYtmC,GACnB+lC,EAAOQ,EAAciG,GACzB,IACE,OAAOC,qBAAqBrtC,KAAK2tB,IAAKsZ,EAAM7iC,EAAMuiC,EAAMyG,EAAWA,EAASxmC,OAAS,EAAGwI,WAExFo3B,OAAOtT,KAAKyT,GACZH,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAAqrC,eAAA,SAAe1sC,GACb,IAAIqmC,EAAOC,EAAYtmC,GACvB,IACE2sC,wBAAwBvtC,KAAK2tB,IAAKsZ,WAElCT,OAAOtT,KAAK+T,KAOhBhB,EAAAhkC,UAAAurC,qBAAA,SAAqBzhB,EAAoBib,EAAiC53B,GACxEpP,KAAKmmC,qBAAuBn0B,QAAQhS,KAAKmmC,sBACzC,IAAIsH,EAAWztC,KAAKkmC,oBACfuH,IAAUztC,KAAKkmC,oBAAsBuH,EAAWvG,EAAY,KACjE,IAAIP,EAAOQ,EAAcH,GACzB,IACE,IAAI0G,EAAUtG,yBAAyBpnC,KAAK2tB,IAAK8f,EAAU1hB,EAAQ4a,EAAMK,EAAaA,EAAWpgC,OAAS,GAC1G,OAAOymC,qBAAqBrtC,KAAK2tB,IAAK8f,EAAUC,EAAS,EAAG,EAAGt+B,WAE/Do3B,OAAOtT,KAAKyT,KAIhBV,EAAAhkC,UAAA0rC,wBAAA,WACE3tC,KAAKmmC,sBAAwBn0B,OAAOhS,KAAKmmC,sBACzC,IAAIsH,EAAWz7B,OAAOhS,KAAKkmC,qBAC3BqH,wBAAwBvtC,KAAK2tB,IAAK8f,GAClCjG,4BAA4BxnC,KAAK2tB,IAAK8f,IAGxCxH,EAAAhkC,UAAA2rC,kBAAA,SACEprB,EACAhV,GAEA,IAAIqgC,EAAQ3G,EAAY1kB,GACpBsrB,EAAQ5G,EAAY15B,GACxB,IACE,OAAOugC,2BAA2B/tC,KAAK2tB,IAAKkgB,EAAOC,WAEnDtH,OAAOtT,KAAK4a,GACZtH,OAAOtT,KAAK2a,KAIhB5H,EAAAhkC,UAAA+rC,eAAA,SACExrB,EACAhV,GAEA,IAAIqgC,EAAQ3G,EAAY1kB,GACpBsrB,EAAQ5G,EAAY15B,GACxB,IACE,OAAOygC,wBAAwBjuC,KAAK2tB,IAAKkgB,EAAOC,WAEhDtH,OAAOtT,KAAK4a,GACZtH,OAAOtT,KAAK2a,KAIhB5H,EAAAhkC,UAAAisC,gBAAA,SACE1rB,EACAhV,GAEA,IAAIqgC,EAAQ3G,EAAY1kB,GACpBsrB,EAAQ5G,EAAY15B,GACxB,IACE,OAAO2gC,yBAAyBnuC,KAAK2tB,IAAKkgB,EAAOC,WAEjDtH,OAAOtT,KAAK4a,GACZtH,OAAOtT,KAAK2a,KAIhB5H,EAAAhkC,UAAAmsC,gBAAA,SACE5rB,EACAhV,GAEA,IAAIqgC,EAAQ3G,EAAY1kB,GACpBsrB,EAAQ5G,EAAY15B,GACxB,IACE,OAAO6gC,yBAAyBruC,KAAK2tB,IAAKkgB,EAAOC,WAEjDtH,OAAOtT,KAAK4a,GACZtH,OAAOtT,KAAK2a,KAIhB5H,EAAAhkC,UAAAqsC,aAAA,SAAa9gC,GACX,IAAIy5B,EAAOC,EAAY15B,GACvB,IACE+gC,sBAAsBvuC,KAAK2tB,IAAKsZ,WAEhCT,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAAusC,kBAAA,SACEhsB,EACAisB,EACAC,EACAC,GAEA,IAAId,EAAQ3G,EAAY1kB,GACpBsrB,EAAQ5G,EAAYuH,GACpBG,EAAQ1H,EAAYwH,GACxB,IACE,OAAOG,2BAA2B7uC,KAAK2tB,IAAKkgB,EAAOC,EAAOc,EAAOD,WAEjEnI,OAAOtT,KAAK0b,GACZpI,OAAOtT,KAAK4a,GACZtH,OAAOtT,KAAK2a,KAIhB5H,EAAAhkC,UAAA6sC,eAAA,SACEtsB,EACAisB,EACAC,GAEA,IAAIb,EAAQ3G,EAAY1kB,GACpBsrB,EAAQ5G,EAAYuH,GACpBG,EAAQ1H,EAAYwH,GACxB,IACE,OAAOK,wBAAwB/uC,KAAK2tB,IAAKkgB,EAAOC,EAAOc,WAEvDpI,OAAOtT,KAAK0b,GACZpI,OAAOtT,KAAK4a,GACZtH,OAAOtT,KAAK2a,KAIhB5H,EAAAhkC,UAAA+sC,gBAAA,SACExsB,EACAisB,EACAC,GAEA,IAAIb,EAAQ3G,EAAY1kB,GACpBsrB,EAAQ5G,EAAYuH,GACpBG,EAAQ1H,EAAYwH,GACxB,IACE,OAAOO,yBAAyBjvC,KAAK2tB,IAAKkgB,EAAOC,EAAOc,WAExDpI,OAAOtT,KAAK0b,GACZpI,OAAOtT,KAAK4a,GACZtH,OAAOtT,KAAK2a,KAIhB5H,EAAAhkC,UAAAitC,gBAAA,SACE1sB,EACAisB,EACAC,EACAS,GAEA,IAAItB,EAAQ3G,EAAY1kB,GACpBsrB,EAAQ5G,EAAYuH,GACpBG,EAAQ1H,EAAYwH,GACxB,IACE,OAAOU,yBAAyBpvC,KAAK2tB,IAAKkgB,EAAOC,EAAOc,EAAOO,WAE/D3I,OAAOtT,KAAK0b,GACZpI,OAAOtT,KAAK4a,GACZtH,OAAOtT,KAAK2a,KAIhB5H,EAAAhkC,UAAAotC,aAAA,SAAa7sB,GACX,IAAIykB,EAAOC,EAAY1kB,GACvB,IACE8sB,sBAAsBtvC,KAAK2tB,IAAKsZ,WAEhCT,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAAstC,UAAA,SACEC,EACAC,EACAC,EACA7d,EACA5N,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIgjB,EAAOC,EAAYjjB,GACnBtd,EAAI+oC,EAAS9oC,OACb+oC,EAAO,IAAI75B,MAAanP,GACxBipC,EAAO,IAAI95B,MAAqBnP,GAChCkpC,EAAO,IAAI/5B,MAAanP,GACnBtG,EAAI,EAAGA,EAAIsG,IAAKtG,EAAG,CAC1B,IAAIylC,EAAS4J,EAASrvC,GAAGylC,OACrBC,EAAS2J,EAASrvC,GAAG0lC,OACzB4J,EAAKtvC,GAAKumC,EAAad,GACvB8J,EAAKvvC,GAAKwxB,GAAUgJ,EAAAiV,OAAOC,OACvB/vC,KAAK6nC,UAAUmI,QAAQjK,GAASkK,SAASlK,IACzC/lC,KAAKynC,UAAUuI,QAAQjK,IAC3B8J,EAAKxvC,GAAKylC,EAAOl/B,OAEnB,IAAIspC,EAAQ/I,EAAcwI,GACtBQ,EAAQhJ,EAAcyI,GACtBQ,EAAQjJ,EAAc0I,GAC1B,IACEQ,mBAAmBrwC,KAAK2tB,IAAK6hB,EAASC,EAASxI,EAAMiJ,EAAOC,EAAOC,EAAOzpC,WAE1E6/B,OAAOtT,KAAKkd,GACZ5J,OAAOtT,KAAKid,GACZ3J,OAAOtT,KAAKgd,GACZ,IAAS7vC,EAAIsG,EAAI,EAAGtG,GAAK,IAAKA,EAAGmmC,OAAOtT,KAAKyc,EAAKtvC,IAClDmmC,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAAquC,iBAAA,SAAiBC,GACf,IAAI5J,EAAOiC,EAAc2H,GACzB,IACEC,0BAA0BxwC,KAAK2tB,IAAKgZ,EAAM4J,EAAM3pC,gBAEhD4/B,OAAOtT,KAAKyT,KAIhBV,EAAAhkC,UAAAwuC,SAAA,SAASC,GACPC,kBAAkB3wC,KAAK2tB,IAAK+iB,IAG9BzK,EAAAhkC,UAAA2uC,iBAAA,WACE,OAAOC,6BAGT5K,EAAAhkC,UAAA6uC,iBAAA,SAAiBC,QAAA,IAAAA,MAAA,GACfC,0BAA0BD,IAG5B9K,EAAAhkC,UAAAgvC,eAAA,WACE,OAAOC,2BAGTjL,EAAAhkC,UAAAkvC,eAAA,SAAeJ,QAAA,IAAAA,MAAA,GACbK,wBAAwBL,IAG1B9K,EAAAhkC,UAAAovC,aAAA,SAAaC,QAAA,IAAAA,OAAA,GACXC,sBAAsBD,IAGxBrL,EAAAhkC,UAAAuvC,SAAA,SAASd,QAAA,IAAAA,MAAA,GACHA,EACFe,0BAA0Bf,EAAM1wC,KAAK2tB,KAErC+jB,wBAAwB1xC,KAAK2tB,MAIjCsY,EAAAhkC,UAAA0vC,UAAA,SAAUC,EAAkBlB,QAAA,IAAAA,MAAA,GAG1B,IAFA,IAAItE,EAAWwF,EAAOhrC,OAClB4C,EAAQ,IAAIsM,MAAas2B,GACpB/rC,EAAI,EAAGA,EAAI+rC,IAAY/rC,EAC9BmJ,EAAMnJ,GAAK6mC,EAAY0K,EAAOvxC,IAEhC,IAAIsmC,EAAOQ,EAAc39B,GACzB,IACMknC,EACFmB,2BAA2BnB,EAAM1wC,KAAK2tB,IAAKgZ,EAAMyF,GAEjD0F,yBAAyB9xC,KAAK2tB,IAAKgZ,EAAMyF,WAG3C5F,OAAOtT,KAAKyT,GACZ,IAAStmC,EAAI+rC,EAAU/rC,GAAK,IAAKA,EAAGmmC,OAAOtT,KAAK1pB,EAAMnJ,MAO1D4lC,EAAAhkC,UAAA8vC,qBAAA,SAAqB5rC,GAEnB,IAAI6rC,EAAwBnB,4BACxBoB,EAAsBf,0BACtBgB,EAAoBC,wBACxBnB,0BAA0B,GAC1BI,wBAAwB,GACxBG,uBAAsB,GAGtB,IAAIntC,EAAOguC,2BAA2BjsC,GAClCuqC,EAAO1wC,KAAKwtC,qBAAqBppC,EAAM,KAAM+B,GAC7CqD,EAAQxJ,KAAKqmC,sBACjB,IAAK78B,EAAO,CACV,IAAI5I,EAAOsmC,EAAY,cACvBlnC,KAAKomC,qBAAuBxlC,EAC5BZ,KAAKqmC,sBAAwB78B,EAAQ29B,GAAgBvmC,IAUvD,OARAixC,2BAA2BnB,EAAM1wC,KAAK2tB,IAAKnkB,EAAO,GAClDrD,EAAOksC,yBAAyB3B,GAChC1wC,KAAK2tC,0BAGLqD,0BAA0BgB,GAC1BZ,wBAAwBa,GACxBV,sBAAsBW,GACf/rC,GAGT8/B,EAAAhkC,UAAAqwC,SAAA,WACE,OAA4C,GAArCC,wBAAwBvyC,KAAK2tB,MAGtCsY,EAAAhkC,UAAAuwC,UAAA,WACEC,yBAAyBzyC,KAAK2tB,MAGhCsY,EAAAhkC,UAAAywC,SAAA,SAASC,GACP,IAAIjL,EAAM1nC,KAAKumC,cACXU,EAAOC,EAAYyL,GACnBC,EAAmB,EACnBC,EAAsB,EAC1B,IACEC,gCAAgCpL,EAAK1nC,KAAK2tB,IAAKsZ,GAC/C2L,EAAYG,EAAQrL,GACpB,IAAIsL,EAAcD,EAAQrL,EAAM,GAChCmL,EAAeE,EAAQrL,EAAM,GAC7B,IAAIuL,EAAM,IAAIC,EAGd,OAFAD,EAAIE,OAqhBV,SAAoB5J,EAAY3iC,GAE9B,IADA,IAAIqsC,EAAM,IAAIG,WAAWxsC,GAChBvG,EAAW,EAAGA,EAAIuG,IAAUvG,EACnC4yC,EAAI5yC,GAAKgzC,KAAS9J,EAAMlpC,GAE1B,OAAO4yC,EA1hBUK,CAAWV,EAAWI,GACnCC,EAAIziB,UAAY+iB,EAAWV,GACpBI,UAEHhM,GAAMT,OAAOtT,KAAK+T,GAClB2L,GAAWpM,OAAOtT,KAAK0f,GACvBC,GAAcrM,OAAOtT,KAAK2f,KAIlC5M,EAAAhkC,UAAAuxC,OAAA,WACE,MAAM,IAAIruB,MAAM,oBAGlB8gB,EAAAhkC,UAAAwxC,QAAA,WACE,MAAM,IAAItuB,MAAM,oBAGlB8gB,EAAAhkC,UAAAyxC,QAAA,WACE1hC,OAAOhS,KAAK2tB,KACZ6Y,OAAOtT,KAAKlzB,KAAKumC,eACjBC,OAAOtT,KAAKlzB,KAAKkmC,qBACjBM,OAAOtT,KAAKlzB,KAAKomC,sBACjBI,OAAOtT,KAAKlzB,KAAKqmC,uBACjBsN,uBAAuB3zC,KAAK2tB,KAC5B3tB,KAAK2tB,IAAM,GAGbsY,EAAAhkC,UAAA2xC,eAAA,WACE,OAAOC,EAASlyC,OAAO3B,OAGzBimC,EAAAhkC,UAAA6xC,gBAAA,SACE3tC,EACA4tC,EACAC,GAEA,QAHA,IAAAD,OAAA,QACA,IAAAC,MAAgBnzB,IAAI0Y,WAEhBya,EAAW,EAAG,OAAO,EAGzB,IAAIC,EACAC,EAEA,OALJF,GAAY,EAKAG,yBAAyBhuC,IACnC,KAAK6uB,EAAa6C,MAChB,OAAQua,2BAA2BjsC,IACjC,KAAKwpB,EAAWC,IACd,OAAO5vB,KAAKynC,UAAU2M,0BAA0BjuC,IAElD,KAAKwpB,EAAWE,IACd,OAAO7vB,KAAK6nC,UACVwM,6BAA6BluC,GAC7BmuC,8BAA8BnuC,IAGlC,KAAKwpB,EAAWG,IACd,OAAO9vB,KAAKioC,UAAUsM,0BAA0BpuC,IAElD,KAAKwpB,EAAWI,IACd,OAAO/vB,KAAKmoC,UAAUqM,0BAA0BruC,IAElD,QACE,MAAM,IAAIgf,MAAM,0BAItB,KAAK6P,EAAaC,SAChB,OAAO8T,kBAAkB/oC,KAAK2tB,IAC5B8mB,0BAA0BtuC,GAC1BisC,2BAA2BjsC,IAG/B,KAAK6uB,EAAaO,UAChB,IAAIxP,EAAa2uB,0BAA0BvuC,GAC3C,IAAK4f,EAAY,MACjB,OAAOojB,mBAAmBnpC,KAAK2tB,IAAK5H,EAAYqsB,2BAA2BjsC,IAE7E,KAAK6uB,EAAawE,KAChB,KAAMya,EAAUj0C,KAAK8zC,gBAAgBa,oBAAoBxuC,GAAO4tC,EAAeC,IAC7E,MAEF,OACEY,sBAAsBzuC,GAClByjC,oBAAoB5pC,KAAK2tB,IACvBknB,sBAAsB1uC,GACtB2uC,uBAAuB3uC,GACvBisC,2BAA2BjsC,GAC3B8tC,GAEFzK,cAAcxpC,KAAK2tB,IACjBknB,sBAAsB1uC,GACtB4uC,sBAAsB5uC,GAAQ,EAAI,EAClC2uC,uBAAuB3uC,GACvB6uC,sBAAsB7uC,GACtBisC,2BAA2BjsC,GAC3B8tC,GAIV,KAAKjf,EAAa0D,MAChB,KAAMub,EAAUj0C,KAAK8zC,gBAAgBmB,uBAAuB9uC,GAAO4tC,EAAeC,IAChF,MAEF,OAAOzL,eAAevoC,KAAK2tB,IAAKunB,oBAAoB/uC,GAAO8tC,GAE7D,KAAKjf,EAAaQ,OAChB,KAAMye,EAAUj0C,KAAK8zC,gBAAgBqB,uBAAuBhvC,GAAO4tC,EAAeC,IAChF,MAEF,KAAME,EAAUl0C,KAAK8zC,gBAAgBsB,wBAAwBjvC,GAAO4tC,EAAeC,IACjF,MAEF,OAAOvL,gBAAgBzoC,KAAK2tB,IAAK0nB,qBAAqBlvC,GAAO8tC,EAASC,GAG1E,OAAO,GAKTjO,EAAAhkC,UAAAqzC,iBAAA,SAAiB10C,GACf,IAAIqmC,EAAOC,EAAYtmC,GACvB,IACE,OAAO20C,oCAAoCv1C,KAAK2tB,IAAKsZ,WAErDT,OAAOtT,KAAK+T,KAIhBhB,EAAAhkC,UAAAuzC,iBAAA,SAAiBzoB,GACf,OAAOwmB,EAAWkC,oCAAoCz1C,KAAK2tB,IAAKZ,KAGlEkZ,EAAAhkC,UAAAyuB,iBAAA,SACEggB,EACAvqC,EACAuvC,EACAC,EACAC,GAEAC,kCAAkCnF,EAAMvqC,EAAMuvC,EAAWC,EAAYC,IAn3BvD3P,EAAA6P,kBAA2B,MAG3B7P,EAAA8P,kBAA2B,MAk3B7C9P,EA53BA,GAAavmC,EAAAumC,SAg4BbvmC,EAAAq1B,gBAAA,SAAgC5uB,GAC9B,OAAOguC,yBAAyBhuC,IAGlCzG,EAAAw5B,kBAAA,SAAkC/yB,GAChC,OAAOisC,2BAA2BjsC,IAGpCzG,EAAAo4B,iBAAA,SAAiC3xB,GAC/B,OAAOiuC,0BAA0BjuC,IAGnCzG,EAAAy5B,oBAAA,SAAoChzB,GAClC,OAAOkuC,6BAA6BluC,IAGtCzG,EAAAs2C,qBAAA,SAAqC7vC,GACnC,OAAOmuC,8BAA8BnuC,IAGvCzG,EAAA05B,iBAAA,SAAiCjzB,GAC/B,OAAOouC,0BAA0BpuC,IAGnCzG,EAAA25B,iBAAA,SAAiClzB,GAC/B,OAAOquC,0BAA0BruC,IAGnCzG,EAAAw1B,iBAAA,SAAiC/uB,GAC/B,OAAOsuC,0BAA0BtuC,IAGnCzG,EAAAu2C,iBAAA,SAAiC9vC,GAC/B,OAAO+vC,0BAA0B/vC,IAGnCzG,EAAA41B,iBAAA,SAAiCnvB,GAC/B,OAAOgwC,0BAA0BhwC,IAGnCzG,EAAA21B,WAAA,SAA2BlvB,GACzB,OAAOiwC,uBAAuBjwC,IAGhCzG,EAAA+1B,YAAA,SAA4BtvB,GAC1B,OAAOkvC,qBAAqBlvC,IAG9BzG,EAAAk4B,cAAA,SAA8BzxB,GAC5B,OAAOgvC,uBAAuBhvC,IAGhCzG,EAAAq4B,eAAA,SAA+B5xB,GAC7B,OAAOivC,wBAAwBjvC,IAGjCzG,EAAAi5B,WAAA,SAA2BxyB,GACzB,OAAO+uC,oBAAoB/uC,IAG7BzG,EAAA22C,cAAA,SAA8BlwC,GAC5B,OAAO8uC,uBAAuB9uC,IAGhCzG,EAAAg6B,aAAA,SAA6BvzB,GAC3B,OAAO0uC,sBAAsB1uC,IAG/BzG,EAAA42C,cAAA,SAA8BnwC,GAC5B,OAAO2uC,uBAAuB3uC,IAGhCzG,EAAA62C,WAAA,SAA2BpwC,GACzB,OAAOwuC,oBAAoBxuC,IAG7BzG,EAAAi6B,aAAA,SAA6BxzB,GAC3B,OAAO4uC,sBAAsB5uC,IAG/BzG,EAAA82C,cAAA,SAA8BrwC,GAC5B,OAAOswC,uBAAuBtwC,IAGhCzG,EAAAg3C,eAAA,SAA+BvwC,GAC7B,OAAOwwC,wBAAwBxwC,IAGjCzG,EAAAk3C,YAAA,SAA4BzwC,GAC1B,OAAO0wC,qBAAqB1wC,IAG9BzG,EAAAo3C,cAAA,SAA8B3wC,GAC5B,OAAO4wC,uBAAuB5wC,IAGhCzG,EAAAm6B,aAAA,SAA6B1zB,GAC3B,OAAOotC,EAAWyD,sBAAsB7wC,KAG1CzG,EAAAo6B,mBAAA,SAAmC3zB,GACjC,OAAO8wC,6BAA6B9wC,IAGtCzG,EAAAs6B,cAAA,SAA8B7zB,EAAqB4mB,GACjD,OAAOmqB,uBAAuB/wC,EAAM4mB,IAGtCrtB,EAAAy3C,eAAA,SAA+BhxC,GAC7B,OAAOixC,wBAAwBjxC,IAGjCzG,EAAAw6B,UAAA,SAA0B/zB,GACxB,OAAOkxC,qBAAqBlxC,IAG9BzG,EAAAy6B,WAAA,SAA2Bh0B,GACzB,OAAOmxC,sBAAsBnxC,IAG/BzG,EAAA63C,YAAA,SAA4BpxC,GAC1B,OAAOotC,EAAWiE,qBAAqBrxC,KAGzCzG,EAAA+3C,YAAA,SAA4BtxC,GAC1B,OAAOuxC,qBAAqBvxC,IAG9BzG,EAAAi4C,aAAA,SAA6BxxC,GAC3B,OAAOotC,EAAWqE,sBAAsBzxC,KAG1CzG,EAAAm4C,kBAAA,SAAkC1xC,GAChC,OAAO2xC,2BAA2B3xC,IAGpCzG,EAAA26B,cAAA,SAA8Bl0B,GAC5B,OAAO4xC,yBAAyB5xC,IAGlCzG,EAAA46B,cAAA,SAA8Bn0B,GAC5B,OAAO6xC,0BAA0B7xC,IAGnCzG,EAAAu4C,mBAAA,SAAmC9xC,GACjC,OAAO+xC,4BAA4B/xC,IAGrCzG,EAAAy4C,aAAA,SAA6BhyC,GAC3B,OAAOiyC,sBAAsBjyC,IAG/BzG,EAAA24C,eAAA,SAA+BlyC,GAC7B,OAAOmyC,wBAAwBnyC,IAGjCzG,EAAA86B,cAAA,SAA8Br0B,GAC5B,OAAOotC,EAAWgF,uBAAuBpyC,KAG3CzG,EAAA84C,UAAA,SAA0BryC,GACxB,OAAOsyC,mBAAmBtyC,IAG5BzG,EAAAg5C,oBAAA,SAAoCvyC,GAClC,OAAOwyC,4BAA4BxyC,IAGrCzG,EAAAk5C,eAAA,SAA+BzyC,EAAqB4mB,GAClD,OAAO8rB,wBAAwB1yC,EAAM4mB,IAGvCrtB,EAAAo5C,YAAA,SAA4B3yC,GAC1B,OAAOotC,EAAWwF,4BAA4B5yC,KAKhDzG,EAAAs5C,gBAAA,SAAgCtI,GAC9B,OAAO2B,yBAAyB3B,IAGlChxC,EAAAu5C,gBAAA,SAAgCvI,GAC9B,OAAO6C,EAAW2F,yBAAyBxI,KAG7ChxC,EAAAy5C,sBAAA,SAAsCzI,GACpC,OAAO0I,8BAA8B1I,IAGvChxC,EAAA25C,qBAAA,SAAqC3I,EAAmB3jB,GACtD,OAAOusB,0BAA0B5I,EAAM3jB,IAGzCrtB,EAAA65C,sBAAA,SAAsC7I,GACpC,OAAO8I,2BAA2B9I,IAGpC,IAAAmD,EAAA,WAYE,SAAAA,KA0BF,OAjCSA,EAAAlyC,OAAP,SAAchC,GACZ,IAAI85C,EAAW,IAAI5F,EAGnB,OAFA4F,EAAS95C,OAASA,EAClB85C,EAAS9rB,IAAM+rB,kBACRD,GAKT5F,EAAA5xC,UAAA03C,SAAA,SAASx/B,GACP,OAAOy/B,kBAAkB55C,KAAK2tB,IAAKxT,IAGrC05B,EAAA5xC,UAAA43C,UAAA,SAAUC,EAAwBC,EAAsB3vC,EAA8B+P,QAA9B,IAAA/P,MAAA,QAA8B,IAAA+P,MAAA,GACpF6/B,mBAAmBF,EAAMC,EAAI3vC,EAAW+P,IAG1C05B,EAAA5xC,UAAAg4C,mBAAA,SAAmB9/B,EAAqB/P,GACtC,OAAO8vC,4BAA4Bl6C,KAAK2tB,IAAKxT,EAAM/P,IAGrDypC,EAAA5xC,UAAAk4C,mBAAA,SAAmBL,EAAwBC,EAAsBK,EAAgBjgC,QAAA,IAAAA,MAAA,GAC/E,IAAIwsB,EAAOQ,EAAciT,GACzB,IACEC,4BAA4BP,EAAMC,EAAIpT,EAAMyT,EAAQxzC,OAAQuT,WAE5DqsB,OAAOtT,KAAKyT,KAIhBkN,EAAA5xC,UAAAq4C,iBAAA,SAAiBC,EAAyBC,GACxC,OAAOC,0BAA0Bz6C,KAAK2tB,IAAK4sB,EAAOC,EAAax6C,KAAKL,OAAOguB,MAE/EkmB,EAtCA,GAkFA,SAAAjN,EAAsB8T,GACpB,IAAKA,EAAK,OAAO,EAIjB,IAHA,IAAIC,EAAYD,EAAI9zC,OAChB2iC,EAAM/C,OAAOC,SAASkU,GACtBC,EAAMrR,EACDlpC,EAAI,EAAGA,EAAIs6C,IAAat6C,EAC/Bw6C,MAAUD,IAAOF,EAAIr6C,IAEvB,OAAOkpC,EAGT,SAAApC,EAAuB2T,GACrB,IAAKA,EAAM,OAAO,EAGlB,IAFA,IAAIvR,EAAM/C,OAAOC,SAASqU,EAAKl0C,QAAU,GACrCg0C,EAAMrR,EACDlpC,EAAI,EAAGsG,EAAIm0C,EAAKl0C,OAAQvG,EAAIsG,IAAKtG,EAAG,CAC3C,IAAI06C,EAAMD,EAAKz6C,GAEfw6C,MAAUD,EAAyB,IAAdG,GACrBF,MAAUD,EAAM,EAAKG,GAAS,EAAK,KACnCF,MAAUD,EAAM,EAAKG,GAAQ,GAAM,KACnCF,MAAUD,EAAM,EAAKG,IAAQ,IAC7BH,GAAO,EAET,OAAOrR,EAGT,SAAAX,EAAuBoS,GACrB,OAAO7T,EAAc6T,GA2BvB,SAAA9T,EAAqBpb,GACnB,GAAW,MAAPA,EAAa,OAAO,EAIxB,IAHA,IAAIyd,EAAM/C,OAAOC,SA1BnB,SAA0B3a,GAExB,IADA,IAAI5Q,EAAM,EACD7a,EAAI,EAAGsG,EAAImlB,EAAIllB,OAAQvG,EAAIsG,IAAKtG,EAAG,CAC1C,IAAI46C,EAAInvB,EAAI7Z,WAAW5R,GACnB46C,GAAK,OAAUA,GAAK,OAAU56C,EAAI,EAAIsG,IACxCs0C,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBnvB,EAAI7Z,aAAa5R,IAEpD46C,GAAK,MACL//B,EAEFA,GADS+/B,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAO//B,EAKmBggC,CAAiBpvB,GAAO,GAE9C8uB,EAAMrR,EACDlpC,EAAI,EAAGsG,EAAImlB,EAAIllB,OAAQvG,EAAIsG,IAAKtG,EAAG,CAC1C,IAAI46C,EAAInvB,EAAI7Z,WAAW5R,GACnB46C,GAAK,OAAUA,GAAK,OAAU56C,EAAI,EAAIsG,IACxCs0C,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBnvB,EAAI7Z,aAAa5R,IAEpD46C,GAAK,IACPJ,MAAUD,IAAOK,GACRA,GAAK,MACdJ,MAAUD,IAAQ,IAASK,IAAM,GACjCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,OACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,SACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,UACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,KAE3BJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAI/B,OADAJ,MAAUD,EAAK,GACRrR,EAGT,SAAAwJ,EAAiBxJ,GACf,OACG8J,KAAS9J,GACT8J,KAAS9J,EAAM,IAAO,EACtB8J,KAAS9J,EAAM,IAAM,GACrB8J,KAAS9J,EAAM,IAAM,GAY1B,SAAAgK,EAA2BhK,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEI4R,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAI1lC,MAIPqlC,EAAK9H,KAAS9J,MACR,IAAL4R,GAINC,EAAuB,GAAlB/H,KAAS9J,KACK,MAAT,IAAL4R,IAILE,EAAuB,GAAlBhI,KAAS9J,KACK,MAAT,IAAL4R,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlBjI,KAAS9J,KACK,MAAT,IAAL4R,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlBlI,KAAS9J,KAEZ4R,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAD/C,GAAlBlI,KAAS9J,OAKpBiS,EAAIjgC,KAAK4/B,IApBPK,EAAIjgC,MAAY,GAAL4/B,IAAY,EAAKC,IAL5BI,EAAIjgC,KAAK4/B,GAmCb,OAAOM,OAAOC,eAAeF,GAhPlB97C,EAAAm0C,WAqMbn0C,EAAA6zC,aA+CA,IAAAL,EAAA,WAKA,OALA,gBAAaxzC,EAAAwzC,4JCliDbyI,EAAAx7C,EAAA,KACAw7C,EAAAx7C,EAAA,KACAw7C,EAAAx7C,EAAA,KACAw7C,EAAAx7C,EAAA,oBCTA,IAAAy7C,EAGAA,EAAA,WACA,OAAA57C,KADA,GAIA,IAEA47C,KAAAxuB,SAAA,cAAAA,KAAA,EAAAyuB,MAAA,QACC,MAAAC,GAED,iBAAAC,SAAAH,EAAAG,QAOAp8C,EAAAD,QAAAk8C,iFCTA,IAAAv/B,EAAAlc,EAAA,IAOA,SAAkB67C,GAKhBA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAKAA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAEAA,IAAA,gBAKAA,IAAA,cAEAA,IAAA,cAKAA,IAAA,gBAxCF,CAAkBt8C,EAAAs8C,WAAAt8C,EAAAs8C,cA4ClB,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,sBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,yBArBF,CAAkBv8C,EAAAu8C,YAAAv8C,EAAAu8C,eAyBlB,IAAAv7B,EAAA,WAoBE,SAAAA,EAAY9d,EAAgBa,EAAkB20B,GAHtCp4B,KAAAk8C,mBAAkC,KAIxCl8C,KAAK4C,KAAOA,EACZ5C,KAAKyD,MAAQA,EACbzD,KAAKo4B,KAAOA,EACZp4B,KAAK26B,SAAgBwhB,KAAe/jB,EAAO,GAC3Cp4B,KAAKo8C,eAAiB,KACtBp8C,KAAKq8C,mBAAqB,KAC1Br8C,KAAKs8C,gBAAkBt8C,KA0V3B,OAtVEe,OAAAC,eAAI0f,EAAAze,UAAA,eAAJ,WACE,OAAQjC,KAAK4C,MACX,OAAkB,OAAO8d,EAAKC,GAC9B,OAAmB,OAAOD,EAAKE,IAC/B,QACA,OAAmB,OAAOF,EAAKG,IAC/B,QACA,OAAmB,OAAOH,EAAKI,IAC/B,OAAqB,OAAoB,IAAb9gB,KAAKo4B,KAAa1X,EAAK67B,QAAU77B,EAAK87B,QAClE,OAAkB,OAAO97B,EAAKM,GAC9B,OAAmB,OAAON,EAAKO,IAC/B,OAAmB,OAAOP,EAAKQ,IAC/B,OAAmB,OAAOR,EAAKS,IAC/B,OAAqB,OAAoB,IAAbnhB,KAAKo4B,KAAa1X,EAAK+7B,QAAU/7B,EAAKg8B,QAClE,QACA,QAAS,OAAOh8B,EAAKG,sCAKzBH,EAAAze,UAAA06C,yBAAA,SAAyBC,GACvB,OAAOA,EAAWxkB,KAAOp4B,KAAKo4B,MAIhC1X,EAAAze,UAAAg2B,wBAAA,SAAwB2kB,GACtB,IAAIxkB,EAAOp4B,KAAK4D,GAAE,GAAuB5D,KAAKo4B,KAAOp4B,KAAKo4B,KAAO,EACjE,OAAO,IAAQwkB,EAAWxkB,KAAOA,GAInC1X,EAAAze,UAAA2B,GAAA,SAAGH,GAA0B,OAAQzD,KAAKyD,MAAQA,IAAUA,GAE5Did,EAAAze,UAAA6B,MAAA,SAAML,GAA0B,OAA+B,IAAvBzD,KAAKyD,MAAQA,IAGrDid,EAAAze,UAAAuvB,QAAA,SAAQqrB,GACN7qC,OAAgB,GAAThS,KAAK4C,OAA2B5C,KAAKo8C,gBAC5C,IAAInJ,EAAM,IAAIvyB,EAAK1gB,KAAK4C,MAAmB,IAAb5C,KAAKyD,MAAwB,IAAwBzD,KAAKo4B,MAExF,OADA6a,EAAImJ,eAAiBS,EACd5J,GAITvyB,EAAAze,UAAA8uB,WAAA,SAAW5hB,GACT6C,OAAgB,GAAThS,KAAK4C,OAAyB5C,KAAKq8C,oBAC1C,IAAIpJ,EAAM,IAAIvyB,EAAK1gB,KAAK4C,MAAmB,IAAb5C,KAAKyD,MAAwB,IAAwBzD,KAAKo4B,MAExF,OADA6a,EAAIoJ,mBAAqBltC,EAClB8jC,GAITvyB,EAAAze,UAAA66C,WAAA,WASE,OARA9qC,OAAOhS,KAAK4D,GAAE,MACT5D,KAAKk8C,qBACRlqC,QAAQhS,KAAK4D,GAAE,MACf5D,KAAKk8C,mBAAqB,IAAIx7B,EAAK1gB,KAAK4C,KAAgB,IAAV5C,KAAKyD,MAA4BzD,KAAKo4B,MACpFp4B,KAAKk8C,mBAAmBI,gBAAkBt8C,KAC1CA,KAAKk8C,mBAAmBE,eAAiBp8C,KAAKo8C,eAC9Cp8C,KAAKk8C,mBAAmBG,mBAAqBr8C,KAAKq8C,oBAE7Cr8C,KAAKk8C,oBAIdx7B,EAAAze,UAAA2vB,eAAA,SAAeC,EAAckrB,GAC3B,IAAIC,EACAC,EACA1qB,EACA2qB,EACJ,QAL2B,IAAAH,OAAA,GAKvB/8C,KAAK4D,GAAE,MACT,GAAIiuB,EAAOjuB,GAAE,QACN5D,KAAK4D,GAAE,MAAwBiuB,EAAOjuB,GAAE,MAC3C,GAAIo5C,EAAeh9C,KAAKo8C,gBACtB,GAAIa,EAAcprB,EAAOuqB,eACvB,OAAOY,EAAaprB,eAAeqrB,QAEhC,IAAI1qB,EAAkBvyB,KAAKq8C,sBAC5Ba,EAAiBrrB,EAAOwqB,oBAC1B,OAAO9pB,EAAgBX,eAAesrB,QAKzC,IAAKrrB,EAAOjuB,GAAE,KACnB,GAAI5D,KAAK4D,GAAE,GACT,GAAIiuB,EAAOjuB,GAAE,IACX,IAAKm5C,GAAwB/8C,KAAK4D,GAAE,IAAsBiuB,EAAOjuB,GAAE,GACjE,OAAO5D,KAAKo4B,MAAQvG,EAAOuG,SAExB,IAAe,IAAXvG,EAAOjvB,KAChB,OAAO5C,KAAKo4B,MAAQ,GACf,GAAe,IAAXvG,EAAOjvB,KAChB,OAAO5C,KAAKo4B,MAAQ,QAEjB,GAAIp4B,KAAK4D,GAAE,IACZiuB,EAAOjuB,GAAE,GACX,OAAO5D,KAAKo4B,MAAQvG,EAAOuG,KAIjC,OAAO,GAIF1X,EAAAy8B,iBAAP,SAAwB91C,EAAYC,EAAa81C,GAC/C,OAAI91C,EAAMsqB,eAAevqB,EAAM+1C,GAA+B/1C,EACrDA,EAAKuqB,eAAetqB,EAAO81C,GAA+B91C,EAC5D,MAIToZ,EAAAze,UAAA4Y,SAAA,SAASwiC,GACP,QADO,IAAAA,OAAA,IACFA,GAAYr9C,KAAK4D,GAAE,KAAuB,CAC7C,IAAIw4C,EAAiBp8C,KAAKo8C,eAC1B,GAAIA,EACF,OAAOp8C,KAAK4D,GAAE,KACVw4C,EAAevhC,WAAa,UAC5BuhC,EAAevhC,WAErB,IAAIwhC,EAAqBr8C,KAAKq8C,mBAC9B,GAAIA,EACF,OAAOr8C,KAAK4D,GAAE,KACV,IAAMy4C,EAAmBxhC,UAAS,GAAQ,WAC1CwhC,EAAmBxhC,UAAS,GAElC7I,QAAO,GAET,OAAQhS,KAAK4C,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAASoP,QAAO,GAChB,QAAoB,MAAO,SAO/B0O,EAAAze,UAAAytB,aAAA,WACE,OAAQ1vB,KAAK4C,MACX,QAAS,OAAOyZ,EAAAsT,WAAWC,IAC3B,OACA,OAAmB,OAAOvT,EAAAsT,WAAWE,IACrC,OACA,OAAqB,OAAoB,IAAb7vB,KAAKo4B,KAAa/b,EAAAsT,WAAWE,IAAMxT,EAAAsT,WAAWC,IAC1E,QAAmB,OAAOvT,EAAAsT,WAAWG,IACrC,QAAmB,OAAOzT,EAAAsT,WAAWI,IACrC,QAAqB,OAAO1T,EAAAsT,WAAWub,OAK3CxqB,EAAAze,UAAAq7C,aAAA,SAAa39C,GACX,OAAQK,KAAK4C,MACX,QAAoBoP,QAAO,GAC3B,QAAS,OAAOrS,EAAO8nC,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAbznC,KAAKo4B,KAAY,OAAOz4B,EAAO8nC,UAAU,GAClE,OACA,OAAmB,OAAO9nC,EAAOkoC,UAAU,GAC3C,QAAmB,OAAOloC,EAAOsoC,UAAU,GAC3C,QAAmB,OAAOtoC,EAAOwoC,UAAU,KAK/CznB,EAAAze,UAAAs7C,YAAA,SAAY59C,GACV,OAAQK,KAAK4C,MACX,QAAoBoP,QAAO,GAC3B,QAAS,OAAOrS,EAAO8nC,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAbznC,KAAKo4B,KAAY,OAAOz4B,EAAO8nC,UAAU,GAClE,OACA,OAAmB,OAAO9nC,EAAOkoC,UAAU,GAC3C,QAAmB,OAAOloC,EAAOsoC,UAAU,GAC3C,QAAmB,OAAOtoC,EAAOwoC,UAAU,KAK/CznB,EAAAze,UAAAu7C,eAAA,SAAe79C,GACb,OAAQK,KAAK4C,MACX,QAAoBoP,QAAO,GAC3B,QAAS,OAAOrS,EAAO8nC,WAAW,GAClC,OACA,OAAqB,GAAiB,IAAbznC,KAAKo4B,KAAY,OAAOz4B,EAAO8nC,WAAW,GACnE,OACA,OAAmB,OAAO9nC,EAAOkoC,WAAW,GAAI,GAChD,QAAmB,OAAOloC,EAAOsoC,WAAW,GAC5C,QAAmB,OAAOtoC,EAAOwoC,WAAW,KAKhDznB,EAAAze,UAAA6uB,kBAAA,WACE,OAAQ9wB,KAAK4C,MACX,QAAS,MAAO,IAChB,OACA,OAAmB,MAAO,IAC1B,OACA,OAAqB,OAAoB,IAAb5C,KAAKo4B,KAAa,IAAM,IACpD,QAAmB,MAAO,IAC1B,QAAmB,MAAO,IAC1B,QAAoB,MAAO,MAOf1X,EAAAC,GAAY,IAAID,EAAI,EAClC,IAGmB,GAILA,EAAAE,IAAY,IAAIF,EAAI,EAClC,IAGkB,IAIJA,EAAAG,IAAY,IAAIH,EAAI,EAClC,IAEkB,IAIJA,EAAAI,IAAY,IAAIJ,EAAI,EAClC,IAGkB,IAIJA,EAAA87B,QAAgB,IAAI97B,EAAI,EACtC,IAGkB,IAIJA,EAAA67B,QAAgB,IAAI77B,EAAI,EACtC,IAIkB,IAIJA,EAAAM,GAAW,IAAIN,EAAI,EACjC,IAGmB,GAILA,EAAAO,IAAY,IAAIP,EAAI,EAClC,IAGkB,IAIJA,EAAAQ,IAAY,IAAIR,EAAI,EAClC,IAEkB,IAIJA,EAAAS,IAAY,IAAIT,EAAI,EAClC,IAGkB,IAIJA,EAAAg8B,QAAgB,IAAIh8B,EAAI,EACtC,IAGkB,IAIJA,EAAA+7B,QAAgB,IAAI/7B,EAAI,EACtC,IAIkB,IAIJA,EAAAW,KAAa,IAAIX,EAAI,GACnC,IAGmB,GAILA,EAAAY,IAAY,IAAIZ,EAAI,GAClC,IAEkB,IAIJA,EAAAa,IAAY,IAAIb,EAAI,GAClC,IAGkB,IAIJA,EAAAc,KAAa,IAAId,EAAI,KAAgC,GACvEA,EArXA,GAAahhB,EAAAghB,OAwXbhhB,EAAA+9C,mBAAA,SAAmCC,GAGjC,IAFA,IAAIC,EAAWD,EAAM92C,OACjBqsC,EAAM,IAAIn9B,MAAkB6nC,GACvBt9C,EAAI,EAAGA,EAAIs9C,IAAYt9C,EAAG4yC,EAAI5yC,GAAKq9C,EAAMr9C,GAAGqvB,eACrD,OAAOujB,GAITvzC,EAAAk+C,cAAA,SAA8BF,GAC5B,IAAIC,EAAWD,EAAM92C,OACrB,IAAK+2C,EAAU,MAAO,GAEtB,IADA,IAAIriC,EAAK,IAAIxF,MAAc6nC,GAClBt9C,EAAI,EAAGA,EAAIs9C,IAAYt9C,EAAGib,EAAGjb,GAAKq9C,EAAMr9C,GAAGwa,WACpD,OAAOS,EAAGE,KAAK,MAIjB,IAAAqiC,EAAA,WAoBE,SAAAA,EACE7uB,EACA7pB,EACAspB,QAFA,IAAAO,MAAA,WACA,IAAA7pB,MAAA,WACA,IAAAspB,MAAA,MARFzuB,KAAA89C,qBAA8C,KAU5C99C,KAAKgvB,eAAiBA,MACtBhvB,KAAK+9C,eAAiB,KACtB/9C,KAAKg+C,mBAAqB,EAC1Bh+C,KAAKmF,WAAaA,GAA0Bub,EAAKc,KACjDxhB,KAAKyuB,SAAWA,EAChBzuB,KAAKi+C,SAAU,EACfj+C,KAAKoE,KAAOsc,EAAKQ,IAAI6P,WAAW/wB,MA8FpC,OA1FE69C,EAAA57C,UAAAktB,iBAAA,SAAiBpC,GACf,IAAIgxB,EAAiB/9C,KAAK+9C,eAC1B,OAAOA,GAAkBA,EAAen3C,OAASmmB,EAC7CgxB,EAAehxB,GACfmxB,EAAwBnxB,IAI9B8wB,EAAA57C,UAAA2vB,eAAA,SAAeC,GAIb,IAAIssB,EAAen+C,KAAKyuB,SACpB2vB,EAAiBvsB,EAAOpD,SAC5B,GAAI0vB,GACF,IAAMC,IAAkBD,EAAavsB,eAAewsB,GAAkB,OAAO,OACxE,GAAIA,EACT,OAAO,EAIT,GAAIp+C,KAAKi+C,SAAWpsB,EAAOosB,QAAS,OAAO,EAG3C,IAAII,EAAqBr+C,KAAKgvB,eAC1BsvB,EAAuBzsB,EAAO7C,eAC9BuvB,EAAgBF,EAAmBz3C,OACvC,GAAI23C,GAAiBD,EAAqB13C,OAAQ,OAAO,EACzD,IAAK,IAAIvG,EAAI,EAAGA,EAAIk+C,IAAiBl+C,EAAG,CACtC,IAAIm+C,EAAoBH,EAAmBh+C,GACvCo+C,EAAsBH,EAAqBj+C,GAC/C,IAAKm+C,EAAkB5sB,eAAe6sB,GAAsB,OAAO,EAIrE,IAAIC,EAAiB1+C,KAAKmF,WACtBw5C,EAAmB9sB,EAAO1sB,WAC9B,OAAOu5C,GAAkBC,GAAoBD,EAAe9sB,eAAe+sB,IAItEd,EAAAe,oBAAP,SAA2B5vB,EAA+B7pB,EAAkBspB,QAAA,IAAAA,MAAA,MAC1E,IAAInT,KAEJ,GADImT,GAAUnT,EAAGC,KAAKkT,EAASqC,qBAC3B9B,EACF,IAAK,IAAI3uB,EAAI,EAAGsG,EAAIqoB,EAAepoB,OAAQvG,EAAIsG,IAAKtG,EAAGib,EAAGC,KAAKyT,EAAe3uB,GAAGywB,qBAGnF,OADAxV,EAAGC,KAAKpW,EAAW2rB,qBACZxV,EAAGE,KAAK,KAIjBqiC,EAAA57C,UAAA6uB,kBAAA,WACE,OAAO+sB,EAAUe,oBAAoB5+C,KAAKgvB,eAAgBhvB,KAAKmF,WAAYnF,KAAKyuB,WAIlFovB,EAAA57C,UAAA4Y,SAAA,SAASgkC,QAAA,IAAAA,OAAA,GACP,IAAIvjC,EAAK,IAAIxF,MACbwF,EAAGC,KAAK,KACR,IAAIwR,EAAQ,EACR0B,EAAWzuB,KAAKyuB,SAChBA,GACEowB,IACFvjC,EAAGC,KAAK,UACRD,EAAGC,KAAKkT,EAAS5T,YACjBkS,EAAQ,GAGZ,IAAI7nB,EAAalF,KAAKgvB,eAClBuvB,EAAgBr5C,EAAW0B,OAC/B,GAAI23C,EAKF,IAJA,IAAI/0C,EAAQxJ,KAAK+9C,eACb3R,EAAW5iC,EAAQA,EAAM5C,OAAS,EAClCk4C,EAAgB9+C,KAAKg+C,mBACrBe,EAAY/+C,KAAKi+C,QAAUM,EAAgB,GAAK,EAC3Cl+C,EAAI,EAAGA,EAAIk+C,IAAiBl+C,IAAK0sB,EACpCA,GAAOzR,EAAGC,KAAK,MACflb,GAAK0+C,GAAWzjC,EAAGC,KAAK,OACxBlb,EAAI+rC,EAAU9wB,EAAGC,KAAgB/R,EAAOnJ,IACvCib,EAAGC,KAAK2iC,EAAwB79C,IACjCA,GAAKy+C,GAAiBz+C,GAAK0+C,EAAWzjC,EAAGC,KAAK,OAC7CD,EAAGC,KAAK,MACbD,EAAGC,KAAKrW,EAAW7E,GAAGwa,YAK1B,OAFAS,EAAGC,KAAK,SACRD,EAAGC,KAAKvb,KAAKmF,WAAW0V,YACjBS,EAAGE,KAAK,KAEnBqiC,EA7HA,GAAan+C,EAAAm+C,YAkIb,IAAImB,EAA+C,KAGnD,SAAAd,EAAwCnxB,GACjCiyB,IAA6BA,MAClC,IAAK,IAAI3+C,EAAI2+C,EAA4Bp4C,OAAQvG,GAAK0sB,IAAS1sB,EAC7D2+C,EAA4BzjC,KAAK,OAASlb,EAAEwa,SAAS,KAEvD,OAAOmkC,EAA4BjyB,EAAQ,GAL7CrtB,EAAAw+C,gbC3lBA,IAuBY37C,EAwIA08C,EA/JZ/iC,EAAA/b,EAAA,GAMAic,EAAAjc,EAAA,GAKAuC,EAAAvC,EAAA,GA0JA,SAAA++C,EAAiCn5C,GAE/B,OADAiM,OAAOjM,EAAKa,QACJb,EAAKkM,WAAW,IACtB,QACE,OAAQlM,GACN,IAAK,WAAY,OAAOxD,EAAM+lB,SAC9B,IAAK,KAAM,OAAO/lB,EAAM48C,GACxB,IAAK,QAAS,OAAO58C,EAAM68C,MAC3B,IAAK,QAAS,OAAO78C,EAAM88C,MAE7B,MAEF,QACE,OAAQt5C,GACN,IAAK,QAAS,OAAOxD,EAAMuU,MAE7B,MAEF,QACE,OAAQ/Q,GACN,IAAK,OAAQ,OAAOxD,EAAM+8C,KAC1B,IAAK,QAAS,OAAO/8C,EAAMg9C,MAC3B,IAAK,QAAS,OAAOh9C,EAAMoR,MAC3B,IAAK,WAAY,OAAOpR,EAAMwU,SAC9B,IAAK,QAAS,OAAOxU,EAAMkpB,MAC3B,IAAK,cAAe,OAAOlpB,EAAMsR,YAEnC,MAEF,SACE,OAAQ9N,GACN,IAAK,WAAY,OAAOxD,EAAMi9C,SAC9B,IAAK,UAAW,OAAOj9C,EAAMk9C,QAC7B,IAAK,UAAW,OAAOl9C,EAAMm9C,QAC7B,IAAK,SAAU,OAAOn9C,EAAMo9C,OAC5B,IAAK,KAAM,OAAOp9C,EAAMyU,GAE1B,MAEF,SACE,OAAQjR,GACN,IAAK,OAAQ,OAAOxD,EAAMq9C,KAC1B,IAAK,OAAQ,OAAOr9C,EAAM6pB,KAC1B,IAAK,SAAU,OAAO7pB,EAAMgU,OAC5B,IAAK,UAAW,OAAOhU,EAAMs9C,QAE/B,MAEF,SACE,OAAQ95C,GACN,IAAK,QAAS,OAAOxD,EAAMS,MAC3B,IAAK,UAAW,OAAOT,EAAMu9C,QAC7B,IAAK,MAAO,OAAOv9C,EAAMkV,IACzB,IAAK,OAAQ,OAAOlV,EAAMw9C,KAC1B,IAAK,WAAY,OAAOx9C,EAAMwR,SAEhC,MAEF,SACE,OAAQhO,GACN,IAAK,MAAO,OAAOxD,EAAMslB,IAE3B,MAEF,SACE,OAAQ9hB,GACN,IAAK,KAAM,OAAOxD,EAAMmV,GACxB,IAAK,aAAc,OAAOnV,EAAMy9C,WAChC,IAAK,SAAU,OAAOz9C,EAAMqV,OAC5B,IAAK,KAAM,OAAOrV,EAAM09C,GACxB,IAAK,aAAc,OAAO19C,EAAMyR,WAChC,IAAK,YAAa,OAAOzR,EAAM6vB,UAC/B,IAAK,KAAM,OAAO7vB,EAAM29C,GAE1B,MAEF,SACE,OAAQn6C,GACN,IAAK,QAAS,OAAOxD,EAAM49C,MAE7B,MAEF,SACE,OAAQp6C,GACN,IAAK,MAAO,OAAOxD,EAAM69C,IAE3B,MAEF,SACE,OAAQr6C,GACN,IAAK,SAAU,OAAOxD,EAAM89C,OAE9B,MAEF,SACE,OAAQt6C,GACN,IAAK,YAAa,OAAOxD,EAAM4pB,UAC/B,IAAK,MAAO,OAAO5pB,EAAM2R,IACzB,IAAK,OAAQ,OAAO3R,EAAMO,KAE5B,MAEF,SACE,OAAQiD,GACN,IAAK,KAAM,OAAOxD,EAAM+9C,GAE1B,MAEF,SACE,OAAQv6C,GACN,IAAK,UAAW,OAAOxD,EAAMg+C,QAC7B,IAAK,UAAW,OAAOh+C,EAAMi+C,QAC7B,IAAK,YAAa,OAAOj+C,EAAMk+C,UAC/B,IAAK,SAAU,OAAOl+C,EAAMm+C,OAE9B,MAEF,SACE,OAAQ36C,GACN,IAAK,WAAY,OAAOxD,EAAM8lB,SAC9B,IAAK,SAAU,OAAO9lB,EAAMuV,OAE9B,MAEF,SACE,OAAQ/R,GACN,IAAK,MAAO,OAAOxD,EAAMulB,IACzB,IAAK,SAAU,OAAOvlB,EAAMmU,OAC5B,IAAK,QAAS,OAAOnU,EAAMiS,MAC3B,IAAK,SAAU,OAAOjS,EAAMyV,OAE9B,MAEF,SACE,OAAQjS,GACN,IAAK,OAAQ,OAAOxD,EAAMkS,KAC1B,IAAK,QAAS,OAAOlS,EAAM0V,MAC3B,IAAK,OAAQ,OAAO1V,EAAMQ,KAC1B,IAAK,MAAO,OAAOR,EAAM2V,IACzB,IAAK,OAAQ,OAAO3V,EAAMiP,KAC1B,IAAK,SAAU,OAAOjP,EAAMo+C,OAE9B,MAEF,SACE,OAAQ56C,GACN,IAAK,MAAO,OAAOxD,EAAMq+C,IACzB,IAAK,OAAQ,OAAOr+C,EAAM8V,KAE5B,MAEF,SACE,OAAQtS,GACN,IAAK,QAAS,OAAOxD,EAAM+V,MAC3B,IAAK,OAAQ,OAAO/V,EAAMs+C,KAE5B,MAEF,SACE,OAAQ96C,GACN,IAAK,QAAS,OAAOxD,EAAMu+C,OAKjC,OAAOv+C,EAAMoc,QAGf,SAAAoiC,EAAsCC,GACpC,OAAQA,GACN,KAAKz+C,EAAM+lB,SACX,KAAK/lB,EAAM48C,GACX,KAAK58C,EAAMsR,YACX,KAAKtR,EAAMk9C,QACX,KAAKl9C,EAAMo9C,OACX,KAAKp9C,EAAMw9C,KACX,KAAKx9C,EAAMkV,IACX,KAAKlV,EAAMslB,IACX,KAAKtlB,EAAM29C,GACX,KAAK39C,EAAM49C,MACX,KAAK59C,EAAM89C,OACX,KAAK99C,EAAM4pB,UACX,KAAK5pB,EAAM8lB,SACX,KAAK9lB,EAAMulB,IACX,KAAKvlB,EAAMiP,KAAM,OAAO,EACxB,QAAS,OAAO,IAvUpB,SAAYjP,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,2BArIF,CAAYA,EAAA7C,EAAA6C,QAAA7C,EAAA6C,WAwIZ,SAAY08C,GACVA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBAHF,CAAYA,EAAAv/C,EAAAu/C,qBAAAv/C,EAAAu/C,wBAMZv/C,EAAAw/C,mBAwKAx/C,EAAAqhD,wBAqBArhD,EAAAuhD,sBAAA,SAAsCD,GACpC,OAAQA,GACN,KAAKz+C,EAAMo9C,OAAQ,MAAO,SAC1B,KAAKp9C,EAAM09C,GAAI,MAAO,KACtB,KAAK19C,EAAMyR,WAAY,MAAO,aAC9B,KAAKzR,EAAM2R,IAAK,MAAO,MACvB,KAAK3R,EAAMo+C,OAAQ,MAAO,SAC1B,KAAKp+C,EAAM8V,KAAM,MAAO,OACxB,KAAK9V,EAAMu+C,MAAO,MAAO,QACzB,KAAKv+C,EAAM2+C,YAAa,MAAO,MAC/B,KAAK3+C,EAAMqR,MAAO,MAAO,IACzB,KAAKrR,EAAM4+C,SAAU,MAAO,IAC5B,KAAK5+C,EAAM6+C,YAAa,MAAO,IAC/B,KAAK7+C,EAAM8+C,gBAAiB,MAAO,KACnC,KAAK9+C,EAAM++C,mBAAoB,MAAO,KACtC,KAAK/+C,EAAMg/C,cAAe,MAAO,KACjC,KAAKh/C,EAAMi/C,mBAAoB,MAAO,KACtC,KAAKj/C,EAAMk/C,qBAAsB,MAAO,MACxC,KAAKl/C,EAAMm/C,0BAA2B,MAAO,MAC7C,KAAKn/C,EAAM4b,KAAM,MAAO,IACxB,KAAK5b,EAAM8b,MAAO,MAAO,IACzB,KAAK9b,EAAMo/C,kBAAmB,MAAO,KACrC,KAAKp/C,EAAMq/C,SAAU,MAAO,IAC5B,KAAKr/C,EAAMs/C,MAAO,MAAO,IACzB,KAAKt/C,EAAMu/C,QAAS,MAAO,IAC3B,KAAKv/C,EAAMw/C,UAAW,MAAO,KAC7B,KAAKx/C,EAAMy/C,YAAa,MAAO,KAC/B,KAAKz/C,EAAM0/C,kBAAmB,MAAO,KACrC,KAAK1/C,EAAM2/C,wBAAyB,MAAO,KAC3C,KAAK3/C,EAAM4/C,oCAAqC,MAAO,MACvD,KAAK5/C,EAAM6/C,UAAW,MAAO,IAC7B,KAAK7/C,EAAM8/C,IAAK,MAAO,IACvB,KAAK9/C,EAAM+/C,MAAO,MAAO,IACzB,KAAK//C,EAAMggD,YAAa,MAAO,IAC/B,KAAKhgD,EAAMigD,MAAO,MAAO,IACzB,KAAKjgD,EAAMkgD,oBAAqB,MAAO,KACvC,KAAKlgD,EAAMmgD,QAAS,MAAO,KAC3B,KAAKngD,EAAMogD,OAAQ,MAAO,IAC1B,KAAKpgD,EAAMqgD,YAAa,MAAO,KAC/B,KAAKrgD,EAAMsgD,aAAc,MAAO,KAChC,KAAKtgD,EAAMugD,gBAAiB,MAAO,KACnC,KAAKvgD,EAAMwgD,yBAA0B,MAAO,MAC5C,KAAKxgD,EAAMygD,aAAc,MAAO,KAChC,KAAKzgD,EAAM0gD,eAAgB,MAAO,KAClC,KAAK1gD,EAAM2gD,yBAA0B,MAAO,MAC5C,KAAK3gD,EAAM4gD,+BAAgC,MAAO,MAClD,KAAK5gD,EAAM6gD,2CAA4C,MAAO,OAC9D,KAAK7gD,EAAM8gD,iBAAkB,MAAO,KACpC,KAAK9gD,EAAM+gD,WAAY,MAAO,KAC9B,KAAK/gD,EAAMghD,aAAc,MAAO,KAChC,QAEE,OADAvxC,QAAO,GACA,KAKb,IAAAxP,EAAA,WAUE,SAAAA,EAAY4K,EAAgB+N,EAAYC,GA4CxCpb,KAAA2wB,aAAsB,EA3CpB3wB,KAAKoN,OAASA,EACdpN,KAAKmb,MAAQA,EACbnb,KAAKob,IAAMA,EA0Cf,OAvCS5Y,EAAAgZ,KAAP,SAAYgoC,EAAUC,GACpB,GAAID,EAAEp2C,QAAUq2C,EAAEr2C,OAAQ,MAAM,IAAI+X,MAAM,mBAC1C,OAAO,IAAI3iB,EAAMghD,EAAEp2C,OACjBo2C,EAAEroC,MAAQsoC,EAAEtoC,MAAQqoC,EAAEroC,MAAQsoC,EAAEtoC,MAChCqoC,EAAEpoC,IAAMqoC,EAAEroC,IAAMooC,EAAEpoC,IAAMqoC,EAAEroC,MAI9Bra,OAAAC,eAAIwB,EAAAP,UAAA,eAAJ,WACE,OAAO,IAAIO,EAAMxC,KAAKoN,OAAQpN,KAAKmb,MAAOnb,KAAKmb,wCAEjDpa,OAAAC,eAAIwB,EAAAP,UAAA,aAAJ,WACE,OAAO,IAAIO,EAAMxC,KAAKoN,OAAQpN,KAAKob,IAAKpb,KAAKob,sCAG/Cra,OAAAC,eAAIwB,EAAAP,UAAA,YAAJ,WAGE,IAFA,IAAI8D,EAAO/F,KAAKoN,OAAOrH,KACnB+U,EAAO,EACFrF,EAAMzV,KAAKmb,MAAO1F,GAAO,IAAKA,EACb,IAApB1P,EAAKkM,WAAWwD,IAA2BqF,IAEjD,OAAOA,mCAGT/Z,OAAAC,eAAIwB,EAAAP,UAAA,cAAJ,WAGE,IAFA,IAAI8D,EAAO/F,KAAKoN,OAAOrH,KACnBgV,EAAS,EACJtF,EAAMzV,KAAKmb,MAAQ,EAAG1F,GAAO,GACZ,IAApB1P,EAAKkM,WAAWwD,KADqBA,IAEvCsF,EAEJ,OAAOA,mCAGTvY,EAAAP,UAAA4Y,SAAA,WACE,OAAO7a,KAAKoN,OAAOrH,KAAK8P,UAAU7V,KAAKmb,MAAOnb,KAAKob,MAIvD5Y,EAvDA,GAAa9C,EAAA8C,QA+Db,IAAAkhD,EAAA,SAAAtyC,GAgBE,SAAAsyC,EAAYt2C,EAAgBwO,QAAA,IAAAA,MAAA,MAA5B,IAAAtK,EACEF,EAAA5Q,KAAAR,KAAM4b,IAAY5b,KAdpBsR,EAAA8J,IAAW,EAEX9J,EAAAmE,IAAW,EACXnE,EAAA0vC,OAAgB,EAChB1vC,EAAAqyC,SAAgB,EAEhBryC,EAAAsyC,WAAoB,EACpBtyC,EAAAuyC,aAAoB,EACpBvyC,EAAAwyC,oBAA2B,EAE3BxyC,EAAAyyC,UAAmC,KAKjCzyC,EAAKlE,OAASA,EACdkE,EAAKmE,IAAM,EACXnE,EAAK8J,IAAMhO,EAAOrH,KAAKa,OACvB0K,EAAKsK,YAAcA,GAA4B,IAAI9F,MAEnD,IAAI/P,EAAOqH,EAAOrH,KAWlB,GAPEuL,EAAKmE,IAAMnE,EAAK8J,KACS,OAAzBrV,EAAKkM,WAAWX,EAAKmE,QAEnBnE,EAAKmE,IAKPnE,EAAKmE,IAAM,EAAInE,EAAK8J,KACK,IAAzBrV,EAAKkM,WAAWX,EAAKmE,MACQ,IAA7B1P,EAAKkM,WAAWX,EAAKmE,IAAM,GAG3B,IADAnE,EAAKmE,KAAO,EAEVnE,EAAKmE,IAAMnE,EAAK8J,KACS,IAAzBrV,EAAKkM,WAAWX,EAAKmE,QAEnBnE,EAAKmE,aAiiCf,OA7kC+BpE,EAAAqyC,EAAAtyC,GAkD7BsyC,EAAAzhD,UAAA4hB,KAAA,SAAKmgC,GAEH,YAFG,IAAAA,MAAyC/E,EAAmBS,SAC/D1/C,KAAK4jD,WAAa,EACX5jD,KAAKghD,MAAQhhD,KAAKikD,WAAWD,IAG9BN,EAAAzhD,UAAAgiD,WAAR,SACED,EACAE,QADA,IAAAF,MAAyC/E,EAAmBS,cAC5D,IAAAwE,MAAsBrjC,IAAI0Y,WAG1B,IADA,IAAIxzB,EAAO/F,KAAKoN,OAAOrH,KAChB/F,KAAKyV,IAAMzV,KAAKob,KAAK,CAC1Bpb,KAAK2jD,SAAW3jD,KAAKyV,IACrB,IAAI/U,EAAIqF,EAAKkM,WAAWjS,KAAKyV,KAC7B,OAAQ/U,GACN,QACE,OACIV,KAAKyV,IAAMzV,KAAKob,KACO,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,MACpB,MAGL,QACA,OACA,QACA,QACA,UACIzV,KAAKyV,IACP,MAEF,QAEE,QADEzV,KAAKyV,IAELyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,KACb,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,QAEnBzV,KAAKyV,IAELyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,KACb,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,QAEnBzV,KAAKyV,IACAlT,EAAMm/C,2BAERn/C,EAAMi/C,oBAERj/C,EAAMggD,YAEf,QACA,QACA,QACE,OAAOhgD,EAAM4hD,cAEf,QAEE,QADEnkD,KAAKyV,IAELyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,KACb,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,QAEnBzV,KAAKyV,IACAlT,EAAM0gD,gBAER1gD,EAAMu/C,QAEf,QAEE,KADE9hD,KAAKyV,IACHyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,IAAK,CAC7C,GAA6B,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IACAlT,EAAMkgD,oBAEf,GAA6B,IAAzB18C,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IACAlT,EAAM8gD,iBAGjB,OAAO9gD,EAAM6/C,UAEf,QAEE,QADEpiD,KAAKyV,IACAlT,EAAM6hD,UAEf,QAEE,QADEpkD,KAAKyV,IACAlT,EAAM8hD,WAEf,QAEE,KADErkD,KAAKyV,IACHyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,IAAK,CAC7C,GAA6B,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IACAlT,EAAMugD,gBAEf,GAA6B,IAAzB/8C,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IAELyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,KACb,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,QAEnBzV,KAAKyV,IACAlT,EAAMwgD,0BAERxgD,EAAMo/C,kBAGjB,OAAOp/C,EAAMq/C,SAEf,QAEE,KADE5hD,KAAKyV,IACHyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,IAAK,CAC7C,GAA6B,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IACAlT,EAAMw/C,UAEf,GAA6B,IAAzBh8C,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IACAlT,EAAMqgD,YAGjB,OAAOrgD,EAAM4b,KAEf,QAEE,QADEne,KAAKyV,IACAlT,EAAMqR,MAEf,QAEE,KADE5T,KAAKyV,IACHyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,IAAK,CAC7C,GAA6B,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IACAlT,EAAMy/C,YAEf,GAA6B,IAAzBj8C,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IACAlT,EAAMsgD,aAGjB,OAAOtgD,EAAM8b,MAEf,QAEE,KADEre,KAAKyV,IACHyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,IAAK,CAC7C,GAAI1Y,EAAA4hD,eAAev+C,EAAKkM,WAAWjS,KAAKyV,MAEtC,QADEzV,KAAKyV,IACAlT,EAAMgiD,aAEf,GACEL,EAAiB,GAAKlkD,KAAKyV,IAAM,EAAIzV,KAAKob,KACjB,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,MACQ,IAA7B1P,EAAKkM,WAAWjS,KAAKyV,IAAM,GAG3B,OADAzV,KAAKyV,KAAO,EACLlT,EAAM2+C,YAGjB,OAAO3+C,EAAMiiD,IAEf,QACE,IAAIC,EAAkBzkD,KAAKyV,IAE3B,KADEzV,KAAKyV,IACHyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,IAAK,CAC7C,GAA6B,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,KAAwB,CAC/C,IAAIvP,EAAckW,EAAAnJ,YAAYyxC,KAQ9B,IANE1kD,KAAKyV,IAAM,EAAIzV,KAAKob,KACS,IAA7BrV,EAAKkM,WAAWjS,KAAKyV,IAAM,OAEzBzV,KAAKyV,IACPvP,EAAckW,EAAAnJ,YAAY0xC,UAEnB3kD,KAAKyV,IAAMzV,KAAKob,KACvB,GAA6B,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,KAA2B,GAChDzV,KAAKyV,IACP,MAGAzV,KAAK+jD,WACP/jD,KAAK+jD,UACH79C,EACAH,EAAK8P,UAAU4uC,EAAiBzkD,KAAKyV,KACrCzV,KAAKmE,MAAMsgD,EAAiBzkD,KAAKyV,MAGrC,MAEF,GAA6B,IAAzB1P,EAAKkM,WAAWjS,KAAKyV,KAA2B,CAElD,IADA,IAAImvC,GAAS,IACJ5kD,KAAKyV,IAAMzV,KAAKob,KAEvB,GACG,KAFH1a,EAAIqF,EAAKkM,WAAWjS,KAAKyV,OAGvBzV,KAAKyV,IAAM,EAAIzV,KAAKob,KACS,IAA7BrV,EAAKkM,WAAWjS,KAAKyV,IAAM,GAC3B,CACAzV,KAAKyV,KAAO,EACZmvC,GAAS,EACT,MAGCA,EAKM5kD,KAAK+jD,WACd/jD,KAAK+jD,UACH3nC,EAAAnJ,YAAY6B,MACZ/O,EAAK8P,UAAU4uC,EAAiBzkD,KAAKyV,KACrCzV,KAAKmE,MAAMsgD,EAAiBzkD,KAAKyV,MARnCzV,KAAKgc,MACHE,EAAAnC,eAAe8qC,YACf7kD,KAAKmE,MAAMnE,KAAKyV,KAAM,MAS1B,MAEF,GAA6B,IAAzB1P,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IACAlT,EAAMygD,aAGjB,OAAOzgD,EAAMs/C,MAEf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,OAAO7hD,KAAK8kD,cACRviD,EAAMwiD,eACNxiD,EAAMgiD,aAEZ,QAEE,QADEvkD,KAAKyV,IACAlT,EAAMyiD,MAEf,QAEE,QADEhlD,KAAKyV,IACAlT,EAAM0iD,UAEf,QAEE,KADEjlD,KAAKyV,IACHyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,IAAK,CAC7C,GAA6B,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IAELyuC,EAAiB,GACjBlkD,KAAKyV,IAAMzV,KAAKob,KACS,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,QAEnBzV,KAAKyV,IACAlT,EAAM2gD,0BAER3gD,EAAM0/C,kBAEf,GAA6B,IAAzBl8C,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IACAlT,EAAM8+C,gBAGjB,OAAO9+C,EAAM4+C,SAEf,QAEE,KADEnhD,KAAKyV,IACHyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,IAAK,CAC7C,GAA6B,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IAELyuC,EAAiB,GACjBlkD,KAAKyV,IAAMzV,KAAKob,KACS,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,QAEnBzV,KAAKyV,IACAlT,EAAMk/C,sBAERl/C,EAAMg/C,cAEf,GAA6B,IAAzBx7C,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IACAlT,EAAM2iD,mBAGjB,OAAO3iD,EAAMogD,OAEf,QAEE,KADE3iD,KAAKyV,IACHyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,IAAK,CAC7C,GAA6B,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,KAA8B,CAErD,KADEzV,KAAKyV,IACHyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,IAAK,CAC7C,GAA6B,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IAELyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,KACb,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,QAEnBzV,KAAKyV,IACAlT,EAAM6gD,4CAER7gD,EAAM4/C,oCAEf,GAA6B,IAAzBp8C,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IACAlT,EAAM4gD,+BAGjB,OAAO5gD,EAAM2/C,wBAEf,GAA6B,IAAzBn8C,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IACAlT,EAAM++C,mBAGjB,OAAO/+C,EAAM6+C,YAEf,QAEE,QADEphD,KAAKyV,IACAlT,EAAM4iD,SAEf,QAEE,QADEnlD,KAAKyV,IACAlT,EAAM6iD,YAEf,QAEE,QADEplD,KAAKyV,IACAlT,EAAM8iD,aAEf,QAEE,QADErlD,KAAKyV,IAELyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,KACb,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,QAEnBzV,KAAKyV,IACAlT,EAAMghD,cAERhhD,EAAM+/C,MAEf,SAEE,QADEtiD,KAAKyV,IACAlT,EAAM+iD,UAEf,SAEE,KADEtlD,KAAKyV,IACHyuC,EAAiB,GAAKlkD,KAAKyV,IAAMzV,KAAKob,IAAK,CAC7C,GAA6B,KAAzBrV,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IACAlT,EAAMmgD,QAEf,GAA6B,IAAzB38C,EAAKkM,WAAWjS,KAAKyV,KAEvB,QADEzV,KAAKyV,IACAlT,EAAM+gD,WAGjB,OAAO/gD,EAAM8/C,IAEf,SAEE,QADEriD,KAAKyV,IACAlT,EAAMgjD,WAEf,SAEE,QADEvlD,KAAKyV,IACAlT,EAAMigD,MAEf,QAEE,QADExiD,KAAKyV,IACAlT,EAAMijD,GAEf,QACE,GAAI9iD,EAAA+iD,kBAAkB/kD,GAAI,CACxB,GAAIgC,EAAAgjD,mBAAmBhlD,GAAI,CAEzB,IADA,IAAIilD,EAAY3lD,KAAKyV,MAEjBzV,KAAKyV,IAAMzV,KAAKob,KAClB1Y,EAAAkjD,iBAAiBllD,EAAIqF,EAAKkM,WAAWjS,KAAKyV,OAE1C,IAAK/S,EAAAgjD,mBAAmBhlD,GAEtB,OADAV,KAAKyV,IAAMkwC,EACJpjD,EAAMW,WAGjB,IACI2iD,EAAe3G,EADDn5C,EAAK8P,UAAU8vC,EAAW3lD,KAAKyV,MAEjD,GACEowC,GAAgBtjD,EAAMoc,SACtBqlC,IAAuB/E,EAAmB6G,SAExC9B,IAAuB/E,EAAmB8G,SAC1ChF,EAAsB8E,IAGxB,OAAOA,EAET7lD,KAAKyV,IAAMkwC,EAEb,OAAOpjD,EAAMW,WACR,GAAIR,EAAAsjD,aAAatlD,GAAI,GACxBV,KAAKyV,IACP,MAOF,OALAzV,KAAKgc,MACHE,EAAAnC,eAAeksC,kBACfjmD,KAAKmE,MAAMnE,KAAKyV,IAAKzV,KAAKyV,IAAM,MAEhCzV,KAAKyV,IACAlT,EAAMoc,SAInB,OAAOpc,EAAM2jD,WAGfxC,EAAAzhD,UAAAkkD,KAAA,SACEC,EACApC,EACAqC,QAFA,IAAAD,OAAA,QACA,IAAApC,MAAyC/E,EAAmBS,cAC5D,IAAA2G,MAAyBxlC,IAAI0Y,WAE7B,IAAIxzB,EAAO/F,KAAKoN,OAAOrH,KACvB,GAAI/F,KAAK4jD,UAAY,EAAG,CACtB,IAAI+B,EAAY3lD,KAAKyV,IACjB6wC,EAActmD,KAAKghD,MACnBuF,EAAiBvmD,KAAK2jD,SAG1B,GAFA3jD,KAAK4jD,UAAY5jD,KAAKikD,WAAWD,EAAoBqC,GACrDrmD,KAAK6jD,aAAe7jD,KAAK2jD,SACrByC,EAAgB,CAClBpmD,KAAK8jD,oBAAqB,EAC1B,IAAK,IAAIruC,EAAMkwC,EAAWvqC,EAAMpb,KAAK6jD,aAAcpuC,EAAM2F,IAAO3F,EAC9D,GAAI/S,EAAA2Y,YAAYtV,EAAKkM,WAAWwD,IAAO,CACrCzV,KAAK8jD,oBAAqB,EAC1B,OAIN9jD,KAAKyV,IAAMkwC,EACX3lD,KAAKghD,MAAQsF,EACbtmD,KAAK2jD,SAAW4C,EAElB,OAAOvmD,KAAK4jD,WAGdF,EAAAzhD,UAAAukD,eAAA,WACE,OAAOxmD,KAAKymD,KAAKlkD,EAAMW,WAAY+7C,EAAmB8G,SAGxDrC,EAAAzhD,UAAAykD,mBAAA,WACE,OAAO1mD,KAAKymD,KAAKlkD,EAAMW,WAAY+7C,EAAmB6G,SAGxDpC,EAAAzhD,UAAAwkD,KAAA,SAAKzF,EAAcgD,QAAA,IAAAA,MAAyC/E,EAAmBS,SAC7E,IAAIiG,EAAY3lD,KAAKyV,IACjB6wC,EAActmD,KAAKghD,MACnBuF,EAAiBvmD,KAAK2jD,SACtB0C,EAAoBxlC,IAAI0Y,UAC5B,OAAQynB,GACN,KAAKz+C,EAAM6+C,YACTiF,EAAoB,EAKxB,OADArmD,KAAKghD,MAAQhhD,KAAKikD,WAAWD,EAAoBqC,GAC7CrmD,KAAKghD,OAASA,GAChBhhD,KAAK4jD,WAAa,GACX,IAEP5jD,KAAKyV,IAAMkwC,EACX3lD,KAAKghD,MAAQsF,EACbtmD,KAAK2jD,SAAW4C,GACT,IAIX7C,EAAAzhD,UAAA0kD,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAMnxC,IAAMzV,KAAKyV,IACjBmxC,EAAM5F,MAAQhhD,KAAKghD,MACnB4F,EAAMjD,SAAW3jD,KAAK2jD,SACfiD,GAGTlD,EAAAzhD,UAAA8kD,QAAA,SAAQH,GACNC,EAAgBD,GAGlBlD,EAAAzhD,UAAA+kD,MAAA,SAAMJ,GACJ5mD,KAAKyV,IAAMmxC,EAAMnxC,IACjBzV,KAAKghD,MAAQ4F,EAAM5F,MACnBhhD,KAAK2jD,SAAWiD,EAAMjD,SACtB3jD,KAAK4jD,WAAa,GAGpBF,EAAAzhD,UAAAkC,MAAA,SAAMgX,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQnb,KAAK2jD,SACbvoC,EAAMpb,KAAKyV,KACF2F,EAAM,IACfA,EAAMD,GAED,IAAI3Y,EAAMxC,KAAKoN,OAAQ+N,EAAOC,IAGvCsoC,EAAAzhD,UAAAglD,eAAA,WAGE,IAFA,IAAIlhD,EAAO/F,KAAKoN,OAAOrH,KACnBoV,EAAQnb,KAAKyV,MAEbzV,KAAKyV,IAAMzV,KAAKob,KAClB1Y,EAAAkjD,iBAAiB7/C,EAAKkM,WAAWjS,KAAKyV,QAExC,OAAO1P,EAAK8P,UAAUsF,EAAOnb,KAAKyV,MAGpCiuC,EAAAzhD,UAAAsxC,WAAA,WAKE,IAJA,IAAIxtC,EAAO/F,KAAKoN,OAAOrH,KACnBmhD,EAAQnhD,EAAKkM,WAAWjS,KAAKyV,OAC7B0F,EAAQnb,KAAKyV,IACbsW,EAAS,KACA,CACX,GAAI/rB,KAAKyV,KAAOzV,KAAKob,IAAK,CACxB2Q,GAAUhmB,EAAK8P,UAAUsF,EAAOnb,KAAKyV,KACrCzV,KAAKgc,MACHE,EAAAnC,eAAeotC,4BACfnnD,KAAKmE,MAAMgX,EAAQ,EAAGnb,KAAKob,MAE7B,MAEF,IAAI1a,EAAIqF,EAAKkM,WAAWjS,KAAKyV,KAC7B,GAAI/U,GAAKwmD,EAAO,CACdn7B,GAAUhmB,EAAK8P,UAAUsF,EAAOnb,KAAKyV,OACrC,MAEF,GAAK,IAAD/U,EAAJ,CAMA,GAAIgC,EAAA2Y,YAAY3a,GAAI,CAClBqrB,GAAUhmB,EAAK8P,UAAUsF,EAAOnb,KAAKyV,KACrCzV,KAAKgc,MACHE,EAAAnC,eAAeotC,4BACfnnD,KAAKmE,MAAMgX,EAAQ,EAAGnb,KAAKyV,MAE7B,QAEAzV,KAAKyV,SAbLsW,GAAUhmB,EAAK8P,UAAUsF,EAAOnb,KAAKyV,KACrCsW,GAAU/rB,KAAKonD,qBACfjsC,EAAQnb,KAAKyV,IAajB,OAAOsW,GAGT23B,EAAAzhD,UAAAmlD,mBAAA,WACE,KAAMpnD,KAAKyV,KAAOzV,KAAKob,IAKrB,OAJApb,KAAKgc,MACHE,EAAAnC,eAAestC,uBACfrnD,KAAKmE,MAAMnE,KAAKob,MAEX,GAGT,IAAIrV,EAAO/F,KAAKoN,OAAOrH,KACnBrF,EAAIqF,EAAKkM,WAAWjS,KAAKyV,OAC7B,OAAQ/U,GACN,QAAkB,MAAO,KACzB,QAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,QAA2B,MAAO,IAClC,QAA2B,MAAO,IAClC,SACE,OACEV,KAAKyV,IAAMzV,KAAKob,KACS,KAAzBrV,EAAKkM,WAAWjS,KAAKyV,QAEnBzV,KAAKyV,IACAzV,KAAKsnD,6BAEPtnD,KAAKunD,oBAEd,QAEIvnD,KAAKyV,IAAMzV,KAAKob,KACS,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,QAEnBzV,KAAKyV,IAIX,QACA,UACA,UAAkC,MAAO,GACzC,QAAS,OAAOgmC,OAAO+L,aAAa9mD,KAIxCgjD,EAAAzhD,UAAAwlD,kBAAA,WAIE,IAHA,IAAI1hD,EAAO/F,KAAKoN,OAAOrH,KACnBoV,EAAQnb,KAAKyV,IACbiyC,GAAU,IACD,CACX,GAAI1nD,KAAKyV,KAAOzV,KAAKob,IAAK,CACxBpb,KAAKgc,MACHE,EAAAnC,eAAe4tC,wCACf3nD,KAAKmE,MAAMgX,EAAOnb,KAAKob,MAEzB,MAEF,GAA6B,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,KAAzB,CAKA,IAAI/U,EAAIqF,EAAKkM,WAAWjS,KAAKyV,KAC7B,GAAK,IAAD/U,IAAwBgnD,EAAS,MACrC,GAAIhlD,EAAA2Y,YAAY3a,GAAI,CAClBV,KAAKgc,MACHE,EAAAnC,eAAe4tC,wCACf3nD,KAAKmE,MAAMgX,EAAOnb,KAAKyV,MAEzB,QAEAzV,KAAKyV,IACPiyC,GAAU,QAdN1nD,KAAKyV,IACPiyC,GAAU,EAed,OAAO3hD,EAAK8P,UAAUsF,EAAOnb,KAAKyV,MAGpCiuC,EAAAzhD,UAAA2lD,gBAAA,WAIE,IAHA,IAAI7hD,EAAO/F,KAAKoN,OAAOrH,KACnBoV,EAAQnb,KAAKyV,IACbhS,EAAQ,EACLzD,KAAKyV,IAAMzV,KAAKob,KAAK,CAC1B,IAAI1a,EAASqF,EAAKkM,WAAWjS,KAAKyV,KAClC,IAAK/S,EAAAkjD,iBAAiBllD,GAAI,MAI1B,SAHEV,KAAKyV,IAGC/U,GACN,SACE+C,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACFzD,KAAKgc,MACHE,EAAAnC,eAAe8tC,iCACf7nD,KAAKmE,MAAMgX,EAAOnb,KAAKyV,MAGpB1P,EAAK8P,UAAUsF,EAAOnb,KAAKyV,MAGpCiuC,EAAAzhD,UAAA6iD,YAAA,WACE,IAAI/+C,EAAO/F,KAAKoN,OAAOrH,KACvB,GAA6B,IAAzBA,EAAKkM,WAAWjS,KAAKyV,MAAuBzV,KAAKyV,IAAM,EAAIzV,KAAKob,IAClE,OAAQrV,EAAKkM,WAAWjS,KAAKyV,IAAM,IACjC,QACA,SACA,QACA,QACA,QACA,SAAiB,OAAO,EAI5B,IADA,IAAIA,EAAMzV,KAAKyV,IACRA,EAAMzV,KAAKob,KAAK,CACrB,IAAI1a,EAAIqF,EAAKkM,WAAWwD,GACxB,GAAK,IAAD/U,GAAsB,IAADA,GAAoB,KAADA,EAC1C,OAAO,EAET,IAAKA,EAAC,IAAkBA,EAAC,KAAoB,IAADA,EAAiB,MAE7D+U,IAEF,OAAO,GAGTiuC,EAAAzhD,UAAA6lD,YAAA,WACE,IAAI/hD,EAAO/F,KAAKoN,OAAOrH,KACvB,GAA6B,IAAzBA,EAAKkM,WAAWjS,KAAKyV,MAAuBzV,KAAKyV,IAAM,EAAIzV,KAAKob,IAAK,CACvE,OAAQrV,EAAKkM,WAAWjS,KAAKyV,IAAM,IACjC,QACA,SAEE,OADAzV,KAAKyV,KAAO,EACLzV,KAAK+nD,iBAEd,QACA,QAEE,OADA/nD,KAAKyV,KAAO,EACLzV,KAAKgoD,oBAEd,QACA,SAEE,OADAhoD,KAAKyV,KAAO,EACLzV,KAAKioD,mBAGhB,GAAIvlD,EAAAwlD,aAAaniD,EAAKkM,WAAWjS,KAAKyV,IAAM,IAAK,CAC/C,IAAI0F,EAAQnb,KAAKyV,MACfzV,KAAKyV,IACP,IAAInU,EAAQtB,KAAKioD,mBAKjB,OAJAjoD,KAAKgc,MACHE,EAAAnC,eAAeouC,8CACfnoD,KAAKmE,MAAMgX,EAAOnb,KAAKyV,MAElBnU,GAGX,OAAOtB,KAAKooD,sBAGd1E,EAAAzhD,UAAA8lD,eAAA,WAME,IALA,IAAIhiD,EAAO/F,KAAKoN,OAAOrH,KACnBoV,EAAQnb,KAAKyV,IACbnU,EAAQogB,QAAQ,EAAG,GACnB2mC,EAAS3mC,QAAQ,GAAI,GACrB4mC,EAASntC,EACNnb,KAAKyV,IAAMzV,KAAKob,KAAK,CAC1B,IAAI3F,EAAMzV,KAAKyV,IACX/U,EAAIqF,EAAKkM,WAAWwD,GACxB,GAAI/U,GAAC,IAAmBA,GAAC,GAEvBY,EAAQinD,QACNC,QAAQlnD,EAAO+mD,GACf3mC,QAAQhhB,EAAC,GAAgB,SAErB,GAAIA,GAAC,IAAkBA,GAAC,GAE9BY,EAAQinD,QACNC,QAAQlnD,EAAO+mD,GACf3mC,QAAQ,GAAKhhB,EAAC,GAAe,SAE1B,GAAIA,GAAC,IAAkBA,GAAC,IAE7BY,EAAQinD,QACNC,QAAQlnD,EAAO+mD,GACf3mC,QAAQ,GAAKhhB,EAAC,GAAe,QAE1B,IAAK,IAADA,EAWT,MAVI4nD,GAAU7yC,GACZzV,KAAKgc,MACHssC,GAAUntC,EACNe,EAAAnC,eAAe0uC,wCACfvsC,EAAAnC,eAAe2uC,0DACnB1oD,KAAKmE,MAAMsR,IAGf6yC,EAAS7yC,EAAM,EAIjBzV,KAAKyV,IAAMA,EAAM,EAanB,OAXIzV,KAAKyV,KAAO0F,EACdnb,KAAKgc,MACHE,EAAAnC,eAAe4uC,2BACf3oD,KAAKmE,MAAMgX,IAEJmtC,GAAUtoD,KAAKyV,KACxBzV,KAAKgc,MACHE,EAAAnC,eAAe0uC,wCACfzoD,KAAKmE,MAAMmkD,EAAS,IAGjBhnD,GAGToiD,EAAAzhD,UAAAmmD,mBAAA,WAME,IALA,IAAIriD,EAAO/F,KAAKoN,OAAOrH,KACnBoV,EAAQnb,KAAKyV,IACbnU,EAAQogB,QAAQ,EAAG,GACnBknC,EAASlnC,QAAQ,GAAI,GACrB4mC,EAASntC,EACNnb,KAAKyV,IAAMzV,KAAKob,KAAK,CAC1B,IAAI3F,EAAMzV,KAAKyV,IACX/U,EAAIqF,EAAKkM,WAAWwD,GACxB,GAAI/U,GAAC,IAAmBA,GAAC,GAEvBY,EAAQinD,QACNC,QAAQlnD,EAAOsnD,GACflnC,QAAQhhB,EAAC,GAAgB,QAEtB,IAAK,IAADA,EAWT,MAVI4nD,GAAU7yC,GACZzV,KAAKgc,MACHssC,GAAUntC,EACNe,EAAAnC,eAAe0uC,wCACfvsC,EAAAnC,eAAe2uC,0DACnB1oD,KAAKmE,MAAMsR,IAGf6yC,EAAS7yC,EAAM,EAIjBzV,KAAKyV,IAAMA,EAAM,EAanB,OAXIzV,KAAKyV,KAAO0F,EACdnb,KAAKgc,MACHE,EAAAnC,eAAe8uC,eACf7oD,KAAKmE,MAAMgX,IAEJmtC,GAAUtoD,KAAKyV,KACxBzV,KAAKgc,MACHE,EAAAnC,eAAe0uC,wCACfzoD,KAAKmE,MAAMmkD,EAAS,IAGjBhnD,GAGToiD,EAAAzhD,UAAAgmD,iBAAA,WAME,IALA,IAAIliD,EAAO/F,KAAKoN,OAAOrH,KACnBoV,EAAQnb,KAAKyV,IACbnU,EAAQogB,QAAQ,EAAG,GACnBonC,EAAQpnC,QAAQ,EAAG,GACnB4mC,EAASntC,EACNnb,KAAKyV,IAAMzV,KAAKob,KAAK,CAC1B,IAAI3F,EAAMzV,KAAKyV,IACX/U,EAAIqF,EAAKkM,WAAWwD,GACxB,GAAI/U,GAAC,IAAmBA,GAAC,GAEvBY,EAAQinD,QACNC,QAAQlnD,EAAOwnD,GACfpnC,QAAQhhB,EAAC,GAAgB,QAEtB,IAAK,IAADA,EAWT,MAVI4nD,GAAU7yC,GACZzV,KAAKgc,MACHssC,GAAUntC,EACNe,EAAAnC,eAAe0uC,wCACfvsC,EAAAnC,eAAe2uC,0DACnB1oD,KAAKmE,MAAMsR,IAGf6yC,EAAS7yC,EAAM,IAIfzV,KAAKyV,IAaT,OAXIzV,KAAKyV,KAAO0F,EACdnb,KAAKgc,MACHE,EAAAnC,eAAegvC,qBACf/oD,KAAKmE,MAAMgX,IAEJmtC,GAAUtoD,KAAKyV,KACxBzV,KAAKgc,MACHE,EAAAnC,eAAe0uC,wCACfzoD,KAAKmE,MAAMmkD,EAAS,IAGjBhnD,GAGToiD,EAAAzhD,UAAA+lD,kBAAA,WAOE,IANA,IAAIjiD,EAAO/F,KAAKoN,OAAOrH,KACnBoV,EAAQnb,KAAKyV,IACbnU,EAAQogB,QAAQ,EAAG,GACnBsnC,EAAQtnC,QAAQ,EAAG,GACnBunC,EAAQvnC,QAAQ,EAAG,GACnB4mC,EAASntC,EACNnb,KAAKyV,IAAMzV,KAAKob,KAAK,CAC1B,IAAI3F,EAAMzV,KAAKyV,IACX/U,EAAIqF,EAAKkM,WAAWwD,GACxB,GAAK,IAAD/U,EAEFY,EAAQknD,QACNlnD,EACA0nD,QAEG,GAAK,IAADtoD,EAETY,EAAQinD,QACNC,QAAQlnD,EAAO0nD,GACfC,OAEG,IAAK,IAADvoD,EAWT,MAVI4nD,GAAU7yC,GACZzV,KAAKgc,MACHssC,GAAUntC,EACNe,EAAAnC,eAAe0uC,wCACfvsC,EAAAnC,eAAe2uC,0DACnB1oD,KAAKmE,MAAMsR,IAGf6yC,EAAS7yC,EAAM,EAIjBzV,KAAKyV,IAAMA,EAAM,EAanB,OAXIzV,KAAKyV,KAAO0F,EACdnb,KAAKgc,MACHE,EAAAnC,eAAemvC,sBACflpD,KAAKmE,MAAMgX,IAEJmtC,GAAUtoD,KAAKyV,KACxBzV,KAAKgc,MACHE,EAAAnC,eAAe0uC,wCACfzoD,KAAKmE,MAAMmkD,EAAS,IAGjBhnD,GAGToiD,EAAAzhD,UAAAknD,UAAA,WAWE,OAAOnpD,KAAKopD,oBAGd1F,EAAAzhD,UAAAmnD,iBAAA,WAIE,IAFA,IAAIjuC,EAAQnb,KAAKyV,IACb1P,EAAO/F,KAAKoN,OAAOrH,KAChB/F,KAAKyV,IAAMzV,KAAKob,KAAO1Y,EAAA4hD,eAAev+C,EAAKkM,WAAWjS,KAAKyV,SAC9DzV,KAAKyV,IAET,GAAIzV,KAAKyV,IAAMzV,KAAKob,KAAgC,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,KAE9C,MADEzV,KAAKyV,IACAzV,KAAKyV,IAAMzV,KAAKob,KAAO1Y,EAAA4hD,eAAev+C,EAAKkM,WAAWjS,KAAKyV,SAC9DzV,KAAKyV,IAGX,GAAIzV,KAAKyV,IAAMzV,KAAKob,IAAK,CACvB,IAAI1a,EAAIqF,EAAKkM,WAAWjS,KAAKyV,KAC7B,GAAK,IAAD/U,GAAoB,KAADA,EAUrB,MARIV,KAAKyV,IAAMzV,KAAKob,MACS,IAAzBrV,EAAKkM,WAAWjS,KAAKyV,MACI,IAAzB1P,EAAKkM,WAAWjS,KAAKyV,OAEvB/S,EAAA4hD,eAAev+C,EAAKkM,WAAWjS,KAAKyV,IAAM,OAExCzV,KAAKyV,IAEFzV,KAAKyV,IAAMzV,KAAKob,KAAO1Y,EAAA4hD,eAAev+C,EAAKkM,WAAWjS,KAAKyV,SAC9DzV,KAAKyV,IAIb,OAAO4zC,WAAWtjD,EAAK8P,UAAUsF,EAAOnb,KAAKyV,OAG/CiuC,EAAAzhD,UAAAqnD,aAAA,WACE,MAAM,IAAInkC,MAAM,oBAGlBu+B,EAAAzhD,UAAAslD,kBAAA,WAIE,IAHA,IAAIgC,EAAS,EACTjoD,EAAQ,EACRyE,EAAO/F,KAAKoN,OAAOrH,KAChB/F,KAAKyV,IAAMzV,KAAKob,KAAK,CAC1B,IAAI1a,EAAIqF,EAAKkM,WAAWjS,KAAKyV,OAC7B,GAAI/U,GAAC,IAAmBA,GAAC,GACvBY,EAAgB,GAARA,EAAaZ,EAAC,QACjB,GAAIA,GAAC,IAAkBA,GAAC,GAC7BY,EAAgB,GAARA,EAAa,GAAKZ,EAAC,OACtB,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,OAJAV,KAAKgc,MACHE,EAAAnC,eAAe4uC,2BACf3oD,KAAKmE,MAAMnE,KAAKyV,IAAM,EAAGzV,KAAKyV,MAEzB,GANPnU,EAAgB,GAARA,EAAa,GAAKZ,EAAC,GAQ7B,GAAgB,KAAV6oD,EAAa,MAErB,OAAIA,GACFvpD,KAAKgc,MACHE,EAAAnC,eAAestC,uBACfrnD,KAAKmE,MAAMnE,KAAKyV,MAEX,IAEFgmC,OAAO+L,aAAalmD,IAGrBoiD,EAAAzhD,UAAAqlD,0BAAR,WACE,IAAInsC,EAAQnb,KAAKyV,IACbnU,EAAQtB,KAAK+nD,iBACbyB,EAAUxZ,QAAQ1uC,GAClBmoD,GAAU,EAEdz3C,QAAQi+B,SAAS3uC,IACbkoD,EAAU,UACZxpD,KAAKgc,MACHE,EAAAnC,eAAe2vC,4EACf1pD,KAAKmE,MAAMgX,EAAOnb,KAAKyV,MAEzBg0C,GAAU,GAGZ,IAAI1jD,EAAO/F,KAAKoN,OAAOrH,KAiBvB,OAhBI/F,KAAKyV,KAAOzV,KAAKob,KACnBpb,KAAKgc,MACHE,EAAAnC,eAAestC,uBACfrnD,KAAKmE,MAAMgX,EAAOnb,KAAKob,MAEzBquC,GAAU,GACwB,KAAzB1jD,EAAKkM,WAAWjS,KAAKyV,OAC5BzV,KAAKyV,KAEPzV,KAAKgc,MACHE,EAAAnC,eAAe4vC,qCACf3pD,KAAKmE,MAAMgX,EAAOnb,KAAKyV,MAEzBg0C,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACb/N,OAAO+L,aAAagC,GACpB/N,OAAO+L,aAC2B,QAA/BgC,EAAU,OAAS,KAAO,IAC1BA,EAAU,OAAS,KAAY,QAIxC9F,EAAAzhD,UAAA2nD,OAAA,aAEFlG,EA7kCA,CAA+BxnC,EAAAP,mBAAlBjc,EAAAgkD,YAglCb,IAAAoD,EAAA,WAOA,OAPA,gBAAapnD,EAAAonD,QAUb,IAAID,EAA8B,s4BCxjDlC,IA+JY/W,EA/JZ+Z,EAAA1pD,EAAA,IAOA+b,EAAA/b,EAAA,GAKAkc,EAAAlc,EAAA,GAwBAkC,EAAAlC,EAAA,GAUA2pD,EAAA3pD,EAAA,GA4BAmC,EAAAnC,EAAA,GAKAic,EAAAjc,EAAA,GA+DAgc,EAAAhc,EAAA,GASAuC,EAAAvC,EAAA,IAQA,SAAY2vC,GAEVA,IAAA,mBAEAA,IAAA,mBAJF,CAAYA,EAAApwC,EAAAowC,SAAApwC,EAAAowC,YAQZ,IAAAia,EAAA,oBAAAA,IAGE/pD,KAAA6xB,OAAiBie,EAAOka,OAExBhqD,KAAA4hB,eAAsB,EAEtB5hB,KAAA6hB,UAAiB,EAEjB7hB,KAAAiqD,cAAqB,EAErBjqD,KAAAkqD,aAAoB,EAEpBlqD,KAAAwwB,WAAkB,EAElBxwB,KAAA8hB,WAAkB,EAElB9hB,KAAA+kB,cAA2C,KAE3C/kB,KAAAmqD,SAAQ,EAGRnqD,KAAA+hB,kBAAyB,EAEzB/hB,KAAAgiB,gBAAuB,EA0BzB,OAvBEjhB,OAAAC,eAAI+oD,EAAA9nD,UAAA,gBAAJ,WACE,OAAOjC,KAAK6xB,QAAUie,EAAOC,wCAI/BhvC,OAAAC,eAAI+oD,EAAA9nD,UAAA,iBAAJ,WACE,OAAOjC,KAAK6xB,QAAUie,EAAOC,OAAS5zB,EAAAuE,KAAK+7B,QAAUtgC,EAAAuE,KAAKg8B,yCAI5D37C,OAAAC,eAAI+oD,EAAA9nD,UAAA,iBAAJ,WACE,OAAOjC,KAAK6xB,QAAUie,EAAOC,OAAS5zB,EAAAuE,KAAK67B,QAAUpgC,EAAAuE,KAAK87B,yCAI5Dz7C,OAAAC,eAAI+oD,EAAA9nD,UAAA,sBAAJ,WACE,OAAOjC,KAAK6xB,QAAUie,EAAOC,OAAS1zB,EAAAsT,WAAWE,IAAMxT,EAAAsT,WAAWC,qCAIpEm6B,EAAA9nD,UAAAggB,WAAA,SAAWmoC,GACT,OAAoC,IAA5BpqD,KAAKmqD,SAAWC,IAE5BL,EAlDA,GAAarqD,EAAAqqD,UAqDb,SAAkBM,GAEhBA,IAAA,eAEAA,IAAA,mCAEAA,IAAA,mCANF,CAAkB3qD,EAAA2qD,UAAA3qD,EAAA2qD,aAUlB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,uBAEAA,IAAA,uBANF,CAAkB5qD,EAAA4qD,iBAAA5qD,EAAA4qD,oBAUlB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,eAJF,CAAkB7qD,EAAA6qD,WAAA7qD,EAAA6qD,cAQlB,IAytOIC,EACAC,EA1tOJC,EAAA,SAAAt5C,GA6CE,SAAAs5C,EAAY/+B,EAAkBlL,QAAA,IAAAA,MAAA,MAA9B,IAAAnP,EACEF,EAAA5Q,KAAAR,KAAM2rB,EAAQ/P,cAAY5b,YAjC5BsR,EAAAq5C,qBAAwC,KAExCr5C,EAAAs5C,0BAEAt5C,EAAAu5C,YAA2B,KAE3Bv5C,EAAAw5C,YAAoB3uC,EAAAuE,KAAKc,KAQzBlQ,EAAAy5C,kBAEAz5C,EAAA05C,eAA4C,IAAIjsC,IAEhDzN,EAAA25C,iBAEA35C,EAAA45C,QAAqB,EAErB55C,EAAA65C,QAAuB,EAEvB75C,EAAA85C,mBAA0B,EAq1ElB95C,EAAA+5C,eAAkC,KAClC/5C,EAAAg6C,eAAkC,KAClCh6C,EAAAi6C,eAAkC,KAClCj6C,EAAAk6C,eAAkC,KA90ExCl6C,EAAKqa,QAAUA,EACfra,EAAKuO,SAAW8L,EAAQ9L,SACnBY,IAASA,EAAU,IAAIspC,GAC5Bz4C,EAAKmP,QAAUA,EACfnP,EAAK6f,aAAezP,QAGlB+pC,IAAIhrC,EAAQqB,WAAY,IAE1BxQ,EAAK3R,OAAS0c,EAAA4pB,OAAOtkC,WA4mOzB,OApqO8B0P,EAAAq5C,EAAAt5C,GAwCrBs5C,EAAAgB,QAAP,SAAe//B,EAAkBlL,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAIiqC,EAAS/+B,EAASlL,GAASirC,WAmBxChB,EAAAzoD,UAAAypD,QAAA,mBACMjrC,EAAUzgB,KAAKygB,QACf9gB,EAASK,KAAKL,OACdgsB,EAAU3rB,KAAK2rB,QAGnBA,EAAQnL,WAAWC,GAGnB,IAAIkrC,EAAwB,IAAI7B,EAAA18B,SAASzB,EAAQjG,cAAe,QAAS,IAAIvJ,EAAA0hC,aAAc1hC,EAAAuE,KAAKc,OAChGxhB,KAAK2rD,sBAAwBA,EAC7B,IAAIC,EAAoB,IAAI91C,MAC5B9V,KAAK4rD,kBAAoBA,EACzB5rD,KAAKuyB,gBAAkBo5B,EAIvB,IADA,IAAI5rC,EAAU4L,EAAQ5L,QACb1f,EAAI,EAAGsG,EAAIoZ,EAAQnZ,OAAQvG,EAAIsG,IAAKtG,EACvC0f,EAAQ1f,GAAGmnB,SAASxnB,KAAK6rD,cAAc9rC,EAAQ1f,IAIrD,GAAIurD,EAAkBhlD,QAAmC,OAAzB+kB,EAAQjM,aAAuB,CAC7D,IAAIvQ,EAAYw8C,EAAsBx8C,UAClC28C,EAAUnsD,EAAOwtC,YACnBwe,EAAsBnpC,aACtBxiB,KAAK+rD,mBACH58C,EAAU6f,eACV7f,EAAUhK,WACVgK,EAAUsf,UAEZtS,EAAAshC,mBAAmBkO,EAAsBn+B,kBACzC7tB,EAAOqrC,YAAY,KAAM4gB,IAE3BD,EAAsBp7B,SAAS5wB,EAAQmsD,GAClCngC,EAAQjM,cAAc/f,EAAO8wC,SAASqb,GAI7C,IAAI36B,EAAenxB,KAAKmxB,aACxBA,EAAe66B,UAAU76B,EAAc1Q,EAAQW,UAAUuZ,UACzD36B,KAAKmxB,aAAeA,EAChB1Q,EAAQkB,SACVhiB,EAAOqtC,UACL,YACA3wB,EAAAsT,WAAWE,KACX,EACAlwB,EAAOkoC,UAAUmI,QAAQ7e,GAAe8e,SAAS9e,KAGnDxxB,EAAOqtC,UACL,YACA3wB,EAAAsT,WAAWC,KACX,EACAjwB,EAAO8nC,UAAUuI,QAAQ7e,KAK7B,IAAI86B,EAAWjsD,KAAK+qD,eAAenkD,OAC/BopC,QAAQkc,UAAUF,UAAU76B,EAAc,OAAUzP,QAAQ,GAAI,KAChE,EACJ/hB,EAAO4vC,UACL0c,EACAjsD,KAAKygB,QAAQkB,SACTtF,EAAA4pB,OAAO8P,kBACP15B,EAAA4pB,OAAO6P,kBACX91C,KAAK+qD,eACLtqC,EAAQoR,OACR,UAIEpR,EAAQwpC,cAActqD,EAAOqvC,gBAAgB,IAAK,MAAO,UAG7D,IAAIic,EAAgBjrD,KAAKirD,cACrBkB,EAAoBlB,EAAcrkD,OAClCwlD,GAAwB,EAC5B,GAAID,EAAmB,CACrB,IAAIE,EAAU,IAAIv2C,MAAmBq2C,GACrC,IAAS9rD,EAAI,EAAGA,EAAI8rD,IAAqB9rD,EACvCgsD,EAAQhsD,GAAK4qD,EAAc5qD,GAAGstB,IAEhChuB,EAAO2wC,iBAAiB+b,GACxB1sD,EAAOquC,eAAe,IAAK,SAC3Boe,GAAwB,EAItB3rC,EAAQypC,cACVvqD,EAAOmvC,eAAe,IAAK,MAAO,SAC7Bsd,GAAuBzsD,EAAOquC,eAAe,IAAK,cAIzD,IAAiC,IAAAnf,EAAAlL,EAAAgI,EAAQpM,oBAAkBwE,EAAA8K,EAAAhL,QAAAE,EAAAD,KAAAC,EAAA8K,EAAAhL,OAAE,CAApD,IAAAqB,EAAAlB,EAAAD,EAAAziB,MAAA,GAACV,EAAAskB,EAAA,GAAMonC,EAAApnC,EAAA,GACdllB,KAAKusD,iBAAiB3rD,EAAM0rD,EAAalkD,2GAM3C,OAFIpI,KAAKorD,mBAAmBvB,EAAA2C,oBAAoBxsD,MAEzCL,GAID+qD,EAAAzoD,UAAAsqD,iBAAR,SAAyB3rD,EAAcwH,EAAkBsiB,4BAAA,IAAAA,MAAA,IAGvD,IAAI3e,EAAU3D,EAAQ2D,QACtB,GAAIA,EAAS,CACX,IAAI0gD,EAAY/hC,EAAS9pB,GAAQwH,EAAQxF,MAAQknD,EAAAlrC,YAAYjL,MACzDtR,EAAAoW,mBACApW,EAAAmW,kBAEJ,GAAIpQ,EAAQxF,MAAQknD,EAAAlrC,YAAYuN,cAC9B,IAAmB,IAAAugC,EAAA/oC,EAAA5X,EAAQtC,UAAQkjD,EAAAD,EAAA7oC,QAAA8oC,EAAA7oC,KAAA6oC,EAAAD,EAAA7oC,OAAE,EAA5BjN,EAAM+1C,EAAArrD,OACDsC,GAAGvB,EAAAqB,YAAY6S,SAC3BvW,KAAKusD,iBAAiB31C,EAAOqQ,WAAYrQ,EAAQ61C,8GAGnD,IAAmB,IAAAG,EAAAjpC,EAAA5X,EAAQtC,UAAQojD,EAAAD,EAAA/oC,QAAAgpC,EAAA/oC,KAAA+oC,EAAAD,EAAA/oC,OAAE,CAAhC,IAAIjN,KAAMi2C,EAAAvrD,OACFsC,GAAGvB,EAAAqB,YAAY88C,UAC1BxgD,KAAKusD,iBAAiB31C,EAAOqQ,WAAYrQ,EAAQ61C,sGAKvD,OAAQrkD,EAAQxF,MAGd,KAAKknD,EAAAlrC,YAAYtM,OAEf,GADclK,EAAQxE,GAAGvB,EAAAqB,YAAY+nB,QAAUrjB,EAAQxE,GAAGvB,EAAAqB,YAAYgT,OAASrU,EAAAqB,YAAY2kB,WAC1EroB,KAAKygB,QAAQwB,WAAU,GAStCjiB,KAAKL,OAAOyuC,gBAAgBhmC,EAAQoa,aAAckI,EAAS9pB,QARvDgH,EAAuBQ,EAASR,cAElC5H,KAAKgc,MACHE,EAAAnC,eAAe+yC,+BACfllD,EAAYhH,KAAKuD,OAMvB,MAEF,KAAK2lD,EAAAlrC,YAAYyN,UAEb,IAAIzkB,EADN,GAAKoK,OAAO5J,EAAQ5E,QAAQI,GAAGvB,EAAAqB,YAAY+nB,QAAWzrB,KAAKygB,QAAQwB,WAAU,GAS3EjiB,KAAKL,OAAOyuC,gBAAgBhmC,EAAQoa,aAAckI,EAAS9pB,QARvDgH,EAA0BQ,EAASR,cAErC5H,KAAKgc,MACHE,EAAAnC,eAAe+yC,+BACfllD,EAAYhH,KAAKuD,OAMvB,MAIF,KAAK2lD,EAAAlrC,YAAY7K,SACf,IACI5E,GADAkW,EAAqBjd,GACA+G,UACrBA,EAAU6uC,mBAAqB7uC,EAAU6f,eAAepoB,SAE1Dye,EAAWrlB,KAAK+sD,iBAAiB1nC,GACjCrlB,KAAKgtD,iBAEH3nC,EAASzhB,GAAGvB,EAAAqB,YAAYupD,WAAWjtD,KAAKL,OAAOiuC,kBAAkBvoB,EAAS7C,aAAckI,EAAS9pB,GACrG,MAIF,KAAKkpD,EAAAlrC,YAAY+K,SACf,IAAI9oB,EAASmR,OAAkB5J,EAASwhB,iBACxC5pB,KAAKusD,iBAAiBlqD,EAAAyW,cAAgBlY,EAAMC,EAAQ6pB,GACpD,IAAIwiC,EAAoB9kD,EAASyhB,gBAC7BqjC,GAAQltD,KAAKusD,iBAAiBlqD,EAAA0W,cAAgBnY,EAAMssD,EAAQxiC,GAChE,MAIF,KAAKo/B,EAAAlrC,YAAYsS,MACf,IAAIvxB,EAASK,KAAKL,OACdyE,EAAegE,EAAShE,KACxB+oD,EAAa/oD,EAAKsrB,eAClBqW,EAAiB39B,EAAS+oB,aAC1B/P,EAAYphB,KAAKygB,QAAQW,UACzBgsC,EAAiBptD,KAAKygB,QAAQ2sC,eAG9BC,EAAa3iC,EAASroB,EAAAyW,cAAgBlY,EAgB1C,GAfAjB,EAAOwtC,YACLkgB,EACArtD,KAAK+rD,mBAAmB,KAAM3nD,EAAMgd,GACpC,KACAzhB,EAAOypC,WACLhlC,EAAKu2B,SACLv2B,EAAKR,GAAE,GACPjE,EAAOmpC,eAAe,EAAGskB,GACzBD,EACApnB,IAGJpmC,EAAOiuC,kBAAkByf,EAAYA,IAGhCjlD,EAAQxE,GAAGvB,EAAAqB,YAAY2kB,UAAW,CACrC,IAAIilC,EAAa5iC,EAASroB,EAAA0W,cAAgBnY,EAC1CjB,EAAOwtC,YACLmgB,EACAttD,KAAK+rD,oBAAqB3nD,GAAQ+X,EAAAuE,KAAKc,KAAMJ,GAC7C,KACAzhB,EAAO8pC,YACLrlC,EAAKu2B,SACLh7B,EAAOmpC,eAAe,EAAGskB,GACzBztD,EAAOmpC,eAAe,EAAGqkB,GACzBA,EACApnB,IAGJpmC,EAAOiuC,kBAAkB0f,EAAYA,GAEvC,MAIF,KAAKxD,EAAAlrC,YAAY6G,uBACf,IAAqB,IAAA8nC,EAAA5pC,EAAoBvb,EAAS8kB,UAAUzjB,UAAQ+jD,EAAAD,EAAA1pC,QAAA2pC,EAAA1pC,KAAA0pC,EAAAD,EAAA1pC,OAAE,CAAjE,IACCqG,EAAetpB,EACnB,IAFOykB,EAAQmoC,EAAAlsD,OAEFsC,GAAGvB,EAAAqB,YAAYiiB,SAE1BuE,IADIujC,EAAWpoC,EAAS7C,cACC3M,UAAU43C,EAAS/3C,YAAY,MAE1D1V,KAAKusD,iBAAiBriC,EAAc7E,EAAUqF,qGAEhD,MAEF,KAAKo/B,EAAAlrC,YAAYgG,oBACf,IAAqB,IAAA8oC,EAAA/pC,EAAiBvb,EAAS8kB,UAAUzjB,UAAQkkD,EAAAD,EAAA7pC,QAAA8pC,EAAA7pC,KAAA6pC,EAAAD,EAAA7pC,OAAE,CAA9D,IAAIwB,EAGDooC,EAFFvjC,EAAetpB,EACnB,IAFOykB,EAAQsoC,EAAArsD,OAEFsC,GAAGvB,EAAAqB,YAAYiiB,SAE1BuE,IADIujC,EAAWpoC,EAAS7C,cACC3M,UAAU43C,EAAS/3C,YAAY,MAE1D,IAAIk4C,EAAOvoC,EAASkM,oBAChBq8B,GAAM5tD,KAAKusD,iBAAiBriC,EAAe7nB,EAAAoW,mBAAqBm1C,EAAK3mC,WAAY2mC,EAAMljC,GAC3F1qB,KAAKusD,iBAAiBriC,EAAc7E,EAAUqF,qGAEhD,MAIF,KAAKo/B,EAAAlrC,YAAYwN,KACjB,KAAK09B,EAAAlrC,YAAYjL,MACjB,KAAKm2C,EAAAlrC,YAAYuN,UAAW,MAE5B,QAASna,QAAO,KAOpB04C,EAAAzoD,UAAA4rD,oBAAA,SAAoBvtC,EAAwCwtC,GAC1D,IAAI1gD,EAASpN,KAAK2rB,QAAQtL,mBAAmBC,GACzClT,EAAQpN,KAAK6rD,cAAcz+C,GAE7BpN,KAAKgc,MACHE,EAAAnC,eAAeg0C,iBACfD,EAAW3pD,MAAOmc,IAMxBoqC,EAAAzoD,UAAA4pD,cAAA,SAAcz+C,GACZ,IAAIA,EAAOxJ,GAAGvB,EAAAqB,YAAYupD,UAA1B,CACA7/C,EAAOrJ,IAAI1B,EAAAqB,YAAYupD,UAQvB,IALA,IAAIrrC,EAAgB5hB,KAAKygB,QAAQmB,cAC7B4F,EAAUpa,EAAOoa,QACjBmkC,EAAwB3rD,KAAK2rD,sBAC7BC,EAAoB5rD,KAAK4rD,kBACzBtgD,EAAa8B,EAAO9B,WACfjL,EAAI,EAAGsG,EAAI2E,EAAW1E,OAAQvG,EAAIsG,IAAKtG,EAAG,CACjD,IAAIgM,EAAYf,EAAWjL,GAC3B,OAAQgM,EAAUzJ,MAChB,KAAKwZ,EAAA3Z,SAASgU,kBAETmL,GAAkB4F,GAAWnb,EAAUzI,GAAGvB,EAAAqB,YAAY6S,WACnClK,EAAW2hD,WAE/BhuD,KAAKiuD,wBAA0C5hD,KAAe,MAEhE,MAEF,KAAK+P,EAAA3Z,SAASoV,qBAAsB,MACpC,KAAKuE,EAAA3Z,SAASyU,iBACR0K,GAAkB4F,GAAWnb,EAAUzI,GAAGvB,EAAAqB,YAAY6S,UACxDvW,KAAKkuD,uBAAwC7hD,GAE/C,MAEF,KAAK+P,EAAA3Z,SAASsS,qBAET6M,GAAkB4F,GAAWnb,EAAUzI,GAAGvB,EAAAqB,YAAY6S,WAChClK,EAAW2hD,WAElChuD,KAAKmuD,2BAAgD9hD,MAEvD,MAEF,KAAK+P,EAAA3Z,SAASmV,OACZ5X,KAAK6tD,oBACexhD,EAAWW,eACXX,EAAWS,MAE/B,MAEF,KAAKsP,EAAA3Z,SAAS6T,sBACRsL,GAAkB4F,GAAWnb,EAAUzI,GAAGvB,EAAAqB,YAAY6S,UACxDvW,KAAKouD,4BAAkD/hD,GAEzD,MAEF,KAAK+P,EAAA3Z,SAAS4T,SACZ,IAAIg4C,EAAeruD,KAAKsuD,yBAA4CjiD,GAChEgiD,GAAczC,EAAkBrwC,KAAK8yC,GACzC,MAEF,KAAKjyC,EAAA3Z,SAAS8T,OACuC,MAA7BlK,EAAWW,gBAC/BhN,KAAK6tD,oBACuBxhD,EAAWW,eACMX,EAAWS,OAGtD8U,GAAiB4F,IACnBxnB,KAAKuuD,uBAAwCliD,GAE/C,MAEF,QACE,IAAImiD,EAAmBxuD,KAAKuyB,gBAC5BvyB,KAAKuyB,gBAAkBo5B,EACvBC,EAAkBrwC,KAAKvb,KAAKyuD,iBAAiBpiD,IAC7CrM,KAAKuyB,gBAAkBi8B,MAS/B9D,EAAAzoD,UAAAysD,yBAAA,SAAyB9mD,GAEvB,IAAIQ,EAAU4J,OAAOhS,KAAK2rB,QAAQzM,eAAehe,IAAI0G,EAAYof,wBAEjE,OADAhV,OAAO5J,EAAQxF,MAAQknD,EAAAlrC,YAAYtM,QAC9BtS,KAAK2uD,cAAsBvmD,GACjBA,EADkC,MAInDsiD,EAAAzoD,UAAA0sD,cAAA,SAAcC,GACZ,GAAIA,EAAOhrD,GAAGvB,EAAAqB,YAAYupD,UAAW,OAAO,EAC5C2B,EAAO7qD,IAAI1B,EAAAqB,YAAYupD,UAEvB,IAAIttD,EAASK,KAAKL,OACdiI,EAAcgnD,EAAOhnD,YACrBinD,EAA0B,EAE9B,GAAID,EAAOxqD,MAAQ+X,EAAAuE,KAAKc,KACtB,GAAI5Z,EAGF,GAAIA,EAAYxD,KAAM,CACpB,IAAI0qD,EAAe9uD,KAAK6f,SAASkvC,YAAYnnD,EAAYxD,MACzD,IAAK0qD,EAAc,OAAO,EAC1B,GAAIA,GAAgB3yC,EAAAuE,KAAKc,KAKvB,OAJAxhB,KAAKgc,MACHE,EAAAnC,eAAei1C,cACfpnD,EAAYxD,KAAKD,QAEZ,EAETyqD,EAAOxqD,KAAO0qD,MAGT,KAAIlnD,EAAY9C,YAqBrB,OAJA9E,KAAKgc,MACHE,EAAAnC,eAAei1C,cACfpnD,EAAYhH,KAAKuD,MAAM8qD,QAElB,EAfP,GALAJ,EAAW7uD,KAAKkvD,4BACdtnD,EAAY9C,YACZqX,EAAAuE,KAAKc,KAAI,GAGPxhB,KAAK8qD,aAAe3uC,EAAAuE,KAAKc,KAK3B,OAJAxhB,KAAKgc,MACHE,EAAAnC,eAAeo1C,mCACfvnD,EAAY9C,YAAYX,MAAOnE,KAAK8qD,YAAYjwC,WAAY,WAEvD,EAET+zC,EAAOxqD,KAAOpE,KAAK8qD,iBAWrB94C,QAAO,GAKX,GAAI48C,EAAOhrD,GAAGvB,EAAAqB,YAAYkiB,UAAYgpC,EAAO9nC,aAAagjC,EAAAjrC,eAAe1M,SAAU,OAAO,EAE1F,IAAIg7C,EAAayB,EAAOxqD,KAAKsrB,eACzB0/B,EAAqBR,EAAOhrD,GAAGvB,EAAAqB,YAAY+nB,QAAUmjC,EAAOhrD,GAAGvB,EAAAqB,YAAYgT,OAASrU,EAAAqB,YAAY2kB,UAGpG,GAAIumC,EAAOhrD,GAAGvB,EAAAqB,YAAYkiB,SAGxB,OAAIwpC,GAAsBpvD,KAAKygB,QAAQwB,WAAU,IAC/C2sC,EAAO7qD,IAAI1B,EAAAqB,YAAY2rD,eACnBznD,EACF0nD,EAAiBV,EAAQhnD,EAAagnD,EAAOprD,SAE7CgnD,EAA8B,MAC9BC,EAA+BmE,EAAO3nC,YAExCtnB,EAAOuvC,gBACL0f,EAAOpsC,aACPgoC,EACAC,EACA0C,GAEFyB,EAAO7qD,IAAI1B,EAAAqB,YAAYupD,WAChB,IAIPjtD,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrV,OAAOpK,GAAazD,QAGjB,GAKT,IAAIorD,GAAoB,EAGxB,GAAoB,OAAhB3nD,GAAoD,OAA5BA,EAAY9C,aA0BtC,GAzBK+pD,IACHA,EAAW7uD,KAAKwvD,kBACd5nD,EAAY9C,YACZ8pD,EAAOxqD,KAAI,MAMXiY,EAAA0Y,gBAAgB85B,IAAaxyC,EAAA2Y,aAAa6C,QACxCu3B,GACFP,EAAWlvD,EAAOoyC,qBAAqB8c,GACnCxyC,EAAA0Y,gBAAgB85B,IAAaxyC,EAAA2Y,aAAa6C,QAC5C73B,KAAK+b,QACHG,EAAAnC,eAAe01C,4DACf7nD,EAAYzD,OAEdorD,GAAoB,IAGtBA,GAAoB,GAKpBX,EAAO9nC,aAAagjC,EAAAjrC,eAAetM,UAChCg9C,EAAmB,CAGtB,OAFAv9C,OAAOqK,EAAA0Y,gBAAgB85B,IAAaxyC,EAAA2Y,aAAa6C,OAClCxb,EAAA6c,kBAAkB21B,IAE/B,KAAKxyC,EAAAsT,WAAWC,IACdg/B,EAAOniC,kBAAiB,EACxBmiC,EAAOliC,qBAAuBhL,QAAQrF,EAAAyb,iBAAiB+2B,GAAW,GAClE,MAEF,KAAKxyC,EAAAsT,WAAWE,IACd++B,EAAOniC,kBAAiB,EACxBmiC,EAAOliC,qBAAuBhL,QAC5BrF,EAAA8c,oBAAoB01B,GACpBxyC,EAAA25B,qBAAqB6Y,IAEvB,MAEF,KAAKxyC,EAAAsT,WAAWG,IACd8+B,EAAOniC,kBAAiB,EACxBmiC,EAAOhiC,mBAAqBvQ,EAAA+c,iBAAiBy1B,GAC7C,MAEF,KAAKxyC,EAAAsT,WAAWI,IACd6+B,EAAOniC,kBAAiB,EACxBmiC,EAAOhiC,mBAAqBvQ,EAAAgd,iBAAiBw1B,GAC7C,MAEF,QAEE,OADA78C,QAAO,IACA,EAGX48C,EAAO7qD,IAAI1B,EAAAqB,YAAYipB,eAM3BkiC,EAAWD,EAAOxqD,KAAKk5C,aAAa39C,GAGtC,IAAI6iB,EAAeosC,EAAOpsC,aAS1B,OAPI+sC,GACF5vD,EAAOqtC,UAAUxqB,EAAc2qC,GAAY,EAAMyB,EAAOxqD,KAAKk5C,aAAa39C,IAC1EK,KAAK4rD,kBAAkBrwC,KAAK5b,EAAOmrC,gBAAgBtoB,EAAcqsC,KAGjElvD,EAAOqtC,UAAUxqB,EAAc2qC,GAAaiC,EAAoBP,IAE3D,GAKTnE,EAAAzoD,UAAAisD,uBAAA,SAAuBtmD,GACrB,IAAIQ,EAAU4J,OAAOhS,KAAK2rB,QAAQzM,eAAehe,IAAI0G,EAAYof,wBAEjE,OADAhV,OAAO5J,EAAQxF,MAAQknD,EAAAlrC,YAAYwN,MAC9BpsB,KAAK0vD,YAAkBtnD,GACfA,EADgC,MAI/CsiD,EAAAzoD,UAAAytD,YAAA,SAAYtnD,WACV,GAAIA,EAAQxE,GAAGvB,EAAAqB,YAAYupD,UAAW,OAAO,EAC7C7kD,EAAQrE,IAAI1B,EAAAqB,YAAYupD,UAExB,IAAIttD,EAASK,KAAKL,OAClBK,KAAK6qD,YAAcziD,EACnB,IAAIunD,EAAkC,KAClCC,GAAqB,EAEzB,GAAIxnD,EAAQ2D,YACV,IAAmB,IAAA8iB,EAAAlL,EAAAvb,EAAQ2D,QAAQtC,UAAQsa,EAAA8K,EAAAhL,QAAAE,EAAAD,KAAAC,EAAA8K,EAAAhL,OAAE,CAAxC,IAAIjN,EAAMmN,EAAAziB,MACb,GAAIsV,EAAOhU,MAAQknD,EAAAlrC,YAAYyN,UAA/B,CACA,IAAIwjC,GAAc,EACd9U,EAAiBnkC,EACjBk5C,EAAmB/U,EAAInzC,YAC3BmzC,EAAIh3C,IAAI1B,EAAAqB,YAAYupD,UACpB,IAAI4B,OAAQ,EACRiB,EAAiBxuD,OACnButD,EAAW7uD,KAAKwvD,kBACFM,EAAiBxuD,MAC7B6a,EAAAuE,KAAKG,IAAG,KAINxE,EAAA0Y,gBAAgB85B,IAAaxyC,EAAA2Y,aAAa6C,QACxCzvB,EAAQxE,GAAGvB,EAAAqB,YAAY+nB,QACzBojC,EAAWlvD,EAAOoyC,qBAAqB8c,GACnCxyC,EAAA0Y,gBAAgB85B,IAAaxyC,EAAA2Y,aAAa6C,QAC5C73B,KAAKgc,MACHE,EAAAnC,eAAeg2C,0EACfD,EAAiBxuD,MAAM6C,OAEzB0rD,GAAc,IAGhBA,GAAc,IAGQ,MAAjBF,EACTd,EAAWlvD,EAAO8nC,UAAU,IAExBmoB,GACF5vD,KAAKgc,MACHE,EAAAnC,eAAei2C,kCACfF,EAAiB3rD,OAGrB0qD,EAAWlvD,EAAO6oC,aAAansB,EAAAqZ,SAASu6B,OACtCtwD,EAAOupC,gBAAgBymB,EAAcntC,aAAcnG,EAAAsT,WAAWC,KAC9DjwB,EAAO8nC,UAAU,IAEnBonB,EAAWlvD,EAAOoyC,qBAAqB8c,GACnCxyC,EAAA0Y,gBAAgB85B,IAAaxyC,EAAA2Y,aAAa6C,QACxCzvB,EAAQxE,GAAGvB,EAAAqB,YAAY+nB,QACzBzrB,KAAKgc,MACHE,EAAAnC,eAAeg2C,0EACfD,EAAiB3rD,OAGrB0rD,GAAc,IAGdA,GACFlwD,EAAOqtC,UAAU+N,EAAIv4B,aAAcnG,EAAAsT,WAAWC,KAAK,EAAMjwB,EAAO8nC,UAAU,IAC1EznC,KAAK4rD,kBAAkBrwC,KAAK5b,EAAOmrC,gBAAgBiQ,EAAIv4B,aAAcqsC,IACrEe,GAAqB,IAErBjwD,EAAOqtC,UAAU+N,EAAIv4B,aAAcnG,EAAAsT,WAAWC,KAAMxnB,EAAQxE,GAAGvB,EAAAqB,YAAY+nB,OAAQojC,GACnFe,GAAqB,GAEvBD,EAA2B5U,qGAI/B,OADA/6C,KAAK6qD,YAAc,MACZ,GAMTH,EAAAzoD,UAAAksD,2BAAA,SACEvmD,EACA3D,EACAopB,QAAA,IAAAA,MAAA,MAEA,IAAIjlB,EAAU4J,OAAOhS,KAAK2rB,QAAQzM,eAAehe,IAAI0G,EAAYof,wBAEjE,OADAhV,OAAO5J,EAAQxF,MAAQknD,EAAAlrC,YAAY6G,oBAC5BzlB,KAAKkwD,kCACS9nD,EACnBnE,EACAopB,EACA,KACoBjlB,EAASR,YAAYhH,OAK7C8pD,EAAAzoD,UAAAiuD,kCAAA,SACEjuD,EACAgC,EACAopB,EACAS,EACAggC,GAEA,IAAIzoC,EAAWrlB,KAAK6f,SAASswC,iCAC3BluD,EACAgC,EACAopB,EACAygC,GAEF,OAAKzoC,GACLA,EAASyI,WAAaA,EACjB9tB,KAAKowD,gBAAgB/qC,GACnBA,EADqC,MAFtB,MAOxBqlC,EAAAzoD,UAAA8pD,mBAAA,SACE/8B,EACA7pB,EACAspB,QAAA,IAAAA,MAAA,MAEA,IACIuY,EADAuX,EAAgBvvB,EAAiBA,EAAepoB,OAAS,EAEzDmmB,EAAQ,EAQZ,GAPI0B,IACFuY,EAAa,IAAIlxB,MAAM,EAAIyoC,IAChB,GAAK9vB,EAASiB,eACzB3C,EAAQ,GAERia,EAAa,IAAIlxB,MAAMyoC,GAErBvvB,EACF,IAAK,IAAI3uB,EAAI,EAAGA,EAAIk+C,IAAiBl+C,IAAK0sB,EACxCia,EAAWja,GAASiC,EAAe3uB,GAAGqvB,eAG1C,IAAI2gC,EAAalrD,EAAWuqB,eACxB/vB,EAASK,KAAKL,OACd+tC,EAAU/tC,EAAO0nC,2BAA2BgpB,EAAYrpB,GAC5D,IAAK0G,EAAS,CACZ,IAAI9sC,EAAOub,EAAA0hC,UAAUe,oBAAoB5vB,EAAgB7pB,EAAYspB,GACrEif,EAAU/tC,EAAOonC,gBAAgBnmC,EAAMyvD,EAAYrpB,GAErD,OAAO0G,GAITgd,EAAAzoD,UAAAmuD,gBAAA,SAAgB/qC,GACd,GAAIA,EAASzhB,GAAGvB,EAAAqB,YAAYupD,UAAW,OAAO,EAC9Cj7C,SAASqT,EAASzhB,GAAGvB,EAAAqB,YAAYkiB,UAAYP,EAASyB,aAAagjC,EAAAjrC,eAAe1M,WAClFkT,EAASthB,IAAI1B,EAAAqB,YAAYupD,UAGzB,IAkBIt/B,EAlBA/lB,EAAcyd,EAASpjB,UAAU2F,YACjCwH,EAAOxH,EAAYwH,KACnBA,EACEiW,EAASzhB,GAAGvB,EAAAqB,YAAYkiB,UAC1B5lB,KAAKgc,MACHE,EAAAnC,eAAeu2C,yDACf1oD,EAAYhH,KAAKuD,OAIhBkhB,EAASzhB,GAAGvB,EAAAqB,YAAYkiB,UAC3B5lB,KAAKgc,MACHE,EAAAnC,eAAew2C,gFACf3oD,EAAYhH,KAAKuD,OAMvB,IAAIgL,EAAYkW,EAASlW,UACrBu+B,EAAU1tC,KAAK+rD,mBAAmB58C,EAAU6f,eAAgB7f,EAAUhK,WAAYgK,EAAUsf,UAC5F9uB,EAASK,KAAKL,OAClB,GAAIyP,EAAM,CACR,IAAIohD,EAAgBnrC,EAASzhB,GAAGvB,EAAAqB,YAAYmQ,aACxC1O,EAAakgB,EAASlW,UAAUhK,WAGhCqpD,EAAmBxuD,KAAKuyB,gBAC5BvyB,KAAKuyB,gBAAkBlN,EACvB,IAAI+J,EAAO/J,EAAS+J,KAChB3pB,OAAI,EACR,GAAI2J,EAAKxM,MAAQwZ,EAAA3Z,SAAS6U,WACxBtF,QAAQqT,EAASvhB,MAAMzB,EAAAqB,YAAYmQ,YAAcxR,EAAAqB,YAAYmkB,IAAMxlB,EAAAqB,YAAYokB,IAAMzlB,EAAAqB,YAAYmiB,OACjG7T,OAAOqT,EAASzhB,GAAGvB,EAAAqB,YAAYmF,QAC/BpD,EAAOzF,KAAKwvD,kBACYpgD,EAAMpI,WAC5B7B,EAAU,KAIZiqB,EAAKrrB,IAAG,GACHqrB,EAAK0F,YAAYrvB,EAAMN,IAAaiqB,EAAKrrB,IAAG,GACjDqrB,EAAKmB,eACA,CACLve,OAAO5C,EAAKxM,MAAQwZ,EAAA3Z,SAASqS,OAC7B,IAAI27C,EAAQzwD,KAAK0wD,kBAAmCthD,EAAM9D,YAiB1D,GAhBI+Z,EAASzhB,GAAGvB,EAAAqB,YAAYmiB,QAC1BlmB,EAAOqtC,UAAU,WAAY3wB,EAAAsT,WAAWC,KAAK,EAAMjwB,EAAO8nC,UAAU,IACpEgpB,EAAME,QACJhxD,EAAO+rC,SACL/rC,EAAO0oC,YACLhsB,EAAAuc,QAAQC,OACRl5B,EAAOupC,gBAAgB,WAAY7sB,EAAAsT,WAAWC,MAEhDjwB,EAAOqrC,YAAY,MACjBrrC,EAAO4sC,WAAW,QAAS,KAAMlwB,EAAAsT,WAAWub,MAC5CvrC,EAAOmrC,gBAAgB,WAAYnrC,EAAO8nC,UAAU,SAK5DrY,EAAKmB,WACDigC,EAAe,CACjB,IAAIpD,EAAiBptD,KAAKygB,QAAQ2sC,eAIlC,GAHAp7C,OAAOqT,EAASzhB,GAAGvB,EAAAqB,YAAY6qB,YAG1Ba,EAAKxrB,GAAE,GAGV,GAAIwrB,EAAKxrB,GAAE,IACT6sD,EAAMl1C,KAAK5b,EAAOmpC,eAAe,EAAGskB,QAG/B,CACL,IAAI5pD,EAASwO,OAAOqT,EAAS7hB,QAC7BwO,OAAOxO,EAAOZ,MAAQknD,EAAAlrC,YAAYjL,OAClC88C,EAAMl1C,KAAK5b,EAAOqpC,eAAe,EAC/BhpC,KAAK4wD,wBAA+BptD,EAAQoE,EAAYhH,cAMrDuE,GAAcgX,EAAAuE,KAAKc,MAAS4N,EAAKxrB,GAAE,IAC5C5D,KAAKgc,MACHE,EAAAnC,eAAe82C,+DACfjpD,EAAYuH,UAAUhK,WAAWhB,OAGrCsB,EAAQgrD,EAAM7pD,OAEM,GAAhB6pD,EAAM7pD,OACJ6pD,EAAM,GACN9wD,EAAOqrC,YAAY,KAAMylB,EAAOtrD,EAAWuqB,gBAH7C/vB,EAAOisC,YAgBb,GAXA5rC,KAAKuyB,gBAAkBi8B,EAGvB7gC,EAAMhuB,EAAOwtC,YACX9nB,EAAS7C,aACTkrB,EACAvxB,EAAAshC,mBAAmBp4B,EAASmI,kBAC5B/nB,GAIE4f,EAASyB,aAAagjC,EAAAjrC,eAAexM,UAAW,CAClD,IAAIuG,EAAY5G,OAAOoK,EAAAzD,cAAcyD,EAAAvK,cAAcQ,SAAUzK,EAAYoE,aACzEhM,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfzO,EAAUzU,aAKdkhB,EAASthB,IAAI1B,EAAAqB,YAAY2rD,eACzBC,EAAiBjqC,EAAUzd,EAAayd,EAASpjB,UAAUuB,QAG3DmqB,EAAMhuB,EAAO6uC,kBACXnpB,EAAS7C,aACTgoC,EACAC,EACA/c,GAKJ,OADAroB,EAASkL,SAAS5wB,EAAQguB,IACnB,GAKT+8B,EAAAzoD,UAAAmsD,4BAAA,SAA4BxmD,GAG1B,IAFA,IAAImE,EAAUnE,EAAYmE,QACtB6V,EAAgB5hB,KAAKygB,QAAQmB,cACxBvhB,EAAI,EAAGsG,EAAIoF,EAAQnF,OAAQvG,EAAIsG,IAAKtG,EAAG,CAC9C,IAAIuW,EAAS7K,EAAQ1L,GACrB,OAAQuW,EAAOhU,MACb,KAAKwZ,EAAA3Z,SAASgU,kBAETmL,IAAiBhL,EAAOhT,GAAGvB,EAAAqB,YAAY6S,SACpBK,EAAQo3C,WAE5BhuD,KAAKiuD,wBAA0Cr3C,MAEjD,MAEF,KAAKwF,EAAA3Z,SAASoV,sBAET+J,IAAiBhL,EAAOhT,GAAGvB,EAAAqB,YAAY6S,SAChBK,EAAQo3C,WAEhChuD,KAAK8wD,4BAAkDl6C,MAEzD,MAEF,KAAKwF,EAAA3Z,SAASyU,iBACR0K,GAAiBhL,EAAOhT,GAAGvB,EAAAqB,YAAY6S,UACzCvW,KAAKkuD,uBAAwCt3C,GAE/C,MAEF,KAAKwF,EAAA3Z,SAASsS,qBAET6M,IAAiBhL,EAAOhT,GAAGvB,EAAAqB,YAAY6S,SACjBK,EAAQo3C,WAE/BhuD,KAAKmuD,2BAAgDv3C,MAEvD,MAEF,KAAKwF,EAAA3Z,SAAS6T,sBACRsL,GAAiBhL,EAAOhT,GAAGvB,EAAAqB,YAAY6S,UACzCvW,KAAKouD,4BAAkDx3C,GAEzD,MAEF,KAAKwF,EAAA3Z,SAAS4T,SACZ,GAAIuL,GAAiBhL,EAAOhT,GAAGvB,EAAAqB,YAAY6S,QAAS,CAClD,IAAI83C,EAAeruD,KAAKsuD,yBAA4C13C,GAAQ,GACxEy3C,GAAcruD,KAAK4rD,kBAAkBrwC,KAAK8yC,GAEhD,MAEF,QAASr8C,QAAO,MAKtB04C,EAAAzoD,UAAA8uD,iBAAA,SAAiBrvD,WACf,GAAKA,EAAGqK,QAAR,CAEA,IAAI6V,EAAgB5hB,KAAKygB,QAAQmB,kBACjC,IAAoB,IAAAiN,EAAAlL,EAAAjiB,EAAGqK,QAAQtC,UAAQsa,EAAA8K,EAAAhL,QAAAE,EAAAD,KAAAC,EAAA8K,EAAAhL,OAAE,CAApC,IAAIzb,EAAO2b,EAAAziB,MACd,OAAQ8G,EAAQxF,MACd,KAAKknD,EAAAlrC,YAAYgG,iBAGXhD,IACiBxZ,EAASxE,GAAGvB,EAAAqB,YAAY6S,SACpBnO,EAASxE,GAAGvB,EAAAqB,YAAYiiB,UAE/C3lB,KAAKgxD,+BAA+C5oD,MAEtD,MAEF,KAAK0hD,EAAAlrC,YAAYwN,KACfpsB,KAAK0vD,YAAkBtnD,GACvB,MAEF,KAAK0hD,EAAAlrC,YAAY6G,mBACf,IAEI7D,GAAqCxZ,EAASxE,GAAGvB,EAAAqB,YAAY6S,WACrCnO,EAASxE,GAAGvB,EAAAqB,YAAYiiB,SAClD,CACA,GAAIvd,EAAQ0e,aAAagjC,EAAAjrC,eAAe1M,SAAU,MAClDnS,KAAKkwD,kCACgB9nD,KAEnB,KACA,KACoBA,EAASR,YAAYhH,MAG7C,MAEF,KAAKkpD,EAAAlrC,YAAYtM,OACftS,KAAK2uD,cAAsBvmD,GAC3B,MAEF,KAAK0hD,EAAAlrC,YAAYuN,UACfnsB,KAAK+wD,iBAA4B3oD,yGASzCsiD,EAAAzoD,UAAAssD,uBAAA,SAAuBliD,GACrB,IAAIiT,EAAmBtf,KAAK2rB,QAAQrM,iBAChCvT,EAAUM,EAAUN,QACxB,GAAKA,EACL,IAAK,IAAI1L,EAAI,EAAGsG,EAAIoF,EAAQnF,OAAQvG,EAAIsG,IAAKtG,EAAG,CAC9C,IAAIuW,EAAS7K,EAAQ1L,GACjB+H,EAAUkX,EAAiBpe,IAC7BmL,EAAUlI,MAAMiJ,OAAOC,aAAehL,EAAAsT,eAAiBiB,EAAOpJ,aAAazH,MAE7E,GAAKqC,EACL,OAAQA,EAAQxF,MACd,KAAKknD,EAAAlrC,YAAYgG,gBACOxc,EAASxE,GAAGvB,EAAAqB,YAAYiiB,UAC5C3lB,KAAKgxD,+BAA+C5oD,MAEtD,MAEF,KAAK0hD,EAAAlrC,YAAYwN,KACfpsB,KAAK0vD,YAAkBtnD,GACvB,MAEF,KAAK0hD,EAAAlrC,YAAY6G,oBAEQrd,EAASxE,GAAGvB,EAAAqB,YAAYiiB,UAC7CtZ,EAAUlI,MAAMiJ,OAAOoa,SAEvBxnB,KAAKkwD,kCACgB9nD,KAEnB,KACA,KACoBA,EAASR,YAAYhH,MAG7C,MAEF,KAAKkpD,EAAAlrC,YAAYtM,OACftS,KAAK2uD,cAAsBvmD,GAC3B,MAEF,KAAK0hD,EAAAlrC,YAAYuN,UACfnsB,KAAK+wD,iBAA4B3oD,MASzCsiD,EAAAzoD,UAAAgsD,wBAAA,SACErmD,EACA3D,EACAopB,QAAA,IAAAA,MAAA,MAEA,IAAIjlB,EAAU4J,OAAOhS,KAAK2rB,QAAQzM,eAAehe,IAAI0G,EAAYof,wBACjEhV,OAAO5J,EAAQxF,MAAQknD,EAAAlrC,YAAYgG,iBACnC5kB,KAAKgxD,+BACa5oD,EAChBnE,EACAopB,EACAzlB,IAIJ8iD,EAAAzoD,UAAA+uD,+BAAA,SACE/uD,EACAgC,EACAopB,EACA4jC,QADA,IAAA5jC,MAAA,WACA,IAAA4jC,MAAA,MAEA,IAAI5rC,EAAWrlB,KAAK6f,SAASqxC,8BAC3BjvD,EACAgC,EACAopB,EACA4jC,GAAyBhvD,EAAU2F,aAEhCyd,GACLrlB,KAAKmxD,aAAa9rC,IAGpBqlC,EAAAzoD,UAAAkvD,aAAA,SAAa9rC,eACX,GAAIA,EAASzhB,GAAGvB,EAAAqB,YAAYupD,UAAW,OAAO,EAC9C5nC,EAASthB,IAAI1B,EAAAqB,YAAYupD,UAEzB,IAAImE,EAAgB/rC,EAASpjB,UAAU8J,QACvC,GAAIqlD,MACF,IAAoB,IAAArtC,EAAAJ,EAAAytC,EAAc3nD,UAAQyb,EAAAnB,EAAAF,QAAAqB,EAAApB,KAAAoB,EAAAnB,EAAAF,OAAE,CAC1C,QADOzb,EAAO8c,EAAA5jB,OACEsB,MACd,KAAKknD,EAAAlrC,YAAYtM,OACftS,KAAK2uD,cAAsBvmD,GAC3B,MAEF,KAAK0hD,EAAAlrC,YAAY6G,mBAEQrd,EAASxE,GAAGvB,EAAAqB,YAAYiiB,UAE7C3lB,KAAKkwD,kCACgB9nD,KACf,KAAM,KACUA,EAASR,YAAYhH,MAG7C,MAEF,KAAKkpD,EAAAlrC,YAAY+K,UACX9oB,EAAoBuH,EAASwhB,kBAE/B5pB,KAAKkwD,kCACHrvD,KACI,KAAM,KACVA,EAAO+G,YAAYhH,OAGnBssD,EAAoB9kD,EAASyhB,kBAE/B7pB,KAAKkwD,kCACHhD,KACI,KAAM,KACVA,EAAOtlD,YAAYhH,yGAQ/B,IAAIywD,EAAehsC,EAASkM,oBACxB8/B,GAAcrxD,KAAKowD,gBAAgBiB,GACvC,IAAI9oC,EAAkBlD,EAAStZ,QAC/B,GAAIwc,MACF,IAAoB,IAAAmkC,EAAA/oC,EAAA4E,EAAgB9e,UAAQkjD,EAAAD,EAAA7oC,QAAA8oC,EAAA7oC,KAAA6oC,EAAAD,EAAA7oC,OAAE,CAAzC,IAAIzb,EACP,QADOA,EAAOukD,EAAArrD,OACEsB,MACd,KAAKknD,EAAAlrC,YAAY6G,mBAEQrd,EAASxE,GAAGvB,EAAAqB,YAAYiiB,UAE7C3lB,KAAKkwD,kCACgB9nD,KAEnBid,EAASgI,wBACT,KACoBjlB,EAASR,YAAYhH,MAG7C,MAEF,KAAKkpD,EAAAlrC,YAAYsS,MACf9oB,EAAQrE,IAAI1B,EAAAqB,YAAYupD,UACxB,MAEF,KAAKnD,EAAAlrC,YAAY+K,SACf,IAAI9oB,EAQAqsD,GARArsD,EAAoBuH,EAASwhB,kBAE/B5pB,KAAKkwD,kCACHrvD,KACIwkB,EAASgI,wBAAyB,KACtCxsB,EAAO+G,YAAYhH,OAGnBssD,EAAoB9kD,EAASyhB,kBAE/B7pB,KAAKkwD,kCACHhD,KACI7nC,EAASgI,wBAAyB,KACtC6/B,EAAOtlD,YAAYhH,yGAQ/B,OAAO,GAGT8pD,EAAAzoD,UAAA6uD,4BAAA,SACElpD,EACA3D,EACAopB,EACA4jC,QADA,IAAA5jC,MAAA,WACA,IAAA4jC,MAAA,MAGAjxD,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfzf,EAAYzD,QAOhBumD,EAAAzoD,UAAAqvD,iBAAA,SAAiBxrB,EAAoByrB,QAAA,IAAAA,MAAA,GACnC,IAAIpgC,EAAe66B,UAAUhsD,KAAKmxB,aAAcogC,GAC5CvrB,EAAU3pB,EAAAwpB,cAAclkC,OAAOmkC,EAAQ3U,GAG3C,OAFAnxB,KAAK+qD,eAAexvC,KAAKyqB,GACzBhmC,KAAKmxB,aAAeo3B,QAAQp3B,EAAczP,QAAQokB,EAAOl/B,OAAQ,IAC1Do/B,GAMT0kB,EAAAzoD,UAAAuvD,yBAAA,SAAyB9gB,GAEvB,GADA1+B,OAAO0+B,EAAK9sC,GAAGvB,EAAAqB,YAAYupD,WACvBvc,EAAK9iB,oBAAsB,EAC7B,OAAO8iB,EAAK9iB,mBAEd,IAAIq9B,EAAgBjrD,KAAKirD,cACrBl+B,EAAQk+B,EAAcrkD,OAO1B,OANK8pC,EAAK9sC,GAAGvB,EAAAqB,YAAY+tD,aAAe/gB,EAAKvhC,UAAU6uC,mBAAqBtN,EAAKvhC,UAAU6f,eAAepoB,SAExG8pC,EAAO1wC,KAAK+sD,iBAAiBrc,IAE/Bua,EAAc1vC,KAAKm1B,GACnBA,EAAK9iB,mBAAqBb,EACnBA,GAKT29B,EAAAzoD,UAAAwsD,iBAAA,SAAiBpiD,GACf,IACI5G,EADA9F,EAASK,KAAKL,OAElB,OAAQ0M,EAAUzJ,MAChB,KAAKwZ,EAAA3Z,SAASqS,MACZrP,EAAOzF,KAAK0xD,sBAAsCrlD,GAClD,MAEF,KAAK+P,EAAA3Z,SAASqU,MACZrR,EAAOzF,KAAK2xD,sBAAsCtlD,GAClD,MAEF,KAAK+P,EAAA3Z,SAASsU,SACZtR,EAAOzF,KAAK4xD,yBAA4CvlD,GACxD,MAEF,KAAK+P,EAAA3Z,SAASuU,GACZvR,EAAOzF,KAAK6xD,mBAAgCxlD,GAC5C,MAEF,KAAK+P,EAAA3Z,SAASwU,MACZxR,EAAOzF,KAAK8xD,sBAAsCzlD,GAClD,MAEF,KAAK+P,EAAA3Z,SAAS6U,WACZ7R,EAAOzF,KAAK+xD,2BAAgD1lD,GAC5D,MAEF,KAAK+P,EAAA3Z,SAASgV,IACZhS,EAAOzF,KAAKgyD,oBAAkC3lD,GAC9C,MAEF,KAAK+P,EAAA3Z,SAASiV,GACZjS,EAAOzF,KAAKiyD,mBAAgC5lD,GAC5C,MAEF,KAAK+P,EAAA3Z,SAASqV,OACZrS,EAAOzF,KAAKkyD,uBAAwC7lD,GACpD,MAEF,KAAK+P,EAAA3Z,SAASuV,OACZvS,EAAOzF,KAAKmyD,uBAAwC9lD,GACpD,MAEF,KAAK+P,EAAA3Z,SAASwV,MACZxS,EAAOzF,KAAKoyD,sBAAsC/lD,GAClD,MAEF,KAAK+P,EAAA3Z,SAASyV,IACZzS,EAAOzF,KAAKqyD,oBAAkChmD,GAC9C,MAEF,KAAK+P,EAAA3Z,SAAS4T,UACZ5Q,EAAOzF,KAAKsuD,yBAA4CjiD,MAC7C5G,EAAO9F,EAAOisC,aACzB,MAEF,KAAKxvB,EAAA3Z,SAAS4V,KACZ5S,EAAOzF,KAAKsyD,qBAAoCjmD,GAChD,MAEF,KAAK+P,EAAA3Z,SAAS6V,MACZ7S,EAAOzF,KAAKuyD,sBAAsClmD,GAClD,MAEF,KAAK+P,EAAA3Z,SAAS0V,gBAGZ,GAAInY,KAAKuyB,iBAAmBvyB,KAAK2rD,sBAC/B,OAAOhsD,EAAOisC,YAIlB,QACE55B,QAAO,GACPvM,EAAO9F,EAAOmtC,oBAIlB,OADI9sC,KAAKygB,QAAQ+P,WAAWxwB,KAAKwyD,iBAAiB/sD,EAAM4G,EAAUlI,OAC3DsB,GAGTilD,EAAAzoD,UAAAyuD,kBAAA,SAAkBplD,GAChB,IAAImnD,EAAgBnnD,EAAW1E,OAC3B6pD,EAAQ,IAAI36C,MAAqB28C,GACrChC,EAAM7pD,OAAS,EAEf,IADA,IAAIwoB,EAAOpvB,KAAKuyB,gBAAgBnD,KACvB/uB,EAAI,EAAGA,EAAIoyD,IAAiBpyD,EAAG,CACtC,IAAIoF,EAAOzF,KAAKyuD,iBAAiBnjD,EAAWjL,IAC5C,OAAQgc,EAAA0Y,gBAAgBtvB,IACtB,KAAK4W,EAAA2Y,aAAa4E,MAChB,IAAKvd,EAAAwd,aAAap0B,GAAO,CACvB,IAAK,IAAIid,EAAI,EAAG/b,EAAI0V,EAAAyd,mBAAmBr0B,GAAOid,EAAI/b,IAAK+b,EAAG+tC,EAAMl1C,KAAKc,EAAA2d,cAAcv0B,EAAMid,IACzF,MAIJ,QAAS+tC,EAAMl1C,KAAK9V,GACpB,KAAK4W,EAAA2Y,aAAa09B,KAEpB,GAAItjC,EAAKtrB,MAAK,IAA6B,MAE7C,OAAO2sD,GAGT/F,EAAAzoD,UAAAyvD,sBAAA,SAAsBrlD,GACpB,IAAIf,EAAae,EAAUf,WACvBknB,EAAaxyB,KAAKuyB,gBAAgBnD,KAClCA,EAAOoD,EAAWO,OACtB/yB,KAAKuyB,gBAAgBnD,KAAOA,EAE5B,IAAIqhC,EAAQzwD,KAAK0wD,kBAAkBplD,GAC/B7F,EAAuB,GAAhBgrD,EAAM7pD,OACb5G,KAAKL,OAAOisC,YACI,GAAhB6kB,EAAM7pD,OACJ6pD,EAAM,GACNzwD,KAAKL,OAAOqrC,YAAY,KAAMylB,EAAMp0C,EAAA6c,kBAAkBu3B,EAAMA,EAAM7pD,OAAS,KAIjF,OAFA5G,KAAKuyB,gBAAgBnD,KAAOA,EAAK8D,OACjCV,EAAW6B,QAAQjF,GACZ3pB,GAGTilD,EAAAzoD,UAAA0vD,sBAAA,SAAsBtlD,GACpB,IAAI1M,EAASK,KAAKL,OAClB,GAAI0M,EAAUZ,MAKZ,OAJAzL,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfhb,EAAUZ,MAAMtH,OAEXxE,EAAOmtC,oBAEhB,IAAI1d,EAAOpvB,KAAKuyB,gBAAgBnD,KAC5BsD,EAAatD,EAAKsD,WACtB,OAAkB,MAAdA,GACF1yB,KAAKgc,MACHE,EAAAnC,eAAe44C,qFACftmD,EAAUlI,OAELxE,EAAOmtC,sBAEhB1d,EAAKrrB,IAAG,GACDpE,EAAOyrC,YAAY1Y,KAG5Bg4B,EAAAzoD,UAAA2vD,yBAAA,SAAyBvlD,GACvB,IAAI1M,EAASK,KAAKL,OACd8L,EAAQY,EAAUZ,MACtB,GAAIA,EAKF,OAJAzL,KAAKgc,MACHE,EAAAnC,eAAesN,wBACf5b,EAAMtH,OAEDxE,EAAOmtC,oBAGhB,IAAI1d,EAAOpvB,KAAKuyB,gBAAgBnD,KAC5BqD,EAAgBrD,EAAKqD,cACzB,OAAqB,MAAjBA,GACFzyB,KAAKgc,MACHE,EAAAnC,eAAe64C,8EACfvmD,EAAUlI,OAELxE,EAAOmtC,sBAEhB1d,EAAKrrB,IAAG,IACDpE,EAAOyrC,YAAY3Y,KAG5Bi4B,EAAAzoD,UAAA4vD,mBAAA,SAAmBxlD,GACjB,IAAIkmB,EAAkBvyB,KAAKuyB,gBACvB5yB,EAASK,KAAKL,OAEd8L,EAAQ8mB,EAAgBnC,oBACxBoC,EAAaD,EAAgBnD,KAC7BA,EAAOoD,EAAWO,OACtBR,EAAgBnD,KAAOA,EACvB,IAAIsD,EAAa,SAAWjnB,EAC5B2jB,EAAKsD,WAAaA,EAClB,IAAID,EAAgB,YAAchnB,EAClC2jB,EAAKqD,cAAgBA,EAErB,IAAIrjB,EAAOpP,KAAKyuD,iBAAiBpiD,EAAUA,WACvCwmD,EAAW7yD,KAAK8yD,cAClB9yD,KAAKwvD,kBAAkBnjD,EAAUjC,UAAW+R,EAAAuE,KAAKG,IAAG,KACpD7gB,KAAK8qD,aAKPv4B,EAAgBnD,KAAOA,EAAK8D,OAC5BX,EAAgBjC,oBAChB,IAAIyiC,EAAa3jC,EAAKtrB,MAAK,IAS3B,OARAsrB,EAAK0D,MACH,KAKFN,EAAW6B,QAAQjF,GAEZzvB,EAAOqrC,YAAYtY,GACxB/yB,EAAO6rC,WAAW/Y,EAChBsgC,EACI3jD,EACAzP,EAAOqrC,YAAY,MACjB57B,EACAzP,EAAOyrC,YAAY3Y,EAAeogC,IACjCx2C,EAAAsT,WAAWub,QAEnB6nB,EAAa12C,EAAAsT,WAAW8K,YAAcpe,EAAAsT,WAAWub,OAGtDwf,EAAAzoD,UAAA6vD,sBAAA,SAAsBzlD,GACpB,OAAOrM,KAAKL,OAAOisC,aAGrB8e,EAAAzoD,UAAA8vD,2BAAA,SAA2B1lD,GACzB,IAAIlG,EAAOnG,KAAKwvD,kBAAkBnjD,EAAUrF,WAAYmV,EAAAuE,KAAKc,KAAI,KAKjE,OAJIxhB,KAAK8qD,aAAe3uC,EAAAuE,KAAKc,OAC3Brb,EAAOnG,KAAKL,OAAO2rC,WAAWnlC,GAC9BnG,KAAK8qD,YAAc3uC,EAAAuE,KAAKc,MAEnBrb,GAGTukD,EAAAzoD,UAAA+vD,oBAAA,SAAoB3lD,GAGlB,IAAIkmB,EAAkBvyB,KAAKuyB,gBACvB9mB,EAAQ8mB,EAAgBnC,oBACxBoC,EAAaD,EAAgBnD,KAC7BA,EAAOoD,EAAWO,OACtBR,EAAgBnD,KAAOA,EACvB,IAAIsD,EAAatD,EAAKsD,WAAa,SAAWjnB,EAC9C2jB,EAAKsD,WAAaA,EAClB,IAAID,EAAgB,YAAchnB,EAClC2jB,EAAKqD,cAAgBA,EACrB,IAAIugC,EAAc,UAAYvnD,EAG1B9L,EAASK,KAAKL,OACdkvD,EAAWxiD,EAAUvH,YACrB9E,KAAKyuD,iBAA4BpiD,EAAUvH,aAC3C,EACA+tD,EAA0B,EAC1BI,GAAa,EACjB,GAAI5mD,EAAUjC,UAAW,CACvByoD,EAAW7yD,KAAK8yD,cACd9yD,KAAKkvD,4BAAwC7iD,EAAUjC,UAAW+R,EAAAuE,KAAKW,KAAI,GAC3ErhB,KAAK8qD,aAGP,IAAIoI,EAAUvzD,EAAOoyC,qBAAqB8gB,GACtCx2C,EAAA0Y,gBAAgBm+B,IAAY72C,EAAA2Y,aAAa6C,QAC3C7lB,OAAOqK,EAAA6c,kBAAkBg6B,IAAY72C,EAAAsT,WAAWC,KACf,GAA7BvT,EAAAyb,iBAAiBo7B,KAAeD,GAAa,IAKnDJ,EAAW7yD,KAAK8yD,cACd9yD,KAAKkvD,4BAAwC7iD,EAAUjC,UAAW+R,EAAAuE,KAAKW,KAAI,GAC3ErhB,KAAK8qD,kBAIP+H,EAAWlzD,EAAO8nC,UAAU,GAC5BwrB,GAAa,EAEf,IAAIE,EAAW9mD,EAAU2C,YACrBhP,KAAKwvD,kBAA8BnjD,EAAU2C,YAAamN,EAAAuE,KAAKc,KAAI,KACnE,EACA4xC,EAAWpzD,KAAKyuD,iBAAiBpiD,EAAUA,WAG/CkmB,EAAgBnD,KAAOA,EAAK8D,OAC5BX,EAAgBjC,oBAChB,IAAI+iC,EAAejkC,EAAKtrB,MAAM,KAC9BsrB,EAAK0D,MACH,KAKF,IAAIigC,EAAaE,GAAc7jC,EAAKtrB,MAAK,IACrCmvD,EAAYzgC,EAAW6B,QAAQjF,GAC9BoD,EAAW+B,mBAAmBnF,GAEnC,IAAIkkC,EAAa,IAAIx9C,MACjB+4C,GAAUyE,EAAW/3C,KAAKszC,GAE9B,IAAI0E,EAAc,IAAIz9C,MAyBtB,OAxBIu9C,EACFE,EAAYh4C,KACV5b,EAAOqrC,YAAYvY,GACjB9yB,EAAOyrC,YAAY1Y,EAAY/yB,EAAO0oC,YAAYhsB,EAAAuc,QAAQC,OAAQg6B,IAClEO,GACC/2C,EAAAsT,WAAWub,QAGhBqoB,EAAYh4C,KACV5b,EAAOyrC,YAAY1Y,EAAY/yB,EAAO0oC,YAAYhsB,EAAAuc,QAAQC,OAAQg6B,KAEpEU,EAAYh4C,KAAK63C,IAEfD,GAAUI,EAAYh4C,KAAK43C,GAC/BI,EAAYh4C,KACV5b,EAAOyrC,YAAY4nB,IAGrBM,EAAW/3C,KACT5b,EAAO6rC,WAAWwnB,EAChBrzD,EAAOqrC,YAAY,KAAMuoB,EAAal3C,EAAAsT,WAAWub,QAI9CvrC,EAAOqrC,YACZtY,EACA4gC,EACAP,EACI12C,EAAAsT,WAAW8K,YACXpe,EAAAsT,WAAWub,OAInBwf,EAAAzoD,UAAAgwD,mBAAA,SAAmB5lD,GACjB,IAAI1M,EAASK,KAAKL,OACd4yB,EAAkBvyB,KAAKuyB,gBACvBxkB,EAAS1B,EAAU0B,OACnBC,EAAU3B,EAAU2B,QAGpB6kD,EAAW7yD,KAAK8yD,cAClB9yD,KAAKkvD,4BAA4B7iD,EAAUjC,UAAW+R,EAAAuE,KAAKW,KAAI,GAC/DrhB,KAAK8qD,aAGP,IACG9qD,KAAKygB,QAAQmB,eACd5hB,KAAKuyB,gBAAgBzuB,MAAMzB,EAAAqB,YAAYiiB,QAAUtjB,EAAAqB,YAAY8vD,iBAC7D,CAEA,IAAIC,EAAkB9zD,EAAOoyC,qBAAqB8gB,GAClD,GACEx2C,EAAA0Y,gBAAgB0+B,IAAoBp3C,EAAA2Y,aAAa6C,OACjDxb,EAAA6c,kBAAkBu6B,IAAoBp3C,EAAAsT,WAAWC,IAEjD,OAAOvT,EAAAyb,iBAAiB27B,GACpBzzD,KAAKyuD,iBAAiB1gD,GACtBC,EACEhO,KAAKyuD,iBAAiBzgD,GACtBrO,EAAOisC,YAIbinB,EAAW7yD,KAAK8yD,cACd9yD,KAAKkvD,4BAA4B7iD,EAAUjC,UAAW+R,EAAAuE,KAAKW,KAAI,GAC/DrhB,KAAK8qD,aAMX,IAAIt4B,EAAaD,EAAgBnD,KAC7BskC,EAAalhC,EAAWO,OAC5BR,EAAgBnD,KAAOskC,EACvB,IAAIC,EAAa3zD,KAAKyuD,iBAAiB1gD,GACvCwkB,EAAgBnD,KAAOskC,EAAWxgC,OAElC,IAAI0gC,EAA6B,EACjC,GAAI5lD,EAAS,CACX,IAAI6lD,EAAcrhC,EAAWO,OAC7BR,EAAgBnD,KAAOykC,EACvBD,EAAc5zD,KAAKyuD,iBAAiBzgD,GACpCukB,EAAgBnD,KAAOykC,EAAY3gC,OACnCV,EAAWgC,cAAck/B,EAAYG,QAErCrhC,EAAW+B,mBAAmBm/B,GAEhC,OAAO/zD,EAAO+rC,SAASmnB,EAAUc,EAAYC,IAG/ClJ,EAAAzoD,UAAAiwD,uBAAA,SAAuB7lD,GACrB,IAAI1M,EAASK,KAAKL,OACd4yB,EAAkBvyB,KAAKuyB,gBACvBpsB,EAAsB,EACtBipB,EAAOmD,EAAgBnD,KAK3B,GAFAA,EAAKrrB,IAAG,GAEJsI,EAAU/K,MAAO,CACnB,IAAI6D,EAAaiqB,EAAKjqB,WACtB,GAAIA,GAAcgX,EAAAuE,KAAKc,KAOrB,OANAxhB,KAAKkvD,4BAA4B7iD,EAAU/K,MAAO6D,EAAU,GAC5DnF,KAAKgc,MACHE,EAAAnC,eAAeo1C,mCACf9iD,EAAU/K,MAAM6C,MAAOnE,KAAK8qD,YAAYjwC,WAAY1V,EAAW0V,YAEjE7a,KAAK8qD,YAAc3uC,EAAAuE,KAAKc,KACjB7hB,EAAOmtC,oBAEhB3mC,EAAOnG,KAAKwvD,kBACVnjD,EAAU/K,MACV6D,EAAU,EAEVotB,EAAgB3uB,GAAGvB,EAAAqB,YAAY4jB,eAC5B,EACA,GAIA8H,EAAK0F,YAAY3uB,EAAMhB,IAAaiqB,EAAKrrB,IAAG,GAInD,OAAIqY,EAAAvH,gBAAgBxI,GAAmBlG,GAAcxG,EAAOisC,YAGrDxc,EAAKxrB,GAAE,MACVjE,EAAOyrC,YAAYp5B,OAAOod,EAAKuD,aAAc,EAAGxsB,GAChDxG,EAAOmsC,aAAa3lC,IAG1BukD,EAAAzoD,UAAAkwD,uBAAA,SAAuB9lD,GACrB,IAAI1M,EAASK,KAAKL,OACd4yB,EAAkBvyB,KAAKuyB,gBAEvB1iB,EAAQxD,EAAUwD,MAClBikD,EAAWjkD,EAAMjJ,OACrB,IAAKktD,EACH,OAAO9zD,KAAKwvD,kBAAkBnjD,EAAUjC,UAAW+R,EAAAuE,KAAKc,KAAI,KAI9D,IAAIuyC,EAAUxhC,EAAgBnC,oBAC1BoC,EAAaD,EAAgBnD,KAG7B4kC,EAAYzhC,EAAgBhD,aAAapT,EAAAuE,KAAKQ,KAAK,GACnD+yC,EAAiBD,EAAUjnC,MAG3BmnC,EAAS,IAAIp+C,MAAqB,EAAIg+C,GAC1CI,EAAO,GAAKv0D,EAAOirC,eACjBqpB,EACAj0D,KAAKwvD,kBAAkBnjD,EAAUjC,UAAW+R,EAAAuE,KAAKQ,IAAG,MAMtD,IAFA,IAAIizC,EAAa,EACbC,GAAgB,EACX/zD,EAAI,EAAGA,EAAIyzD,IAAYzzD,EAAG,CACjC,IACIoL,EADQoE,EAAMxP,GACAoL,MACdA,EACFyoD,EAAOC,KAAgBx0D,EAAOyrC,YAAY,OAAS/qC,EAAEwa,SAAS,IAAM,IAAMk5C,EACxEp0D,EAAO6oC,aAAansB,EAAAqZ,SAASC,MAC3Bh2B,EAAOmpC,eAAemrB,EAAgB53C,EAAAsT,WAAWC,KACjD5vB,KAAKwvD,kBAAkB/jD,EAAO0Q,EAAAuE,KAAKQ,IAAG,OAI1CkzC,EAAe/zD,EAInBkyB,EAAgBrC,cAAc8jC,GAG9BE,EAAOC,GAAcx0D,EAAOyrC,aAAagpB,GAAgB,EACnD,OAASA,EAAav5C,SAAS,IAC/B,SACA,IAAMk5C,GAGZ,IAAIM,EAAe10D,EAAOqrC,YAAY,SAAW+oB,EAASG,EAAQ73C,EAAAsT,WAAWub,MACzEopB,GAAgB,EAChBC,GAAuB,EACvBC,GAAe,EACfC,GAAkB,EACtB,IAASp0D,EAAI,EAAGA,EAAIyzD,IAAYzzD,EAAG,CACjC,IACIiL,EADQuE,EAAMxP,GACKiL,WACnBmnD,EAAgBnnD,EAAW1E,OAG3BwoB,EAAOoD,EAAWO,OACtBR,EAAgBnD,KAAOA,EACvB,IAAIsD,EAAa,SAAWqhC,EAC5B3kC,EAAKsD,WAAaA,EAElB,IAAIgiC,EAASr0D,GAAKyzD,EAAW,EACzBa,EAAYD,EAAShiC,EAAa,QAAUryB,EAAI,GAAGwa,SAAS,IAAM,IAAMk5C,EACxEtD,EAAQ,IAAI36C,MAAqB,EAAI28C,GACzChC,EAAM,GAAK4D,EAGX,IAFA,IAAIO,EAAQ,EACR7B,GAAa,EACRrwC,EAAI,EAAGA,EAAI+vC,IAAiB/vC,EAAG,CACtC,IAAIjd,EAAOzF,KAAKyuD,iBAAiBnjD,EAAWoX,IAC5C,GAAIrG,EAAA0Y,gBAAgBtvB,IAAS4W,EAAA2Y,aAAa09B,MACxCjC,EAAMmE,KAAWnvD,EACb2pB,EAAKtrB,MAAK,KAA6B,CACzCivD,GAAa,EACb,OAINtC,EAAM7pD,OAASguD,GACX7B,GAAc2B,KACXtlC,EAAKxrB,GAAE,KAAqB0wD,GAAgB,GAC5CllC,EAAKxrB,GAAE,KAA6B2wD,GAAuB,GAC3DnlC,EAAKxrB,GAAE,KAAoB4wD,GAAe,GAC1CplC,EAAKxrB,GAAE,MAAuB6wD,GAAkB,IAIvDrlC,EAAK0D,MACH,KAGFP,EAAgBnD,KAAOA,EAAK8D,OAC5BmhC,EAAe10D,EAAOqrC,YAAY2pB,EAAWlE,EAAOp0C,EAAAsT,WAAWub,MAWjE,OATA3Y,EAAgBjC,oBAGZ8jC,GAAgB,IACdE,GAAe9hC,EAAWzuB,IAAG,GAC7BwwD,GAAsB/hC,EAAWzuB,IAAG,GACpCywD,GAAchiC,EAAWzuB,IAAG,GAC5B0wD,GAAiBjiC,EAAWzuB,IAAG,KAE9BswD,GAGT3J,EAAAzoD,UAAAmwD,sBAAA,SAAsB/lD,GACpB,IAAI+iB,EAAOpvB,KAAKuyB,gBAAgBnD,KAShC,OANAA,EAAKrrB,IAAG,GAGRqrB,EAAKrrB,IAAG,GAGD8lD,EAAAgL,aAAa70D,KAAM,KAAMqM,IAGlCq+C,EAAAzoD,UAAAowD,oBAAA,SAAoBhmD,GAQlB,OAJArM,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfhb,EAAUlI,OAELnE,KAAKL,OAAOmtC,qBAOrB4d,EAAAzoD,UAAAqsD,yBAAA,SAAyBjiD,EAA8ByoD,QAAA,IAAAA,OAAA,GACrD,IAAInpC,EAAU3rB,KAAK2rB,QACf4G,EAAkBvyB,KAAKuyB,gBACvBlkB,EAAehC,EAAUgC,aACzB0mD,EAAkB1mD,EAAazH,OAGnC,GAAIkuD,GACFviC,GAAmBvyB,KAAK2rD,uBACxBt/C,EAAU7I,QAAU6I,EAAU7I,OAAOZ,MAAQwZ,EAAA3Z,SAAS2S,OACrD,CAMD,IAAK,IAAI/U,EAAI,EAAGA,EAAI00D,IAAmB10D,EACrCL,KAAK0uD,yBAAyBrgD,EAAahO,IAE7C,OAAO,EAIT,IAAI20D,EAAe,IAAIl/C,MACnBsZ,EAAOpvB,KAAKuyB,gBAAgBnD,KAC5BvP,EAAW7f,KAAK6f,SACpB,IAASxf,EAAI,EAAGA,EAAI00D,IAAmB10D,EAAG,CACxC,IAAIuH,EAAcyG,EAAahO,GAC3BO,EAAOgH,EAAYhH,KAAKmF,KACxB3B,EAAoB,KACpByqD,EAA0B,EAC9B,GAAIjnD,EAAYxD,KAAM,CAKpB,KAJAA,EAAOyb,EAASkvC,YACdnnD,EAAYxD,KACZgrB,EAAK/B,0BAEI,SACPzlB,EAAY9C,cACd+pD,EAAW7uD,KAAKwvD,kBACd5nD,EAAY9C,YACZV,EAAI,UAKH,KAAIwD,EAAY9C,YAchB,CACL9E,KAAKgc,MACHE,EAAAnC,eAAei1C,cACfpnD,EAAYhH,KAAKuD,MAAM8qD,OAEzB,SAbA,GALAJ,EAAW7uD,KAAKkvD,4BACdtnD,EAAY9C,YACZqX,EAAAuE,KAAKc,KAAI,GAGPxhB,KAAK8qD,aAAe3uC,EAAAuE,KAAKc,KAAM,CACjCxhB,KAAKgc,MACHE,EAAAnC,eAAeo1C,mCACfvnD,EAAYzD,MAAOnE,KAAK8qD,YAAYjwC,WAAY,UAElD,SAEFzW,EAAOpE,KAAK8qD,YAQd,IAAImK,GAAY,EAChB,GAAIrtD,EAAYhE,GAAGvB,EAAAqB,YAAY+nB,OAC7B,GAAIojC,EAEF,GADAA,EAAW7uD,KAAKL,OAAOoyC,qBAAqB8c,GACxCxyC,EAAA0Y,gBAAgB85B,IAAaxyC,EAAA2Y,aAAa6C,MAAO,CACnD,IAAIrJ,EAAQ,IAAIs7B,EAAAh9B,MAAMnB,EAAS/qB,GAAO,EAAGwD,GACzC,OAAQiY,EAAA6c,kBAAkB21B,IACxB,KAAKxyC,EAAAsT,WAAWC,IACdpB,EAAQA,EAAMvI,yBACZvE,QACErF,EAAAyb,iBAAiB+2B,GACjB,IAGJ,MAEF,KAAKxyC,EAAAsT,WAAWE,IACdrB,EAAQA,EAAMvI,yBACZvE,QACErF,EAAA8c,oBAAoB01B,GACpBxyC,EAAA25B,qBAAqB6Y,KAGzB,MAEF,KAAKxyC,EAAAsT,WAAWG,IACdtB,EAAQA,EAAMrI,uBAA4B9J,EAAA+c,iBAAiBy1B,IAC3D,MAEF,KAAKxyC,EAAAsT,WAAWI,IACdvB,EAAQA,EAAMrI,uBAAuB9J,EAAAgd,iBAAiBw1B,IACtD,MAEF,QAEE,OADA78C,QAAO,GACAhS,KAAKL,OAAOmtC,oBAIvB,IAAIxa,EAAeC,EAAgBnD,KAAKkD,aACxC,GAAKA,GACA,GAAIA,EAAalN,IAAIxkB,GAKxB,OAJAZ,KAAKgc,MACHE,EAAAnC,eAAewL,uBACf3d,EAAYhH,KAAKuD,MAAOvD,GAEnBZ,KAAKL,OAAOmtC,yBANFva,EAAgBnD,KAAKkD,aAAeA,EAAe,IAAIvT,IAQ1EuT,EAAavuB,IAAInD,EAAM4tB,GACvBymC,GAAY,OAEZj1D,KAAK+b,QACHG,EAAAnC,eAAe01C,4DACf7nD,EAAYzD,YAIhBnE,KAAKgc,MACHE,EAAAnC,eAAem7C,wCACfttD,EAAYzD,OAIlB,IAAK8wD,EAAW,CACVzmC,OAAK,EAKPA,EAHA5mB,EAAY9D,MAAMzB,EAAAqB,YAAY08C,IAAM/9C,EAAAqB,YAAY+nB,QAChD2D,EAAKxrB,GAAE,MAECwrB,EAAKiE,eAAejvB,EAAMxD,GAAM,EAAOgH,GAEvC2qB,EAAgBjD,SAASlrB,EAAMxD,EAAMgH,GAE3CinD,GACFmG,EAAaz5C,KAAKvb,KAAKm1D,2BAA2BvtD,EAAYhH,KAAMiuD,IAChErgC,EAAMpqB,KAAKR,GAAG,KAChBwrB,EAAKa,gBAAgBzB,EAAMzB,OAAQqC,EAAK0F,YAAY+5B,EAAUzqD,KAEvDoqB,EAAMpqB,KAAKR,GAAG,KACvBwrB,EAAKa,gBAAgBzB,EAAMzB,OAAO,IAIxC,OAAOioC,EAAapuD,OACO,GAAvBouD,EAAapuD,OACXouD,EAAa,GACbh1D,KAAKL,OAAOqrC,YAAY,KAAMgqB,EAAc34C,EAAAsT,WAAWub,MACzD,GAGNwf,EAAAzoD,UAAAqwD,qBAAA,SAAqBjmD,GACnB,OAAOrM,KAAKwvD,kBAAkBnjD,EAAUrF,WAAYmV,EAAAuE,KAAKc,KAAI,MAG/DkpC,EAAAzoD,UAAAswD,sBAAA,SAAsBlmD,GACpB,IAAI1M,EAASK,KAAKL,OAGdkzD,EAAW7yD,KAAK8yD,cAClB9yD,KAAKkvD,4BAA4B7iD,EAAUjC,UAAW+R,EAAAuE,KAAKW,KAAI,GAC/DrhB,KAAK8qD,aAGP,IACG9qD,KAAKygB,QAAQmB,eACd5hB,KAAKuyB,gBAAgBzuB,MAAMzB,EAAAqB,YAAYiiB,QAAUtjB,EAAAqB,YAAY8vD,iBAC7D,CAEA,IAAIC,EAAkB9zD,EAAOoyC,qBAAqB8gB,GAClD,GACEx2C,EAAA0Y,gBAAgB0+B,IAAoBp3C,EAAA2Y,aAAa6C,OACjDxb,EAAA6c,kBAAkBu6B,IAAoBp3C,EAAAsT,WAAWC,KAEjD,IAAKvT,EAAAyb,iBAAiB27B,GAAkB,OAAO9zD,EAAOisC,iBAItDinB,EAAW7yD,KAAK8yD,cACd9yD,KAAKkvD,4BAA4B7iD,EAAUjC,UAAW+R,EAAAuE,KAAKW,KAAI,GAC/DrhB,KAAK8qD,aAMX,IAAIv4B,EAAkBvyB,KAAKuyB,gBACvB9mB,EAAQ8mB,EAAgBnC,oBACxBoC,EAAaD,EAAgBnD,KAC7BA,EAAOoD,EAAWO,OACtBR,EAAgBnD,KAAOA,EACvB,IAAIsD,EAAa,SAAWjnB,EAC5B2jB,EAAKsD,WAAaA,EAClB,IAAID,EAAgB,YAAchnB,EAClC2jB,EAAKqD,cAAgBA,EAErB,IAAIrjB,EAAOpP,KAAKyuD,iBAAiBpiD,EAAUA,WAGvC0mD,EAAa3jC,EAAKtrB,MAAK,IA0B3B,OAvBAyuB,EAAgBnD,KAAOA,EAAK8D,OAC5BX,EAAgBjC,oBAChBlB,EAAK0D,MACH,KAMGN,EAAW+B,mBAAmBnF,GAExBzvB,EAAOqrC,YAAYtY,GAC5B/yB,EAAO6rC,WAAW/Y,EAChB9yB,EAAO+rC,SAASmnB,EACdE,EACI3jD,EACAzP,EAAOqrC,YAAY,MACjB57B,EACAzP,EAAOyrC,YAAY3Y,IAClBpW,EAAAsT,WAAWub,SAGoB7uB,EAAAsT,WAAWub,OAWzDwf,EAAAzoD,UAAAmzD,sBAAA,SACEhtD,EACAitD,EACAC,GAEAtjD,OAAO5J,EAAQxE,GAAGvB,EAAAqB,YAAYipB,UAC9B,IAAIvoB,EAAOgE,EAAQhE,KACnB,QACGkxD,GACDlxD,EAAKR,GAAE,IACPyxD,EAAezxD,GAAE,IACjBQ,EAAKg0B,KAAOi9B,EAAej9B,MACtBp4B,KAAK8qD,YAAcuK,GAAgBzyD,MACnC5C,KAAK8qD,YAAc1mD,GAAMxB,MAE9B,OACA,OACE,IAAIu1B,EAAQ/zB,EAAKu4C,yBAAyBxgC,EAAAuE,KAAKG,KAC/C,OAAO7gB,KAAKL,OAAO8nC,UACQ,GAAzBr/B,EAAQqkB,kBACJujB,QAAQ5nC,EAAQskB,uBAAyByL,GAASA,EAClD,GAGR,OACA,OACA,QACE,IAAIo9B,EAAOntD,EAAQhE,KAAK6zB,wBAAwB9b,EAAAuE,KAAKG,KACrD,OAAO7gB,KAAKL,OAAO8nC,UACQ,GAAzBr/B,EAAQqkB,kBACJujB,QAAQ5nC,EAAQskB,sBAAwB6oC,EACxC,GAGR,OACA,OACE,OAAOv1D,KAAKL,OAAO8nC,UACQ,GAAzBr/B,EAAQqkB,kBACJujB,QAAQ5nC,EAAQskB,sBAChB,GAGR,OACA,OACE,IAAKtkB,EAAQujB,QAAQlL,QAAQkB,SAC3B,OAAO3hB,KAAKL,OAAO8nC,UACQ,GAAzBr/B,EAAQqkB,kBACJujB,QAAQ5nC,EAAQskB,sBAChB,GAKV,OACA,OACE,OAAgC,GAAzBtkB,EAAQqkB,kBACXzsB,KAAKL,OAAOkoC,UACVmI,QAAQ5nC,EAAQskB,sBAChBujB,SAAS7nC,EAAQskB,uBAEnB1sB,KAAKL,OAAOkoC,UAAU,GAE5B,QAEE,IAAMz/B,EAAQ0e,aAAagjC,EAAAjrC,eAAe1M,UAAYkjD,GAAkBl5C,EAAAuE,KAAKY,IAC3E,OAAOthB,KAAKL,OAAOwoC,UAAgC//B,EAASwkB,oBAG9D5sB,KAAK8qD,YAAc3uC,EAAAuE,KAAKY,IAE1B,QACE,OAAOthB,KAAKL,OAAOsoC,UAAgC7/B,EAASwkB,oBAE9D,QAEE,OADA5a,QAAO,GACAhS,KAAKL,OAAOmtC,sBAKzB4d,EAAAzoD,UAAAutD,kBAAA,SACExoD,EACAquD,EACAG,EACAC,GAIA,IAAItvD,EACJ,OAHAnG,KAAK8qD,YAAcuK,EAGXruD,EAAWpE,MACjB,KAAKwZ,EAAA3Z,SAASgR,UACZtN,EAAOnG,KAAK01D,2BAAgD1uD,EAAYquD,GACxE,MAEF,KAAKj5C,EAAA3Z,SAASiR,OACZvN,EAAOnG,KAAK21D,wBAA0C3uD,EAAYquD,GAClE,MAEF,KAAKj5C,EAAA3Z,SAASU,KACZgD,EAAOnG,KAAK41D,sBAAsC5uD,EAAYquD,GAC9D,MAEF,KAAKj5C,EAAA3Z,SAASmR,MACZzN,EAAOnG,KAAK61D,uBAAwC7uD,EAAYquD,GAChE,MAEF,KAAKj5C,EAAA3Z,SAASW,cACZ+C,EAAOnG,KAAK81D,+BAAwD9uD,EAAYquD,GAChF,MAEF,KAAKj5C,EAAA3Z,SAASsR,SACZ5N,EAAOnG,KAAK+1D,0BAA8C/uD,EAAYquD,GACtE,MAEF,KAAKj5C,EAAA3Z,SAASS,WACd,KAAKkZ,EAAA3Z,SAASO,MACd,KAAKoZ,EAAA3Z,SAASK,KACd,KAAKsZ,EAAA3Z,SAASgS,KACd,KAAK2H,EAAA3Z,SAAS+R,MACd,KAAK4H,EAAA3Z,SAASM,KACZoD,EAAOnG,KAAKg2D,4BACYhvD,EACtBquD,EACc,GAAdG,GAEF,MAEF,KAAKp5C,EAAA3Z,SAASuR,WACZ7N,EAAOnG,KAAKi2D,4BAAkDjvD,EAAYquD,GAC1E,MAEF,KAAKj5C,EAAA3Z,SAASI,QACZsD,EAAOnG,KAAKk2D,yBAA4ClvD,EAAYquD,GACpE,MAEF,KAAKj5C,EAAA3Z,SAASyR,IACZ/N,EAAOnG,KAAKm2D,qBAAoCnvD,EAAYquD,GAC5D,MAEF,KAAKj5C,EAAA3Z,SAAS2R,cACZjO,EAAOnG,KAAKo2D,+BAAwDpvD,EAAYquD,GAChF,MAEF,KAAKj5C,EAAA3Z,SAASY,eACZ8C,EAAOnG,KAAKq2D,gCACgBrvD,EAC1BquD,EACc,GAAdG,GAEF,MAEF,KAAKp5C,EAAA3Z,SAAS6R,QACZnO,EAAOnG,KAAKs2D,yBAA4CtvD,EAAYquD,GACpE,MAEF,KAAKj5C,EAAA3Z,SAASkS,aACZxO,EAAOnG,KAAKu2D,8BAAsDvvD,EAAYquD,GAC9E,MAEF,KAAKj5C,EAAA3Z,SAASmS,YACZzO,EAAOnG,KAAKw2D,6BAAoDxvD,EAAYquD,GAC5E,MAEF,QACEr1D,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAEbgC,EAAOnG,KAAKL,OAAOmtC,oBAIvB,IAAIge,EAAc9qD,KAAK8qD,YASvB,OARkB,GAAd0K,GAAyC1K,GAAeuK,GAC1DlvD,EAAOnG,KAAKy2D,kBAAkBtwD,EAAM2kD,EAAauK,EAAgBG,EAAgBC,EAAUzuD,GAC3FhH,KAAK8qD,YAAcuK,GACF,GAARI,IACTtvD,EAAOnG,KAAK02D,uBAAuBvwD,EAAM2kD,IAGvC9qD,KAAKygB,QAAQ+P,WAAWxwB,KAAKwyD,iBAAiBrsD,EAAMa,EAAW7C,OAC5DgC,GAGTukD,EAAAzoD,UAAAitD,4BAAA,SACEloD,EACAquD,EACAI,GAEA,OAAOz1D,KAAKwvD,kBACVxoD,EACAquD,GAAkBl5C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLw0C,EAAc,EAElBI,IAIJ/K,EAAAzoD,UAAA8vC,qBAAA,SACE/qC,EACAquD,EACAG,EACAC,GAEA,OAAOz1D,KAAKL,OAAOoyC,qBACjB/xC,KAAKwvD,kBAAkBxoD,EAAYquD,EAAgBG,EAAgBC,KAIvE/K,EAAAzoD,UAAAw0D,kBAAA,SACEtwD,EACAszB,EACAxyB,EACAuuD,EACAC,EACA3H,GAEA97C,OAAqB,GAAdwjD,GACP,IAAI71D,EAASK,KAAKL,OAGlB,OAAiB,IAAb85B,EAAS72B,MACXoP,OAAkB,IAAX/K,EAAOrE,MACd5C,KAAKgc,MACHE,EAAAnC,eAAeo1C,mCACfrB,EAAW3pD,MAAOs1B,EAAS5e,WAAY5T,EAAO4T,YAEzClb,EAAOmtC,qBAID,IAAX7lC,EAAOrE,KAA8BjD,EAAO2rC,WAAWnlC,IAEtDszB,EAAS7H,eAAe3qB,IACT,GAAduuD,GACFx1D,KAAKgc,MACHE,EAAAnC,eAAe48C,sDACf7I,EAAW3pD,MAAOs1B,EAAS5e,WAAY5T,EAAO4T,YAKhD4e,EAAS71B,GAAE,GAGTqD,EAAOrD,GAAE,GACM,IAAb61B,EAAS72B,KAGI,IAAXqE,EAAOrE,OACTuD,EAAOxG,EAAO0oC,YAAYhsB,EAAAuc,QAAQg+B,WAAYzwD,IAM5B,IAAXc,EAAOrE,OAChBuD,EAAOxG,EAAO0oC,YAAYhsB,EAAAuc,QAAQi+B,UAAW1wD,IAMtCc,EAAOrD,GAAE,GAMZuC,EAHW,IAAbszB,EAAS72B,KACPqE,EAAOrD,GAAE,GACPqD,EAAOrD,GAAE,IACJjE,EAAO0oC,YAAYhsB,EAAAuc,QAAQk+B,cAAe3wD,GAE1CxG,EAAO0oC,YAAYhsB,EAAAuc,QAAQm+B,cAAe5wD,GAG/Cc,EAAOrD,GAAE,IACJjE,EAAO0oC,YAAYhsB,EAAAuc,QAAQo+B,cAAe7wD,GAE1CxG,EAAO0oC,YAAYhsB,EAAAuc,QAAQq+B,cAAe9wD,GAMjDc,EAAOrD,GAAE,GACPqD,EAAOrD,GAAE,IACJjE,EAAO0oC,YAAYhsB,EAAAuc,QAAQs+B,cAAe/wD,GAE1CxG,EAAO0oC,YAAYhsB,EAAAuc,QAAQu+B,cAAehxD,GAG/Cc,EAAOrD,GAAE,IACJjE,EAAO0oC,YAAYhsB,EAAAuc,QAAQw+B,cAAejxD,GAE1CxG,EAAO0oC,YAAYhsB,EAAAuc,QAAQy+B,cAAelxD,IAOvD6L,OAAmB,GAAZ/K,EAAOxD,MAAyB,sBACvC0C,EAAOxG,EAAO2rC,WAAWnlC,IAIlBszB,EAAS71B,GAAE,IAAuBqD,EAAOrD,GAAE,GAKhDuC,EAFW,IAAXc,EAAOrE,KACL62B,EAAS71B,GAAE,IACNjE,EAAO0oC,YACZ5O,EAAS71B,GAAE,GACPyY,EAAAuc,QAAQ0+B,gBACRj7C,EAAAuc,QAAQ2+B,gBACZpxD,GAGKxG,EAAO0oC,YACZ5O,EAAS71B,GAAE,GACPyY,EAAAuc,QAAQ4+B,gBACRn7C,EAAAuc,QAAQ6+B,gBACZtxD,GAMAszB,EAAS71B,GAAE,IACNjE,EAAO0oC,YACZ5O,EAAS71B,GAAE,GACPyY,EAAAuc,QAAQ8+B,gBACRr7C,EAAAuc,QAAQ++B,gBACZxxD,GAGKxG,EAAO0oC,YACZ5O,EAAS71B,GAAE,GACPyY,EAAAuc,QAAQg/B,gBACRv7C,EAAAuc,QAAQi/B,gBACZ1xD,GAQFszB,EAAS71B,GAAE,IAGRqD,EAAOrD,GAAE,MACZuC,EAAOxG,EAAO0oC,YAAYhsB,EAAAuc,QAAQk/B,QAAS3xD,IAIpCc,EAAOrD,GAAE,KAClBuC,EAAOxG,EAAO0oC,YACZphC,EAAOrD,GAAE,GAAqByY,EAAAuc,QAAQm/B,UAAY17C,EAAAuc,QAAQo/B,UAC1Dh4D,KAAK02D,uBAAuBvwD,EAAMszB,IAEpCg8B,EAAQ,GAKJh8B,EAAS71B,GAAE,KAET61B,EAASrB,KAAOnxB,EAAOmxB,OACzBjyB,EAAOnG,KAAK02D,uBAAuBvwD,EAAMszB,GACzCg8B,EAAQ,GAMhBz1D,KAAK8qD,YAAc7jD,EACJ,GAARwuD,EACHz1D,KAAK02D,uBAAuBvwD,EAAMc,GAClCd,IAGNukD,EAAAzoD,UAAAyzD,2BAAA,SAA2B1uD,EAAiCquD,GAC1D,IAAIpuD,EAASjH,KAAK6f,SAASkvC,YACzB/nD,EAAWC,OACXjH,KAAKuyB,gBAAgBnD,KAAK/B,yBAE5B,OAAKpmB,EACEjH,KAAKwvD,kBAAkBxoD,EAAWA,WAAYC,EAAM,KADvCjH,KAAKL,OAAOmtC,qBASlC4d,EAAAzoD,UAAA0zD,wBAAA,SACE3uD,EACAquD,GAEA,IAII4C,EACAC,EACAC,EACAC,EACAC,EAEAlyD,EAVAxG,EAASK,KAAKL,OACd0H,EAAOL,EAAWK,KAClBC,EAAQN,EAAWM,MASnBgxD,GAAW,EAEXlxD,EAAWJ,EAAWI,SAC1B,OAAQA,GACN,KAAK9E,EAAAC,MAAM4+C,SAKT,GAJA8W,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAc,GAChE6C,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAa+B,IAC5C,CACZ7X,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAKrB,GAFAqrB,EAAYn4D,KAAKkvD,4BAA4B5nD,EAAO4wD,EAAQ,GAC5DE,EAAYp4D,KAAK8qD,cACbuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiB+a,EAAUE,GAAW,IAuB1D,OALAp4D,KAAKgc,MACHE,EAAAnC,eAAey+C,8CACfxxD,EAAW7C,MAAO,IAAK+zD,EAASr9C,WAAYu9C,EAAUv9C,YAExD7a,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,oBAEhB,OAxBEmrB,EAAWj4D,KAAKy2D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBhxD,GAEF8wD,EAAYn4D,KAAKy2D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB/wD,GAUI+wD,EAAWz1D,MACjB,OACA,OACA,OACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASS,MAAO8hC,EAAUE,GACrD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASW,MAAO4hC,EAAUE,GACrD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASW,MACTha,EAAAqZ,SAASS,MACb8hC,EACAE,GAEF,MAEF,OACA,OACA,OACA,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASU,MAAO6hC,EAAUE,GACrD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASY,MACTja,EAAAqZ,SAASU,MACb6hC,EACAE,GAEF,MAEF,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASY,MAAO2hC,EAAUE,GACrD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASa,MAAO0hC,EAAUE,GACrD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASc,MAAOyhC,EAAUE,GACrD,MAEF,QACEnmD,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB9sC,KAAK8qD,YAAc3uC,EAAAuE,KAAKW,KACxB,MAEF,KAAK/e,EAAAC,MAAM6+C,YAKT,GAJA6W,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAc,GAChE6C,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAa2B,IAC5C,CACZzX,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAKrB,GAFAqrB,EAAYn4D,KAAKkvD,4BAA4B5nD,EAAO4wD,EAAQ,GAC5DE,EAAYp4D,KAAK8qD,cACbuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiB+a,EAAUE,GAAW,IAuB1D,OALAp4D,KAAKgc,MACHE,EAAAnC,eAAey+C,8CACfxxD,EAAW7C,MAAO,IAAK+zD,EAASr9C,WAAYu9C,EAAUv9C,YAExD7a,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,oBAEhB,OAxBEmrB,EAAWj4D,KAAKy2D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBhxD,GAEF8wD,EAAYn4D,KAAKy2D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB/wD,GAUI+wD,EAAWz1D,MACjB,OACA,OACA,OACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASqB,MAAOkhC,EAAUE,GACrD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASuB,MACT5a,EAAAqZ,SAASqB,MACbkhC,EACAE,GAEF,MAEF,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASuB,MAAOghC,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASsB,MAAOihC,EAAUE,GACrD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASwB,MACT7a,EAAAqZ,SAASsB,MACbihC,EACAE,GAEF,MAEF,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASwB,MAAO+gC,EAAUE,GACrD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASyB,MAAO8gC,EAAUE,GACrD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS0B,MAAO6gC,EAAUE,GACrD,MAEF,QACEnmD,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB9sC,KAAK8qD,YAAc3uC,EAAAuE,KAAKW,KACxB,MAEF,KAAK/e,EAAAC,MAAM8+C,gBAKT,GAJA4W,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAc,GAChE6C,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAagC,IAC5C,CACZ9X,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAKrB,GAFAqrB,EAAYn4D,KAAKkvD,4BAA4B5nD,EAAO4wD,EAAQ,GAC5DE,EAAYp4D,KAAK8qD,cACbuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiB+a,EAAUE,GAAW,IAuB1D,OALAp4D,KAAKgc,MACHE,EAAAnC,eAAey+C,8CACfxxD,EAAW7C,MAAO,KAAM+zD,EAASr9C,WAAYu9C,EAAUv9C,YAEzD7a,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,oBAEhB,OAxBEmrB,EAAWj4D,KAAKy2D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBhxD,GAEF8wD,EAAYn4D,KAAKy2D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB/wD,GAUI+wD,EAAWz1D,MACjB,OACA,OACA,OACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASe,MAAOwhC,EAAUE,GACrD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASiB,MACTta,EAAAqZ,SAASe,MACbwhC,EACAE,GAEF,MAEF,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASiB,MAAOshC,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASgB,MAAOuhC,EAAUE,GACrD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASkB,MACTva,EAAAqZ,SAASgB,MACbuhC,EACAE,GAEF,MAEF,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASkB,MAAOqhC,EAAUE,GACrD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASmB,MAAOohC,EAAUE,GACrD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASoB,MAAOmhC,EAAUE,GACrD,MAEF,QACEnmD,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB9sC,KAAK8qD,YAAc3uC,EAAAuE,KAAKW,KACxB,MAEF,KAAK/e,EAAAC,MAAM++C,mBAKT,GAJA2W,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAc,GAChE6C,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAa4B,IAC5C,CACZ1X,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAKrB,GAFAqrB,EAAYn4D,KAAKkvD,4BAA4B5nD,EAAO4wD,EAAQ,GAC5DE,EAAYp4D,KAAK8qD,cACbuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiB+a,EAAUE,GAAW,IAuB1D,OALAp4D,KAAKgc,MACHE,EAAAnC,eAAey+C,8CACfxxD,EAAW7C,MAAO,KAAM+zD,EAASr9C,WAAYu9C,EAAUv9C,YAEzD7a,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,oBAEhB,OAxBEmrB,EAAWj4D,KAAKy2D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBhxD,GAEF8wD,EAAYn4D,KAAKy2D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB/wD,GAUI+wD,EAAWz1D,MACjB,OACA,OACA,OACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS2B,MAAO4gC,EAAUE,GACrD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAAS6B,MACTlb,EAAAqZ,SAAS2B,MACb4gC,EACAE,GAEF,MAEF,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS6B,MAAO0gC,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS4B,MAAO2gC,EAAUE,GACrD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAAS8B,MACTnb,EAAAqZ,SAAS4B,MACb2gC,EACAE,GAEF,MAEF,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS8B,MAAOygC,EAAUE,GACrD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS+B,MAAOwgC,EAAUE,GACrD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASgC,MAAOugC,EAAUE,GACrD,MAEF,QACEnmD,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB9sC,KAAK8qD,YAAc3uC,EAAAuE,KAAKW,KACxB,MAGF,KAAK/e,EAAAC,MAAMk/C,qBACX,KAAKn/C,EAAAC,MAAMg/C,cAUT,GAJA0W,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAc,GAChE6C,EAAWl4D,KAAK8qD,YAGZ1jD,GAAY9E,EAAAC,MAAMg/C,eAAiBvhD,KAAK8qD,YAAYlnD,GAAE,KAExD,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAayB,IAC5C,CACZvX,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAQN,GAFAmxD,EAAYn4D,KAAKkvD,4BAA4B5nD,EAAO4wD,EAAQ,GAC5DE,EAAYp4D,KAAK8qD,cACbuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiB+a,EAAUE,GAAW,IAuB1D,OALAp4D,KAAKgc,MACHE,EAAAnC,eAAey+C,8CACfxxD,EAAW7C,MAAO7B,EAAA2+C,sBAAsBj6C,EAAWI,UAAW8wD,EAASr9C,WAAYu9C,EAAUv9C,YAE/F7a,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,oBAEhB,OAxBEmrB,EAAWj4D,KAAKy2D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBhxD,GAEF8wD,EAAYn4D,KAAKy2D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB/wD,GAUI+wD,EAAWz1D,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASC,MAAOsiC,EAAUE,GACrD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASE,MACTvZ,EAAAqZ,SAASC,MACbsiC,EACAE,GAEF,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASE,MAAOqiC,EAAUE,GACrD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASG,MAAOoiC,EAAUE,GACrD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASI,MAAOmiC,EAAUE,GACrD,MAEF,QACEnmD,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB9sC,KAAK8qD,YAAc3uC,EAAAuE,KAAKW,KACxB,MAEF,KAAK/e,EAAAC,MAAMm/C,0BACX,KAAKp/C,EAAAC,MAAMi/C,mBAKT,GAJAyW,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAc,GAChE6C,EAAWl4D,KAAK8qD,YAGZ1jD,GAAY9E,EAAAC,MAAMi/C,oBAAsBxhD,KAAK8qD,YAAYlnD,GAAE,KAE7D,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAa0B,IAC5C,CACZxX,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAQN,GAFAmxD,EAAYn4D,KAAKkvD,4BAA4B5nD,EAAO4wD,EAAQ,GAC5DE,EAAYp4D,KAAK8qD,cACbuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiB+a,EAAUE,GAAW,IAuB1D,OALAp4D,KAAKgc,MACHE,EAAAnC,eAAey+C,8CACfxxD,EAAW7C,MAAO7B,EAAA2+C,sBAAsBj6C,EAAWI,UAAW8wD,EAASr9C,WAAYu9C,EAAUv9C,YAE/F7a,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,oBAEhB,OAxBEmrB,EAAWj4D,KAAKy2D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBhxD,GAEF8wD,EAAYn4D,KAAKy2D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB/wD,GAUI+wD,EAAWz1D,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASK,MAAOkiC,EAAUE,GACrD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASM,MACT3Z,EAAAqZ,SAASK,MACbkiC,EACAE,GAEF,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASM,MAAOiiC,EAAUE,GACrD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASO,MAAOgiC,EAAUE,GACrD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASQ,MAAO+hC,EAAUE,GACrD,MAEF,QACEnmD,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB9sC,KAAK8qD,YAAc3uC,EAAAuE,KAAKW,KACxB,MAEF,KAAK/e,EAAAC,MAAMogD,OACT,OAAO3iD,KAAKy4D,kBAAkBpxD,EAAMC,EAAO+tD,GAE7C,KAAK/yD,EAAAC,MAAMqgD,YAAa0V,GAAW,EACnC,KAAKh2D,EAAAC,MAAM4b,KAKT,GAJA85C,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAc,GAChE6C,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAagB,KAC5C,CACZ9W,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAGrB,GAAIwrB,EACFH,EAAYn4D,KAAKwvD,kBAAkBloD,EAAO4wD,EAAQ,SAC7C,CAGL,GAFAC,EAAYn4D,KAAKkvD,4BAA4B5nD,EAAO4wD,EAAQ,GAC5DE,EAAYp4D,KAAK8qD,cACbuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiB+a,EAAUE,GAAW,IAuB1D,OALAp4D,KAAKgc,MACHE,EAAAnC,eAAey+C,8CACfxxD,EAAW7C,MAAO,IAAK+zD,EAASr9C,WAAYu9C,EAAUv9C,YAExD7a,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,oBAtBdmrB,EAAWj4D,KAAKy2D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBhxD,GAEF8wD,EAAYn4D,KAAKy2D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB/wD,GAWN,OAAQtH,KAAK8qD,YAAYloD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASu6B,OAAQgI,EAAUE,GACtD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASgjC,OACTr8C,EAAAqZ,SAASu6B,OACbgI,EACAE,GAEF,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASgjC,OAAQT,EAAUE,GACtD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASijC,OAAQV,EAAUE,GACtD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASkjC,OAAQX,EAAUE,GACtD,MAEF,QACEnmD,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAMsgD,aAAcyV,GAAW,EACpC,KAAKh2D,EAAAC,MAAM8b,MAKT,GAJA45C,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAc,GAChE6C,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAaiB,KAC5C,CACZ/W,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAGrB,GAAIwrB,EACFH,EAAYn4D,KAAKwvD,kBAAkBloD,EAAO4wD,EAAQ,KAClDE,EAAYp4D,KAAK8qD,gBACZ,CAGL,GAFAqN,EAAYn4D,KAAKkvD,4BAA4B5nD,EAAO4wD,EAAQ,GAC5DE,EAAYp4D,KAAK8qD,cACbuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiB+a,EAAUE,GAAW,IAuB1D,OALAp4D,KAAKgc,MACHE,EAAAnC,eAAey+C,8CACfxxD,EAAW7C,MAAO,IAAK+zD,EAASr9C,WAAYu9C,EAAUv9C,YAExD7a,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,oBAtBdmrB,EAAWj4D,KAAKy2D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBhxD,GAEF8wD,EAAYn4D,KAAKy2D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB/wD,GAWN,OAAQtH,KAAK8qD,YAAYloD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASmjC,OAAQZ,EAAUE,GACtD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASojC,OACTz8C,EAAAqZ,SAASmjC,OACbZ,EACAE,GAEF,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASojC,OAAQb,EAAUE,GACtD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASqjC,OAAQd,EAAUE,GACtD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASsjC,OAAQf,EAAUE,GACtD,MAEF,QACEnmD,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAMugD,gBAAiBwV,GAAW,EACvC,KAAKh2D,EAAAC,MAAMq/C,SAKT,GAJAqW,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAc,GAChE6C,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAakB,KAC5C,CACZhX,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAGrB,GAAIwrB,EACFL,EAAWj4D,KAAK02D,uBAAuBuB,EAAUC,GACjDC,EAAYn4D,KAAKwvD,kBAAkBloD,EAAO4wD,EAAQ,SAC7C,CAGL,GAFAC,EAAYn4D,KAAKkvD,4BAA4B5nD,EAAO4wD,EAAQ,GAC5DE,EAAYp4D,KAAK8qD,cACbuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiB+a,EAAUE,GAAW,IAuB1D,OALAp4D,KAAKgc,MACHE,EAAAnC,eAAey+C,8CACfxxD,EAAW7C,MAAO,IAAK+zD,EAASr9C,WAAYu9C,EAAUv9C,YAExD7a,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,oBAtBdmrB,EAAWj4D,KAAKy2D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBhxD,GAEF8wD,EAAYn4D,KAAKy2D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB/wD,GAWN,OAAQtH,KAAK8qD,YAAYloD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASiC,OAAQsgC,EAAUE,GACtD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASujC,OACT58C,EAAAqZ,SAASiC,OACbsgC,EACAE,GAEF,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASujC,OAAQhB,EAAUE,GACtD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASwjC,OAAQjB,EAAUE,GACtD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASyjC,OAAQlB,EAAUE,GACtD,MAEF,QACEnmD,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAMwgD,yBAA0BuV,GAAW,EAChD,KAAKh2D,EAAAC,MAAMo/C,kBAKT,GAJAsW,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAc,GAChE6C,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAamB,KAC5C,CACZjX,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAGrB,IAAIznB,OAAQ,EAGZ,GAAyB,IAArBrlB,KAAK8qD,YAAYloD,MAGnB,GAFAu1D,EAAYn4D,KAAKwvD,kBAAkBloD,EAAO6U,EAAAuE,KAAKY,IAAG,KAClD82C,EAAYp4D,KAAK8qD,cACXzlC,EAAWrlB,KAAKurD,gBAAiB,CAErC,KADIxkC,EAAY/mB,KAAK2rB,QAAQzM,eAAehe,IAAI,UAChC,CACdlB,KAAKgc,MACHE,EAAAnC,eAAeuK,mBACftd,EAAW7C,MAAO,SAEpBgC,EAAOxG,EAAOmtC,oBACd,MAGF,KADI7qC,EAAY8kB,EAAUhb,QAAUgb,EAAUhb,QAAQ7K,IAAI,OAAS,MACnD,CACdlB,KAAKgc,MACHE,EAAAnC,eAAeuK,mBACftd,EAAW7C,MAAO,aAEpBgC,EAAOxG,EAAOmtC,oBACd,MAEF96B,OAAO/P,EAAUW,MAAQknD,EAAAlrC,YAAY6G,oBACrCzlB,KAAKurD,eAAiBlmC,EAAWrlB,KAAK6f,SAASiG,gBAAmC7jB,EAAW,YAsB/F,GAhBAg2D,EAAWj4D,KAAKy2D,kBACdwB,EACAj4D,KAAK8qD,YACL3uC,EAAAuE,KAAKa,IAAG,IAGRla,GAEF6wD,EAAWl4D,KAAK8qD,YAChBqN,EAAYn4D,KAAKwvD,kBACfloD,EACA6U,EAAAuE,KAAKa,IAAG,KAIV62C,EAAYp4D,KAAK8qD,cACXzlC,EAAWrlB,KAAKwrD,gBAAiB,CAErC,KADIzkC,EAAY/mB,KAAK2rB,QAAQzM,eAAehe,IAAI,SAChC,CACdlB,KAAKgc,MACHE,EAAAnC,eAAeuK,mBACftd,EAAW7C,MAAO,QAEpBgC,EAAOxG,EAAOmtC,oBACd,MAGF,KADI7qC,EAAY8kB,EAAUhb,QAAUgb,EAAUhb,QAAQ7K,IAAI,OAAS,MACnD,CACdlB,KAAKgc,MACHE,EAAAnC,eAAeuK,mBACftd,EAAW7C,MAAO,YAEpBgC,EAAOxG,EAAOmtC,oBACd,MAEF96B,OAAO/P,EAAUW,MAAQknD,EAAAlrC,YAAY6G,oBACrCzlB,KAAKwrD,eAAiBnmC,EAAWrlB,KAAK6f,SAASiG,gBAAmC7jB,EAAW,MAM/FkE,EAHIkf,GAAYrlB,KAAKowD,gBAAgB/qC,GAG9BrlB,KAAKo5D,eAAe/zC,GAAY4yC,EAAUE,IAF1Cx4D,EAAOmtC,oBAIhB,MAEF,KAAKxqC,EAAAC,MAAMygD,aAAcsV,GAAW,EACpC,KAAKh2D,EAAAC,MAAMs/C,MAKT,GAJAoW,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAc,GAChE6C,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAaoB,KAC5C,CACZlX,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAGrB,GAAIwrB,EACFL,EAAWj4D,KAAK02D,uBAAuBuB,EAAUC,GACjDC,EAAYn4D,KAAKwvD,kBAAkBloD,EAAO4wD,EAAQ,KAClDE,EAAYp4D,KAAK8qD,gBACZ,CAGL,GAFAqN,EAAYn4D,KAAKkvD,4BAA4B5nD,EAAO4wD,EAAQ,GAC5DE,EAAYp4D,KAAK8qD,cACbuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiB+a,EAAUE,GAAW,IAuB1D,OALAp4D,KAAKgc,MACHE,EAAAnC,eAAey+C,8CACfxxD,EAAW7C,MAAO,IAAK+zD,EAASr9C,WAAYu9C,EAAUv9C,YAExD7a,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,oBAtBdmrB,EAAWj4D,KAAKy2D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBhxD,GAEF8wD,EAAYn4D,KAAKy2D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB/wD,GAWN,OAAQtH,KAAK8qD,YAAYloD,MACvB,OACA,OACA,OACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS2jC,OAAQpB,EAAUE,GACtD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAAS4jC,OACTj9C,EAAAqZ,SAAS2jC,OACbpB,EACAE,GAEF,MAEF,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS4jC,OAAQrB,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS6C,OAAQ0/B,EAAUE,GACtD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAAS6jC,OACTl9C,EAAAqZ,SAAS6C,OACb0/B,EACAE,GAEF,MAEF,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS6jC,OAAQtB,EAAUE,GACtD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS8jC,OAAQvB,EAAUE,GACtD,MAEF,QACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS+jC,OAAQxB,EAAUE,GACtD,MAEF,QACEnmD,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAM0gD,eAAgBqV,GAAW,EACtC,KAAKh2D,EAAAC,MAAMu/C,QAKT,GAJAmW,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAc,GAChE6C,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAaqB,KAC5C,CACZnX,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAGrB,GAAIwrB,EACFL,EAAWj4D,KAAK02D,uBAAuBuB,EAAUC,GACjDC,EAAYn4D,KAAKwvD,kBAAkBloD,EAAO4wD,EAAQ,KAClDE,EAAYp4D,KAAK8qD,gBACZ,CAGL,GAFAqN,EAAYn4D,KAAKkvD,4BAA4B5nD,EAAO4wD,EAAQ,GAC5DE,EAAYp4D,KAAK8qD,cACbuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiB+a,EAAUE,GAAW,IAuB1D,OALAp4D,KAAKgc,MACHE,EAAAnC,eAAey+C,8CACfxxD,EAAW7C,MAAO,IAAK+zD,EAASr9C,WAAYu9C,EAAUv9C,YAExD7a,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,oBAtBdmrB,EAAWj4D,KAAKy2D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBhxD,GAEF8wD,EAAYn4D,KAAKy2D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB/wD,GAWN,OAAQtH,KAAK8qD,YAAYloD,MACvB,OACA,OAIA,OACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS8C,OAAQy/B,EAAUE,GACtD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASgkC,OACTr9C,EAAAqZ,SAAS8C,OACby/B,EACAE,GAEF,MAEF,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASgkC,OAAQzB,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS+C,OAAQw/B,EAAUE,GACtD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASikC,OACTt9C,EAAAqZ,SAAS+C,OACbw/B,EACAE,GAEF,MAEF,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASikC,OAAQ1B,EAAUE,GACtD,MAEF,QAEE,KADI9yC,EAAWrlB,KAAKqrD,gBACL,CAEb,KADItkC,EAAY/mB,KAAK2rB,QAAQzM,eAAehe,IAAI,UAChC,CACdlB,KAAKgc,MACHE,EAAAnC,eAAeuK,mBACftd,EAAW7C,MAAO,SAEpBgC,EAAOxG,EAAOmtC,oBACd,MAGF,KADI7qC,EAAY8kB,EAAUhb,QAAUgb,EAAUhb,QAAQ7K,IAAI,OAAS,MACnD,CACdlB,KAAKgc,MACHE,EAAAnC,eAAeuK,mBACftd,EAAW7C,MAAO,aAEpBgC,EAAOxG,EAAOmtC,oBACd,MAEF96B,OAAO/P,EAAUW,MAAQknD,EAAAlrC,YAAY6G,oBACrCzlB,KAAKqrD,eAAiBhmC,EAAWrlB,KAAK6f,SAASiG,gBAAmC7jB,EAAW,MAK7FkE,EAHIkf,GAAYrlB,KAAKowD,gBAAgB/qC,GAG9BrlB,KAAKo5D,eAAe/zC,GAAY4yC,EAAUE,IAF1Cx4D,EAAOmtC,oBAIhB,MAEF,QAEE,KADIznB,EAAWrlB,KAAKsrD,gBACL,CACb,IAAIvkC,EASA9kB,EARJ,KADI8kB,EAAY/mB,KAAK2rB,QAAQzM,eAAehe,IAAI,SAChC,CACdlB,KAAKgc,MACHE,EAAAnC,eAAeuK,mBACftd,EAAW7C,MAAO,QAEpBgC,EAAOxG,EAAOmtC,oBACd,MAGF,KADI7qC,EAAY8kB,EAAUhb,QAAUgb,EAAUhb,QAAQ7K,IAAI,OAAS,MACnD,CACdlB,KAAKgc,MACHE,EAAAnC,eAAeuK,mBACftd,EAAW7C,MAAO,YAEpBgC,EAAOxG,EAAOmtC,oBACd,MAEF96B,OAAO/P,EAAUW,MAAQknD,EAAAlrC,YAAY6G,oBACrCzlB,KAAKsrD,eAAiBjmC,EAAWrlB,KAAK6f,SAASiG,gBAAmC7jB,EAAW,MAK7FkE,EAHIkf,GAAYrlB,KAAKowD,gBAAgB/qC,GAG9BrlB,KAAKo5D,eAAe/zC,GAAY4yC,EAAUE,IAF1Cx4D,EAAOmtC,oBAIhB,MAEF,QACE96B,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAM2gD,yBAA0BoV,GAAW,EAChD,KAAKh2D,EAAAC,MAAM0/C,kBAKT,GAJAgW,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAeuE,QAAO,GACxE1B,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAaiC,aAC5C,CACZ/X,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAKrB,OAFAqrB,EAAYn4D,KAAKwvD,kBAAkBloD,EAAO4wD,EAAQ,KAClDE,EAAYp4D,KAAK8qD,YACT9qD,KAAK8qD,YAAYloD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASwC,OAAQ+/B,EAAUE,GACtD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASmkC,OAAQ5B,EAAUE,GACtD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASmkC,OACTx9C,EAAAqZ,SAASwC,OACb+/B,EACAE,GAEF,MAEF,QACA,QAKE,OAJAn4D,KAAKgc,MACHE,EAAAnC,eAAe+/C,2CACf9yD,EAAW7C,MAAO7B,EAAA2+C,sBAAsBj6C,EAAWI,UAAWpH,KAAK8qD,YAAYjwC,YAE1Elb,EAAOmtC,oBAEhB,QACE96B,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAM4gD,+BAAgCmV,GAAW,EACtD,KAAKh2D,EAAAC,MAAM2/C,wBAKT,GAJA+V,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAeuE,QAAO,GACxE1B,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAa6B,aAC5C,CACZ3X,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAMrB,OAHAmrB,EAAWj4D,KAAK02D,uBAAuBuB,EAAUC,GACjDC,EAAYn4D,KAAKwvD,kBAAkBloD,EAAO4wD,EAAQ,KAClDE,EAAYp4D,KAAK8qD,YACT9qD,KAAK8qD,YAAYloD,MACvB,OACA,OAIA,OACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS2C,OAAQ4/B,EAAUE,GACtD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASqkC,OAAQ9B,EAAUE,GACtD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASqkC,OACT19C,EAAAqZ,SAAS2C,OACb4/B,EACAE,GAEF,MAEF,OACA,OACA,QAIA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS4C,OAAQ2/B,EAAUE,GACtD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASskC,OAAQ/B,EAAUE,GACtD,MAEF,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASskC,OACT39C,EAAAqZ,SAAS4C,OACb2/B,EACAE,GAEF,MAEF,QACA,QAKE,OAJAn4D,KAAKgc,MACHE,EAAAnC,eAAe+/C,2CACf9yD,EAAW7C,MAAO7B,EAAA2+C,sBAAsBj6C,EAAWI,UAAWpH,KAAK8qD,YAAYjwC,YAE1Elb,EAAOmtC,oBAEhB,QACE96B,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAM6gD,2CAA4CkV,GAAW,EAClE,KAAKh2D,EAAAC,MAAM4/C,oCAKT,GAJA8V,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAeuE,QAAO,GACxE1B,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAa8B,eAC5C,CACZ5X,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAMrB,OAHAmrB,EAAWj4D,KAAK02D,uBAAuBuB,EAAUC,GACjDC,EAAYn4D,KAAKwvD,kBAAkBloD,EAAO4wD,EAAQ,KAClDE,EAAYp4D,KAAK8qD,YACT9qD,KAAK8qD,YAAYloD,MACvB,OACA,OACA,QACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS4C,OAAQ2/B,EAAUE,GAExD,OACA,OACA,OACA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS4C,OAAQ2/B,EAAUE,GACtD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASskC,OAAQ/B,EAAUE,GACtD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASskC,OACT39C,EAAAqZ,SAAS4C,OACb2/B,EACAE,GAEF,MAEF,QACA,QAKE,OAJAn4D,KAAKgc,MACHE,EAAAnC,eAAe+/C,2CACf9yD,EAAW7C,MAAO7B,EAAA2+C,sBAAsBj6C,EAAWI,UAAWpH,KAAK8qD,YAAYjwC,YAE1Elb,EAAOmtC,oBAEhB,QACE96B,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAM8gD,iBAAkBiV,GAAW,EACxC,KAAKh2D,EAAAC,MAAM6/C,UAKT,GAJA6V,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAeuE,QAAO,GACxE1B,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAasB,aAC5C,CACZpX,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAGrB,GAAIwrB,EACFH,EAAYn4D,KAAKwvD,kBAAkBloD,EAAO4wD,EAAQ,KAClDE,EAAYp4D,KAAK8qD,gBACZ,CAGL,GAFAqN,EAAYn4D,KAAKkvD,4BAA4B5nD,EAAO4wD,EAAQ,GAC5DE,EAAYp4D,KAAK8qD,cACbuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiB+a,EAAUE,GAAW,IAuB1D,OALAp4D,KAAKgc,MACHE,EAAAnC,eAAey+C,8CACfxxD,EAAW7C,MAAO,IAAK+zD,EAASr9C,WAAYu9C,EAAUv9C,YAExD7a,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,oBAtBdmrB,EAAWj4D,KAAKy2D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBhxD,GAEF8wD,EAAYn4D,KAAKy2D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB/wD,GAWN,OAAQtH,KAAK8qD,YAAYloD,MACvB,OACA,OACA,OACA,OACA,OACA,QACA,OACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASsC,OAAQigC,EAAUE,GACtD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASukC,OAAQhC,EAAUE,GACtD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASukC,OACT59C,EAAAqZ,SAASsC,OACbigC,EACAE,GAEF,MAEF,QACA,QAKE,OAJAn4D,KAAKgc,MACHE,EAAAnC,eAAe+/C,2CACf9yD,EAAW7C,MAAO7B,EAAA2+C,sBAAsBj6C,EAAWI,UAAWpH,KAAK8qD,YAAYjwC,YAE1Elb,EAAOmtC,oBAEhB,QACE96B,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAM+gD,WAAYgV,GAAW,EAClC,KAAKh2D,EAAAC,MAAM8/C,IAKT,GAJA4V,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAeuE,QAAO,GACxE1B,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAauB,YAC5C,CACZrX,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAGrB,GAAIwrB,EACFH,EAAYn4D,KAAKwvD,kBAAkBloD,EAAO4wD,EAAQ,KAClDE,EAAYp4D,KAAK8qD,gBACZ,CAGL,GAFAqN,EAAYn4D,KAAKkvD,4BAA4B5nD,EAAO4wD,EAAQ,GAC5DE,EAAYp4D,KAAK8qD,cACbuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiB+a,EAAUE,GAAW,IAuB1D,OALAp4D,KAAKgc,MACHE,EAAAnC,eAAey+C,8CACfxxD,EAAW7C,MAAO,IAAK+zD,EAASr9C,WAAYu9C,EAAUv9C,YAExD7a,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,oBAtBdmrB,EAAWj4D,KAAKy2D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBhxD,GAEF8wD,EAAYn4D,KAAKy2D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB/wD,GAWN,OAAQtH,KAAK8qD,YAAYloD,MACvB,OACA,OACA,OACA,OACA,QACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASwkC,MAAOjC,EAAUE,GACrD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASwkC,MAAOjC,EAAUE,GACrD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASykC,MAAOlC,EAAUE,GACrD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASykC,MACT99C,EAAAqZ,SAASwkC,MACbjC,EACAE,GAEF,MAEF,QACA,QAKE,OAJAn4D,KAAKgc,MACHE,EAAAnC,eAAe+/C,2CACf9yD,EAAW7C,MAAO7B,EAAA2+C,sBAAsBj6C,EAAWI,UAAWpH,KAAK8qD,YAAYjwC,YAE1Elb,EAAOmtC,oBAEhB,QACE96B,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAMghD,aAAc+U,GAAW,EACpC,KAAKh2D,EAAAC,MAAM+/C,MAKT,GAJA2V,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAeuE,QAAO,GACxE1B,EAAWl4D,KAAK8qD,YAGZ9qD,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAC5C,IAAIw4C,EAEElqB,EADN,GADIkqB,EAAiB8b,EAAS9b,eAG5B,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAawB,aAC5C,CACZtX,EAAOnG,KAAKu4D,sBAAsBrmC,EAAU7qB,EAAM4wD,EAAU3wD,EAAON,GACnE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAGrB,GAAIwrB,EACFH,EAAYn4D,KAAKwvD,kBAAkBloD,EAAO4wD,EAAQ,KAClDE,EAAYp4D,KAAK8qD,gBACZ,CAGL,GAFAqN,EAAYn4D,KAAKkvD,4BAA4B5nD,EAAO4wD,EAAQ,GAC5DE,EAAYp4D,KAAK8qD,cACbuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiB+a,EAAUE,GAAW,IAuB1D,OALAp4D,KAAKgc,MACHE,EAAAnC,eAAey+C,8CACfxxD,EAAW7C,MAAO,IAAK+zD,EAASr9C,WAAYu9C,EAAUv9C,YAExD7a,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,oBAtBdmrB,EAAWj4D,KAAKy2D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBhxD,GAEF8wD,EAAYn4D,KAAKy2D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB/wD,GAWN,OAAQtH,KAAK8qD,YAAYloD,MACvB,OACA,OACA,OACA,OACA,QACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS0kC,OAAQnC,EAAUE,GACtD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS0kC,OAAQnC,EAAUE,GACtD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS2kC,OAAQpC,EAAUE,GACtD,MAEF,OACA,OACEhyD,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAAS2kC,OACTh+C,EAAAqZ,SAAS0kC,OACbnC,EACAE,GAEF,MAEF,QACA,QAKE,OAJAn4D,KAAKgc,MACHE,EAAAnC,eAAe+/C,2CACf9yD,EAAW7C,MAAO7B,EAAA2+C,sBAAsBj6C,EAAWI,UAAWpH,KAAK8qD,YAAYjwC,YAE1Elb,EAAOmtC,oBAEhB,QACE96B,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAKF,KAAKxqC,EAAAC,MAAMkgD,oBAOT,GANAwV,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAc,GAChE6C,EAAWl4D,KAAK8qD,YAChBqN,EAAYn4D,KAAKwvD,kBAAkBloD,EAAO4wD,EAAQ,KAClDE,EAAYp4D,KAAK8qD,YAGb3kD,EAAOxG,EAAOm0C,gBAAgBmkB,GAAU,EAAM,GAChDj4D,KAAK8yD,cAAcmF,EAAUj4D,KAAK8qD,aAClC3kD,EAAOxG,EAAO+rC,SACZ1rC,KAAK8yD,cAAcmF,EAAUj4D,KAAK8qD,aAClCqN,EACAhyD,OAIG,CACL,IAAIipB,EAAOpvB,KAAKuyB,gBAAgBnD,KAC5B4kC,EAAYh0D,KAAKuyB,gBAAgBpC,oBACnCnwB,KAAK8qD,aACJ17B,EAAK0F,YAAYmjC,EAAUj4D,KAAK8qD,cAEnC3kD,EAAOxG,EAAO+rC,SACZ1rC,KAAK8yD,cACHnzD,EAAOqpC,eAAegrB,EAAUjnC,MAAOkrC,GACvCj4D,KAAK8qD,aAEPqN,EACAx4D,EAAOmpC,eACL92B,OAAOgiD,GAAWjnC,MAClB/sB,KAAK8qD,YAAYp7B,iBAIvB,MAEF,KAAKptB,EAAAC,MAAMmgD,QAOT,GANAuV,EAAWj4D,KAAKkvD,4BAA4B7nD,EAAMguD,EAAc,GAChE6C,EAAWl4D,KAAK8qD,YAChBqN,EAAYn4D,KAAKwvD,kBAAkBloD,EAAO4wD,EAAQ,KAClDE,EAAYp4D,KAAK8qD,YAGb3kD,EAAOnG,KAAKL,OAAOm0C,gBAAgBmkB,GAAU,EAAM,GACrD9xD,EAAOnG,KAAKL,OAAO+rC,SACjB1rC,KAAK8yD,cAAcmF,EAAUj4D,KAAK8qD,aAClC3kD,EACAgyD,OAIG,CACD/oC,EAAOpvB,KAAKuyB,gBAAgBnD,KAC5B4kC,EAAYh0D,KAAKuyB,gBAAgBpC,oBACnCnwB,KAAK8qD,aACJ17B,EAAK0F,YAAYmjC,EAAUj4D,KAAK8qD,cAEnC3kD,EAAOxG,EAAO+rC,SACZ1rC,KAAK8yD,cACHnzD,EAAOqpC,eAAegrB,EAAUjnC,MAAOkrC,GACvCj4D,KAAK8qD,aAEPnrD,EAAOmpC,eACL92B,OAAOgiD,GAAWjnC,MAClB/sB,KAAK8qD,YAAYp7B,gBAEnByoC,GAGJ,MAEF,QACEnmD,QAAO,GACP7L,EAAOnG,KAAKL,OAAOmtC,oBAGvB,OAAOwrB,EACHt4D,KAAKm1D,2BAA2B9tD,EAAMlB,EAAMkvD,GAAkBl5C,EAAAuE,KAAKc,MACnErb,GAGNukD,EAAAzoD,UAAAq4D,qBAAA,SACEC,EACAj5D,EACAk5D,EACA1M,GAEA,IAAI2M,EACAC,EAAyB,EAO7B,OANIH,EAAiB32D,GAAGvB,EAAAqB,YAAY6qB,WAClCmsC,EAAUF,EACVC,MAEAA,GAAwBn5D,GAEnBtB,KAAK26D,kBACVJ,EACAE,EACA3M,EACA4M,EACAH,EAAiBzzC,aAAagjC,EAAAjrC,eAAetM,UAIjDm4C,EAAAzoD,UAAAs2D,sBAAA,SACEgC,EACAlzD,EACA4wD,EACA3wD,EACAwmD,GAEA,IAAI2M,EACAC,EAAyB,EAC7B,GAAIH,EAAiB32D,GAAGvB,EAAAqB,YAAY6qB,UAAW,CAC7C,IAAI/qB,EAASwO,OAAOuoD,EAAiB/2D,QACrCwO,OAAOxO,EAAOZ,MAAQknD,EAAAlrC,YAAYjL,OAClC+mD,EAAUzC,EACVwC,GAAwBnzD,QAExBmzD,GAAwBpzD,EAAMC,GAShC,OAPUtH,KAAK26D,kBACbJ,EACAE,EACA3M,EACA4M,EACAH,EAAiBzzC,aAAagjC,EAAAjrC,eAAetM,UAKjDm4C,EAAAzoD,UAAAw2D,kBAAA,SAAkBzxD,EAAwB4zD,EAA6BvF,GACrE,IAOIzY,EANA/8B,EADU7f,KAAK2rB,QACI9L,SACnB0S,EAAkBvyB,KAAKuyB,gBACvBV,EAAShS,EAASg7C,kBAAkB7zD,EAAYurB,GACpD,IAAKV,EAAQ,OAAO7xB,KAAKL,OAAOmtC,oBAIhC,OAAQjb,EAAOjvB,MACb,KAAKknD,EAAAlrC,YAAYtM,OACf,IAAKtS,KAAK2uD,cAAsB98B,GAC9B,OAAO7xB,KAAKL,OAAOmtC,oBAErB96B,OAAgB6f,EAAQztB,MAAQ+X,EAAAuE,KAAKc,MAGvC,KAAKsoC,EAAAlrC,YAAYoO,MACjB,KAAK88B,EAAAlrC,YAAYsS,MACf0rB,EAAmC/qB,EAAQztB,KAC3C,MAEF,KAAK0lD,EAAAlrC,YAAY+K,SACf,IAAIE,EAA6BgI,EAAQhI,gBACzC,GAAIA,EAAiB,CACnB,IAAIxE,EAAWrlB,KAAK6f,SAASiG,gBAAgB+D,EAAiB,MAC9D,IAAKxE,EAAU,OAAOrlB,KAAKL,OAAOmtC,oBAClC96B,OAAmD,GAA5CqT,EAASlW,UAAU6f,eAAepoB,QACzCg2C,EAAav3B,EAASlW,UAAU6f,eAAe,GAC/C,MAMF,OAJAhvB,KAAKgc,MACHE,EAAAnC,eAAe+gD,oEACf9zD,EAAW7C,MAAkB0tB,EAAQrP,cAEhCxiB,KAAKL,OAAOmtC,oBAErB,KAAKgd,EAAAlrC,YAAYjL,MACf,GAAIkM,EAASk7C,yBAA0B,CACrC,IAAIC,EAAczoC,EAAgBnD,KAAKxrB,GAAE,MACrCq3D,EAAqBppC,EAAQE,eAAe+3B,EAAA7tC,aAAaa,YAAak+C,GAC1E,IAAKC,EAaH,OAZyBppC,EAAQE,eAAe+3B,EAAA7tC,aAAaY,YAAam+C,GAOxEh7D,KAAKgc,MACHE,EAAAnC,eAAemhD,+CACfl0D,EAAW7C,MAAe0tB,EAAQrP,cAPpCxiB,KAAKgc,MACHE,EAAAnC,eAAeohD,qCACfn0D,EAAW7C,MAAe0tB,EAAQrP,cAQ/BxiB,KAAKL,OAAOmtC,oBAErB96B,OAAqD,GAA9CipD,EAAW9rD,UAAU6f,eAAepoB,QAC3Cg2C,EAAaqe,EAAW9rD,UAAU6f,eAAe,GACjD,MAIJ,QAKE,OAJAhvB,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAKvB96B,OAAO4qC,GAAczgC,EAAAuE,KAAKc,MAC1B,IAAIg5C,EAAYx6D,KAAKwvD,kBAAkBoL,EAAiBhe,EAAU,KAClE,OAAO58C,KAAKm1D,2BACVnuD,EACAwzD,EACAnF,GAAkBl5C,EAAAuE,KAAKc,OAI3BkpC,EAAAzoD,UAAAkzD,2BAAA,SACEnuD,EACAo0D,EACAC,QAAA,IAAAA,OAAA,GAEA,IAAI17D,EAASK,KAAKL,OACdkyB,EAAS7xB,KAAK6f,SAASg7C,kBAAkB7zD,EAAYhH,KAAKuyB,iBAC9D,IAAKV,EAAQ,OAAOlyB,EAAOmtC,oBAE3B,OAAQjb,EAAOjvB,MACb,KAAKknD,EAAAlrC,YAAYoO,MACf,IAAI5oB,EAAeytB,EAAQztB,KAG3B,GAFA4N,OAAO5N,GAAQ+X,EAAAuE,KAAKc,MACpBxhB,KAAK8qD,YAAcuQ,EAAMj3D,EAAO+X,EAAAuE,KAAKc,KACzBqQ,EAAQjuB,GAAGvB,EAAAqB,YAAY+nB,OAKjC,OAJAzrB,KAAKgc,MACHE,EAAAnC,eAAe+gD,oEACf9zD,EAAW7C,MAAO0tB,EAAOrP,cAEpB7iB,EAAOmtC,oBAEhB,IAAI1d,EAAOpvB,KAAKuyB,gBAAgBnD,KAIhC,OAHIhrB,EAAKR,GAAG,KACVwrB,EAAKa,gBAAwB4B,EAAQ9E,OAAQqC,EAAK0F,YAAYsmC,EAAsBh3D,IAE/Ei3D,EACH17D,EAAOqpC,eAAuBnX,EAAQ9E,MAAOquC,GAC7Cz7D,EAAOirC,eAAuB/Y,EAAQ9E,MAAOquC,GAEnD,KAAKtR,EAAAlrC,YAAYtM,OACf,IAAKtS,KAAK2uD,cAAsB98B,GAAS,OAAOlyB,EAAOmtC,oBACnD1oC,EAAgBytB,EAAQztB,KAG5B,GAFA4N,OAAO5N,GAAQ+X,EAAAuE,KAAKc,MACpBxhB,KAAK8qD,YAAcuQ,EAAMj3D,EAAO+X,EAAAuE,KAAKc,KACzBqQ,EAAQjuB,GAAGvB,EAAAqB,YAAY+nB,OAMjC,OALAzrB,KAAKgc,MACHE,EAAAnC,eAAe+gD,oEACf9zD,EAAW7C,MACX0tB,EAAOrP,cAEF7iB,EAAOmtC,oBAGhB,GADAsuB,EAAuBp7D,KAAK02D,uBAAuB0E,EAAsBh3D,GACrEi3D,EAAK,CACP,IAAIlO,EAAa/oD,EAAKsrB,eAClBlN,EAAeqP,EAAOrP,aAC1B,OAAO7iB,EAAOqrC,YAAY,MACxBrrC,EAAOmrC,gBAAgBtoB,EAAc44C,GACrCz7D,EAAOupC,gBAAgB1mB,EAAc2qC,IACpCA,GAEH,OAAOxtD,EAAOmrC,gBAAgBjZ,EAAOrP,aAAc44C,GAGvD,KAAKtR,EAAAlrC,YAAYsS,MACf,IAAMtpB,EAAsBiqB,EAAQjqB,YACpC,GACUiqB,EAAQjuB,GAAGvB,EAAAqB,YAAY2kB,YAE7BroB,KAAKuyB,gBAAgB3uB,GAAGvB,EAAAqB,YAAYmQ,cACrB,MAAfjM,GAC2B,MAA3BA,EAAY9C,YAOd,OAJA9E,KAAKgc,MACHE,EAAAnC,eAAe+gD,oEACf9zD,EAAW7C,MAAe0tB,EAAQrP,cAE7B7iB,EAAOmtC,oBAEhB,IAAIwuB,EAAiBtpD,OAAOhS,KAAK6f,SAAS07C,uBACtCC,EAAWx7D,KAAKkvD,4BAClBoM,EACAt7D,KAAKygB,QAAQW,UAAS,GAGpBhd,EAAeytB,EAAQztB,KAC3BpE,KAAK8qD,YAAcuQ,EAAMj3D,EAAO+X,EAAAuE,KAAKc,KACjC2rC,EAAa/oD,EAAKsrB,eAKtB,GAJa,IAATtrB,EAAKxB,OAEPw4D,EAAuBp7D,KAAK02D,uBAAuB0E,EAAsBh3D,IAEvEi3D,EAAK,CAEHjsC,GADAmD,EAAkBvyB,KAAKuyB,iBACAnD,KAD3B,IAMI6kC,EAJY1hC,EAAgBpC,oBAC9B/rB,GACCgrB,EAAK0F,YAAYsmC,EAAsBh3D,IAEX2oB,MAE/B,OAAOptB,EAAOqrC,YAAY,MACxBrrC,EAAOirC,eAAeqpB,EAAgBmH,GACtCz7D,EAAO8pC,YACLrlC,EAAKu2B,SACL6gC,EACA77D,EAAOmpC,eAAemrB,EAAgB9G,GACtCA,EACQt7B,EAAQV,cAElBxxB,EAAOmpC,eAAemrB,EAAgB9G,IACrCA,GAEH,OAAOxtD,EAAO8pC,YACZrlC,EAAKu2B,SACL6gC,EACAJ,EACAjO,EACQt7B,EAAQV,cAItB,KAAK24B,EAAAlrC,YAAY+K,SACf,IAAIE,EAA6BgI,EAAQhI,gBACzC,GAAIA,EAAiB,CACnB,IAAI4xC,EAAiBz7D,KAAK6f,SAASiG,gBAAgB+D,EAAiB,MACpE,IAAK4xC,EAAgB,OAAO97D,EAAOmtC,oBAGnC,IAAKuuB,EAAK,CACR,GAAII,EAAe73D,GAAGvB,EAAAqB,YAAY6qB,UAAW,CACvC+sC,EAAiBtpD,OAAOhS,KAAK6f,SAAS07C,uBACtCC,EAAWx7D,KAAKkvD,4BAClBoM,EACAt7D,KAAKygB,QAAQW,UAAS,GAGxB,OAAOphB,KAAKo5D,eAAeqC,GAAkBD,EAAUJ,IAEvD,OAAOp7D,KAAKo5D,eAAeqC,GAAkBL,IAKjD,IAAIxxC,EAA6BiI,EAAQjI,gBACzC5X,OAA0B,MAAnB4X,GACP,IAAI8xC,EAAiB17D,KAAK6f,SAASiG,gBAAmC8D,EAAiB,MACvF,IAAK8xC,EAAgB,OAAO/7D,EAAOmtC,oBACnC,IACI6uB,GADAx2D,EAAau2D,EAAevsD,UAAUhK,YACRuqB,eAClC,GAAI+rC,EAAe73D,GAAGvB,EAAAqB,YAAY6qB,UAAW,CACvC+sC,EAAiBtpD,OAAOhS,KAAK6f,SAAS07C,uBACtCC,EAAWx7D,KAAKkvD,4BAClBoM,EACAt7D,KAAKygB,QAAQW,UAAS,GAIpB6yC,EADYj0D,KAAKuyB,gBAAgBpC,oBAAoBhrB,GAAY,GACtC4nB,MAC/B,OAAOptB,EAAOqrC,YAAY,MACxBhrC,KAAKo5D,eAAeqC,GAClB97D,EAAOqpC,eAAeirB,EAAgBuH,GACtCJ,IAEFp7D,KAAKo5D,eAAesC,GAClB/7D,EAAOmpC,eAAemrB,EAAgB0H,MAEvCA,GAGH,OAAOh8D,EAAOqrC,YAAY,MACxBhrC,KAAKo5D,eAAeqC,GAAkBL,IACtCp7D,KAAKo5D,eAAesC,IACnBC,GAQP,OALE37D,KAAKgc,MACHE,EAAAnC,eAAe+gD,oEACf9zD,EAAW7C,MAAO0tB,EAAOrP,cAGtB7iB,EAAOmtC,oBAEhB,KAAKgd,EAAAlrC,YAAYjL,MACf,IAAIrL,EAAoBtI,KAAK6f,SAASk7C,yBACtC,GAAIzyD,EAAmB,CACrB,IAAI0yD,EAAch7D,KAAKuyB,gBAAgBnD,KAAKxrB,GAAE,MAC1Cg4D,EAAqB/pC,EAAQE,eAAe+3B,EAAA7tC,aAAaY,YAAam+C,GAC1E,IAAKY,EAKH,OAJA57D,KAAKgc,MACHE,EAAAnC,eAAeohD,qCACfn0D,EAAW7C,MAAO0tB,EAAOrP,cAEpB7iB,EAAOmtC,oBAEhB,IAAImuB,EAAqBppC,EAAQE,eAAe+3B,EAAA7tC,aAAaa,YAAak+C,GAC1E,IAAKC,EAMH,OALAj7D,KAAKgc,MACHE,EAAAnC,eAAemhD,+CACfl0D,EAAW7C,MAAO0tB,EAAOrP,cAE3BxiB,KAAK8qD,YAAcuQ,EAAMO,EAAWzsD,UAAUhK,WAAagX,EAAAuE,KAAKc,KACzD7hB,EAAOmtC,oBAEhB,IAAI8P,EAAqB/qB,EAAQztB,KAO7By3D,GANAP,EAAiBtpD,OAAOhS,KAAK6f,SAAS07C,uBACtCC,EAAWx7D,KAAKkvD,4BAClBoM,EACAt7D,KAAKygB,QAAQW,UAAS,GAGNphB,KAAKwvD,kBACrBlnD,EACA6T,EAAAuE,KAAKG,IAAG,MAIV,GAAIw6C,EAAK,CACP,IAAI9oC,EACAupC,GADAvpC,EAAkBvyB,KAAKuyB,iBACWhD,aAAaqtB,GAAY,GAC3Dmf,EAAmBxpC,EAAgBpC,oBAAoBnwB,KAAK8qD,aAAa,GACzE3lD,EAAay2D,EAAWzsD,UAAUhK,WAEtC,OADAnF,KAAKuyB,gBAAgBrC,cAAc4rC,GAC5Bn8D,EAAOqrC,YAAY,MACxBhrC,KAAKo5D,eAAe6B,GAClBt7D,EAAOqpC,eAAe8yB,EAAgB/uC,MAAOyuC,GAC7C77D,EAAOqpC,eAAe+yB,EAAiBhvC,MAAO8uC,GAC9CT,IAEFp7D,KAAKo5D,eAAewC,GAClBj8D,EAAOmpC,eAAegzB,EAAgB/uC,MAAO+uC,EAAgB13D,KAAKsrB,gBAClE/vB,EAAOmpC,eAAeizB,EAAiBhvC,MAAOgvC,EAAiB33D,KAAKsrB,mBAErEvqB,EAAWuqB,gBAEd,OAAO1vB,KAAKo5D,eAAe6B,GACzBO,EACAK,EACAT,KAWV,OAJAp7D,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENxE,EAAOmtC,qBAGhB4d,EAAAzoD,UAAA2zD,sBAAA,SAAsB5uD,EAA4BquD,GAChD,IAKIlmD,EACA6sD,EANAr8D,EAASK,KAAKL,OACd4yB,EAAkBvyB,KAAKuyB,gBACvBV,EAAS7xB,KAAK6f,SAASg7C,kBAAkB7zD,EAAWA,WAAYurB,GACpE,IAAKV,EAAQ,OAAOlyB,EAAOmtC,oBAI3B,OAAQjb,EAAOjvB,MAGb,KAAKknD,EAAAlrC,YAAY6G,mBACf,IAAIxjB,EAA+B4vB,EAC/B5tB,EAAgB+C,EAAW/C,cAG/B,GAAIhC,EAAU6kB,aAAagjC,EAAAjrC,eAAe1M,SACxC,OAAOnS,KAAKi8D,6BAA6Bh6D,EAAW+E,EAAYquD,GAGlE,IAAIhwC,EAA4B,KAGhC,GAAIphB,EAAe,CACjB,IAAKhC,EAAU2B,GAAGvB,EAAAqB,YAAYiiB,SAK5B,OAJA3lB,KAAKgc,MACHE,EAAAnC,eAAemiD,sBACfl1D,EAAWA,WAAW7C,MAAOlC,EAAUugB,cAElC7iB,EAAOmtC,oBAEhBznB,EAAWrlB,KAAK6f,SAASswC,iCACvBluD,EACAgC,EACAjE,KAAKuyB,gBAAgBnD,KAAK/B,wBAC1BrmB,OAIG,IAAI/E,EAAU2B,GAAGvB,EAAAqB,YAAYiiB,SAAU,CAI5C,IAHA,IAAIw2C,EAAgB,IAAIp9C,IACpBlT,EAAiBmG,OAAO/P,EAAU2F,YAAYiE,gBAC9CuwD,EAAoBvwD,EAAejF,OAC9BvG,EAAI,EAAGA,EAAI+7D,IAAqB/7D,EACvC87D,EAAcp4D,IAAI8H,EAAexL,GAAGO,KAAKmF,KAAM,MAGjD,IAAIipB,EAAiB/sB,EAAU2F,YAAYuH,UAAUjK,WACjDm3D,EAAoBrtC,EAAepoB,OACnC6zD,EAAsBzzD,EAAWrB,UACjC22D,EAAe7B,EAAoB7zD,OACnC21D,EAAgB,IAAIzmD,MAAqBwmD,GAC7C,IAASj8D,EAAI,EAAGA,EAAIg8D,IAAqBh8D,EAAG,CAC1C,IAAIm8D,EAAWxtC,EAAe3uB,GAAG+D,KAC7BxD,EAAO47D,EAAS55D,MAAQwZ,EAAA3Z,SAAS+O,KAAkBgrD,EAAU57D,KAAKmF,KAAO,KACzE02D,EAAqBp8D,EAAIi8D,EACzB7B,EAAoBp6D,GACpB4B,EAAU2F,YAAYuH,UAAUjK,WAAW7E,GAAGyE,YAClD,IAAK23D,EAKH,OAJAz8D,KAAKgc,MACHE,EAAAnC,eAAeuP,+BACftiB,EAAW7C,MAAOk4D,EAAkBxhD,SAAS,IAAKyhD,EAAazhD,SAAS,KAEnElb,EAAOmtC,oBAEhB,GAAa,OAATlsC,GAAiBu7D,EAAc/2C,IAAIxkB,GAAO,CAE5C,GADI87D,EAAeP,EAAcj7D,IAAIN,GACnB,CAChB27D,EAAcl8D,GAAKL,KAAKkvD,4BAA4BuN,EAAoBC,EAAY,GACpF,IAAIrE,OAAU,EACd,KAAMA,EAAal8C,EAAAuE,KAAKy8B,iBAAiBuf,EAAc18D,KAAK8qD,aAAa,OACjEuN,EAAal8C,EAAAuE,KAAKy8B,iBAAiBuf,EAAc18D,KAAK8qD,aAAa,IAKvE,OAJA9qD,KAAKgc,MACHE,EAAAnC,eAAeo1C,mCACfngC,EAAe3uB,GAAG+D,KAAKD,MAAOnE,KAAK8qD,YAAYjwC,WAAY6hD,EAAa7hD,YAEnElb,EAAOmtC,oBAGlB4vB,EAAerE,OAEfkE,EAAcl8D,GAAKL,KAAKkvD,4BAA4BuN,EAAoBtgD,EAAAuE,KAAKG,IAAG,GAChF67C,EAAe18D,KAAK8qD,YAGtBqR,EAAcp4D,IAAInD,EAAM87D,OACnB,CACL,IAAIC,EAAe38D,KAAK6f,SAASkvC,YAC/B//B,EAAe3uB,GAAG+D,KAClBpE,KAAKuyB,gBAAgBnD,KAAK/B,yBAE5B,IAAKsvC,EAAc,OAAOh9D,EAAOmtC,oBACjCyvB,EAAcl8D,GAAKL,KAAKwvD,kBACtBiN,EACAE,EAAY,MAMlB,IAAIC,EAAwB,IAAI9mD,MAAYsmD,GAC5C,IAAS/7D,EAAI,EAAGA,EAAI+7D,IAAqB/7D,EAAG,CAC1C,IAAIq8D,EAAe1qD,OAAOmqD,EAAcj7D,IAAI2K,EAAexL,GAAGO,KAAKmF,OACnE62D,EAAsBv8D,GAAKq8D,EAO7B,OALAr3C,EAAWrlB,KAAK6f,SAASiG,gBACvB7jB,EACA26D,EACA58D,KAAKuyB,gBAAgBnD,KAAK/B,0BAGrBrtB,KAAKo5D,eAAe/zC,EAAUk3C,GADfv8D,KAAKL,OAAOmtC,oBAQlCznB,EAAWrlB,KAAK6f,SAASiG,gBACvB7jB,EACA,KACAjC,KAAKuyB,gBAAgBnD,KAAK/B,yBAG9B,IAAKhI,EAAU,OAAOrlB,KAAKL,OAAOmtC,oBAGlC,IAAI0uB,EAA0B,EAS9B,OARIn2C,EAASzhB,GAAGvB,EAAAqB,YAAY6qB,YAC1BitC,EAAWx7D,KAAKkvD,4BACdl9C,OAAOhS,KAAK6f,SAAS07C,uBACrBv7D,KAAKygB,QAAQW,UAAS,IAKnBphB,KAAK26D,kBACVt1C,EACAre,EAAWrB,UACXqB,EACAw0D,EACAn2C,EAASyB,aAAagjC,EAAAjrC,eAAetM,SAKzC,KAAKu3C,EAAAlrC,YAAYoO,MACf,GAAI7d,EAAoB0iB,EAAQztB,KAAKi4C,mBAAoB,CACvD2f,EAAWr8D,EAAOmpC,eAAuBjX,EAAQ9E,MAAO1Q,EAAAsT,WAAWC,KACnE,MAMA,OAJA5vB,KAAKgc,MACHE,EAAAnC,eAAe8iD,uGACf71D,EAAW7C,MAAe0tB,EAAQztB,KAAKyW,YAElClb,EAAOmtC,oBAGlB,KAAKgd,EAAAlrC,YAAYtM,OACf,GAAInD,EAAqB0iB,EAAQztB,KAAKi4C,mBAAoB,CACxD2f,EAAWr8D,EAAOupC,gBAAyBrX,EAAQrP,aAAuBqP,EAAQztB,KAAKsrB,gBACvF,MAMA,OAJA1vB,KAAKgc,MACHE,EAAAnC,eAAe8iD,uGACf71D,EAAW7C,MAAgB0tB,EAAQztB,KAAKyW,YAEnClb,EAAOmtC,oBAGlB,KAAKgd,EAAAlrC,YAAYsS,MAEf,GAAI/hB,EADe0iB,EAAQztB,KACNi4C,mBAAoB,CACvC,IAAIif,EAAiBtpD,OAAOhS,KAAK6f,SAAS07C,uBACtCC,EAAWx7D,KAAKkvD,4BAClBoM,EACAt7D,KAAKygB,QAAQW,UAAS,GAGxB46C,EAAWr8D,EAAOypC,WAChB,GACA,EACAoyB,EACAn/C,EAAAsT,WAAWC,IACHiC,EAAQV,cAElB,MAMA,OAJAnxB,KAAKgc,MACHE,EAAAnC,eAAe8iD,uGACf71D,EAAW7C,MAAe0tB,EAAQztB,KAAKyW,YAElClb,EAAOmtC,oBAGlB,KAAKgd,EAAAlrC,YAAYiS,gBACf1hB,EAA6B0iB,EAAQ1iB,UACrC6sD,EAAWh8D,KAAKwvD,kBACdxoD,EAAWA,WACM6qB,EAAQztB,KAAI,KAI/B,MAEF,KAAK0lD,EAAAlrC,YAAY+K,SAGjB,QAKE,OAJA3pB,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENxE,EAAOmtC,oBAGlB,OAAO9sC,KAAK88D,oBACV3tD,EACA6sD,EACAh1D,EAAWrB,UACXqB,IAII0jD,EAAAzoD,UAAAg6D,6BAAR,SACEh6D,EACA+E,EACAquD,GAEA,IAAIpxD,EAA+B,KAI/B84D,EAAoB/1D,EAAW/C,cAC/B+C,EAAW/C,gBACRhC,EAAU2B,GAAGvB,EAAAqB,YAAYiiB,UAC5B3lB,KAAKgc,MACHE,EAAAnC,eAAemiD,sBACfl1D,EAAW7C,MAAOlC,EAAUugB,cAGhCve,EAAgBjE,KAAK6f,SAASm9C,qBAC5BhrD,OAAO/P,EAAU2F,YAAYiE,gBAC7BkxD,EACA/8D,KAAKuyB,gBAAgBnD,KAAK/B,wBAC1BrmB,IAKJ,IAAIb,EAAO0jD,EAAAoT,YACTj9D,KACAiC,EACAgC,EACA+C,EAAWrB,UACX0vD,EACAruD,GAEF,OAAKb,IACHnG,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,sBASvB4d,EAAAzoD,UAAAi7D,mBAAA,SACE/tD,EACAmtD,EACAa,EACArP,GAKA,GAAIqP,IAAwB,MADbhuD,EAAUsf,UAMvB,OAJAzuB,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,QAEN,EAIT,IAAI85C,EAAU9uC,EAAU8uC,QACxB,GAAIA,EAKF,OAJAj+C,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,QAEN,EAGT,IAAIi5D,EAAUjuD,EAAU6uC,mBACpBvO,EAAUtgC,EAAU6f,eAAepoB,OAGvC,OAAI01D,EAAec,GACjBp9D,KAAKgc,MACHohD,EAAU3tB,EACNvzB,EAAAnC,eAAesjD,wCACfnhD,EAAAnC,eAAeuP,+BACnBwkC,EAAW3pD,MAAOi5D,EAAQviD,WAAYyhD,EAAazhD,aAE9C,KAILyhD,EAAe7sB,IAAYwO,KAC7Bj+C,KAAKgc,MACHE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAOsrC,EAAQ50B,WAAYyhD,EAAazhD,aAE9C,IAOX6vC,EAAAzoD,UAAA04D,kBAAA,SACEt1C,EACAo1C,EACA3M,EACA4M,EACA4C,QADA,IAAA5C,MAAA,QACA,IAAA4C,OAAA,GAEA,IAAIhB,EAAe7B,EAAoB7zD,OACnCuI,EAAYkW,EAASlW,UAEzB,IAAKnP,KAAKk9D,mBACR/tD,EACAmtD,EACW,GAAX5B,EACA5M,GAEA,OAAO9tD,KAAKL,OAAOmtC,oBAIrB,GAAIwwB,EAAQ,CAEV,GADAtrD,QAAQqT,EAASzhB,GAAGvB,EAAAqB,YAAY+tD,cAC5BzxD,KAAK4qD,uBAAuB2S,SAASl4C,GAKlC,CACLrlB,KAAK4qD,uBAAuBrvC,KAAK8J,GACjC,IAAIlf,EAAOnG,KAAKw9D,2BAA2Bn4C,EAAUo1C,EAAqB3M,EAAY4M,GAEtF,OADA16D,KAAK4qD,uBAAuB56B,MACrB7pB,EARPnG,KAAK+b,QACHG,EAAAnC,eAAe0jD,yCACf3P,EAAW3pD,MAAOkhB,EAAS7C,cAWjC,IAAIk7C,EAAuBhD,EAAU4B,EAAe,EAAIA,EACpD3zB,EAAW,IAAI7yB,MAAqB4nD,GACpC3wC,EAAQ,EACR2tC,IACF/xB,EAAS,GAAK+xB,EACd3tC,EAAQ,GAGV,IADA,IAAIiC,EAAiB7f,EAAU6f,eACtB3uB,EAAI,EAAGA,EAAIi8D,IAAgBj8D,IAAK0sB,EACvC4b,EAAS5b,GAAS/sB,KAAKwvD,kBACrBiL,EAAoBp6D,GACpB2uB,EAAe3uB,GAAE,KAMrB,OADA2R,OAAO+a,GAAS2wC,GACT19D,KAAKo5D,eAAe/zC,EAAUsjB,IAI/B+hB,EAAAzoD,UAAAu7D,2BAAR,SACEn4C,EACAo1C,EACA3M,EACA4M,gBAAA,IAAAA,MAAA,GAEA,IAAI4B,EAAe7B,EAAoB7zD,OACnCuI,EAAYkW,EAASlW,UACrBojB,EAAkBvyB,KAAKuyB,gBACvB5yB,EAASK,KAAKL,OACdiI,EAAcyd,EAASpjB,UAAU2F,YAGjC+1D,EAAeprC,EAAgBnD,KAC/BuD,EAActN,EAAS7C,aAAe,aAAe6C,EAAS4I,gBAAgBpT,SAAS,IACvF1V,EAAakgB,EAASlW,UAAUhK,WAChCiqB,EAAO06B,EAAAz6B,KAAK1tB,OAAO4wB,GACvBnD,EAAKrrB,IAAG,MACRqrB,EAAKuD,YAAcA,EACnBvD,EAAKjqB,WAAaA,EAClBiqB,EAAK/B,wBAA0BhI,EAASgI,wBAIxC,IAAIje,KACJ,GAAIsrD,EAAS,CACX,IAAIl3D,EAASwO,OAAOqT,EAAS7hB,QAE7B,GADAwO,OAAOxO,EAAOZ,MAAQknD,EAAAlrC,YAAYjL,OAC9B0I,EAAA0Y,gBAAgB2lC,IAAYr+C,EAAA2Y,aAAaC,SAC3C7F,EAAKmE,oBACHlX,EAAA6Y,iBAAiBwlC,GACTl3D,EAAQY,KAChB,YAEG,CACL,IAAIw5D,EAAYxuC,EAAKiE,eAAuB7vB,EAAQY,KAAM,QAAQ,GAClEgL,EAAKmM,KACH5b,EAAOirC,eAAegzB,EAAU7wC,MAAO2tC,KAK7C,IADA,IAAI1rC,EAAiB7f,EAAU6f,eACtB3uB,EAAI,EAAGA,EAAIi8D,IAAgBj8D,EAAG,CACrC,IAAIw9D,EAAY79D,KAAKwvD,kBACnBiL,EAAoBp6D,GACpB2uB,EAAe3uB,GAAE,KAInB,GAAIgc,EAAA0Y,gBAAgB8oC,IAAcxhD,EAAA2Y,aAAaC,SAC7C7F,EAAKmE,oBACHlX,EAAA6Y,iBAAiB2oC,GACjB7uC,EAAe3uB,GACf8O,EAAUggB,iBAAiB9uB,QAGxB,CACL,IAAIy9D,EAAgB1uC,EAAKiE,eACvBrE,EAAe3uB,GACf8O,EAAUggB,iBAAiB9uB,IAC1B+uB,EAAK0F,YAAY+oC,EAAW7uC,EAAe3uB,KAE9C+O,EAAKmM,KACH5b,EAAOirC,eAAekzB,EAAc/wC,MAAO8wC,KAMjDtrC,EAAgBnD,KAAOA,EACvB,IAAImvB,EAAgBpvC,EAAU6f,eAAepoB,OAC7C,IAASvG,EAAIi8D,EAAcj8D,EAAIk+C,IAAiBl+C,EAAG,CACjD,IAAIwuD,EAAW7uD,KAAKwvD,kBAClBx9C,OAAOpK,EAAYuH,UAAUjK,WAAW7E,GAAGyE,aAC3CkqB,EAAe3uB,GAAE,KAIfy9D,EAAgB1uC,EAAKiE,eACvBrE,EAAe3uB,GACf8O,EAAUggB,iBAAiB9uB,IAC1B+uB,EAAK0F,YAAY+5B,EAAU7/B,EAAe3uB,KAE7C+O,EAAKmM,KACH5b,EAAOirC,eAAekzB,EAAc/wC,MAAO8hC,IAK/C,IAAIkP,EAAgB/rD,OAAOpK,EAAYwH,MACvC,GAAI2uD,EAAcn7D,MAAQwZ,EAAA3Z,SAASqS,MAEjC,IADA,IAAIxJ,EAA8ByyD,EAAezyD,WACjC3E,GAAPtG,EAAI,EAAOiL,EAAW1E,QAAQvG,EAAIsG,IAAKtG,EAAG,CACjD,IAAIoF,EAAOzF,KAAKyuD,iBAAiBnjD,EAAWjL,IAC5C,GAAIgc,EAAA0Y,gBAAgBtvB,IAAS4W,EAAA2Y,aAAa09B,MACxCtjD,EAAKmM,KAAK9V,GACN2pB,EAAKtrB,MAAK,KAA6B,WAI/CsL,EAAKmM,KAAKvb,KAAKyuD,iBAAiBsP,IAIlC,IAAIzrC,EAAelD,EAAKkD,aACxB,GAAIA,EAAc,KAChB,IAAwB,IAAAzD,EAAAlL,EAAA2O,EAAa7oB,UAAQsa,EAAA8K,EAAAhL,QAAAE,EAAAD,KAAAC,EAAA8K,EAAAhL,OAAE,CAA1C,IAAIsP,EAAWpP,EAAAziB,MACd6xB,EAAYvvB,GAAGvB,EAAAqB,YAAY0vB,SAC7Bb,EAAgBrC,cAAciD,qGAGlC/D,EAAKkD,aAAe,KAOtB,OALAlD,EAAKmB,WACLvwB,KAAKuyB,gBAAgBnD,KAAOuuC,EAC5B39D,KAAK8qD,YAAc3lD,EAGfA,GAAcgX,EAAAuE,KAAKc,MAAS4N,EAAKtrB,MAAK,IAOnCnE,EAAOqrC,YAAYrY,EAAavjB,EAAMjK,EAAWuqB,iBANtD1vB,KAAKgc,MACHE,EAAAnC,eAAe82C,+DACfjpD,EAAYuH,UAAUhK,WAAWhB,OAE5BxE,EAAOmtC,sBAMlB4d,EAAAzoD,UAAA8qD,iBAAA,SAAiBiR,GAQf,IAAInwC,EAAamwC,EAASnwC,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAIowC,EAAoBD,EAAS7uD,UAC7B+uD,EAAeF,EAASx7C,aACxB27C,EAAyBF,EAAkBjvC,eAC3CovC,EAAgCJ,EAAS/7D,UAAU2F,YAAYuH,UAAUjK,WACzEm5D,EAAmBJ,EAAkB94D,WACrCm5D,EAAiBL,EAAkBxvC,SACnC8vC,EAAaP,EAASp6D,GAAGvB,EAAAqB,YAAY6qB,UAGrCiwC,EAAeP,EAAkBjgB,mBACjCygB,EAAcD,EACdE,EAAeP,EAAuBv3D,OACtC+3D,EAAcD,EACdH,MACAE,IACAE,GAEJ,IAAIC,EAAc5sD,OAAO2sD,EAAcF,GAEnCI,EAAoB,IAAI/oD,MAAqB2oD,GAC7CK,EAAe,EAGfn/D,EAASK,KAAKL,OACd4+D,IACFM,EAAkB,GAAKl/D,EAAOmpC,eAAe,EAAG9oC,KAAKygB,QAAQ2sC,gBAC7D0R,EAAe,GAIjB,IAAK,IAAIz+D,EAAI,EAAGA,EAAIm+D,IAAgBn+D,IAAKy+D,EACvCD,EAAkBC,GAAgBn/D,EAAOmpC,eAAeg2B,EAAcX,EAAuB99D,GAAGqvB,gBAElG1d,OAAO8sD,GAAgBL,GAGvB,IAAIM,EAAsB,IAAI5iD,EAAA0hC,UAAUsgB,EAAwBE,EAAkBC,GAC9EU,EAAiBd,EAAe,cACpCa,EAAoB/gB,mBAAqB0gB,GACzC7wC,EAAa,IAAIi8B,EAAA18B,SACf4wC,EAAS/7D,UACT+8D,EACAD,EACAf,EAASx6D,OACTw6D,EAAS3wC,0BAEAtpB,IAAIi6D,EAASv6D,MAAQpB,EAAAqB,YAAY+tD,WAAapvD,EAAAqB,YAAYupD,UACrE+Q,EAASnwC,WAAaA,EAItB,IAAI2gC,EAAmBxuD,KAAKuyB,gBAC5BvyB,KAAKuyB,gBAAkB1E,EAGvB,IAAIue,EAAWwyB,EAAc,EACzBp1D,EAAQ,IAAIsM,MAAcs2B,GAC1B6yB,EAAM,KAAOL,EAAY/jD,SAAS,IACtC,IAASxa,EAAI,EAAGA,EAAI+rC,IAAY/rC,EAAG,CACjC,IAAIoL,EAAQpL,EAAEwa,SAAS,IAAMokD,EAC7Bz1D,EAAMnJ,GAAKoL,EAEb,IAAI2D,EAAOzP,EAAOqrC,YAAYxhC,EAAM,IAClC7J,EAAOqrC,YAAY,cACjBrrC,EAAOusC,aAAa1iC,EAAO,aAEzBg1D,EACI7+D,EAAO6oC,aACLnsB,EAAAqZ,SAASmjC,OACTl5D,EAAOupC,gBAAgB,QAAS7sB,EAAAsT,WAAWC,KAC3CjwB,EAAO8nC,UAAU+2B,IAEnB7+D,EAAOupC,gBAAgB,QAAS7sB,EAAAsT,WAAWC,QAGnDjwB,EAAOmtC,sBAET,IAASzsC,EAAI,EAAGA,EAAIu+D,IAAev+D,IAAKy+D,EAAc,CACpD,IAAI16D,EAAO+5D,EAAuBK,EAAen+D,GAC7CuH,EAAcw2D,EAA8BI,EAAen+D,GAC3DyE,EAAc8C,EAAY9C,YAC1B+pD,OAAQ,EACR/pD,EACF+pD,EAAWlvD,EAAOirC,eAAek0B,EAC/B9+D,KAAKwvD,kBACH1qD,EACAV,EAAI,OAMRpE,KAAKgc,MACHE,EAAAnC,eAAemlD,4CACft3D,EAAYzD,OAEd0qD,EAAWlvD,EAAOmtC,qBAEpB19B,EAAOzP,EAAOqrC,YAAYxhC,EAAMnJ,EAAI,IAClC+O,EACAy/C,IAEFgQ,EAAkBC,GAAgBn/D,EAAOmpC,eAAeg2B,EAAc16D,EAAKsrB,gBAE7E1vB,KAAKuyB,gBAAkBi8B,EACvBx8C,OAAO8sD,GAAgBH,GAEvB,IAAI7S,EAAUnsD,EAAOwtC,YACnB6xB,EACAh/D,KAAK+rD,mBACHgT,EAAoB/vC,eACpB+vC,EAAoB55D,WACpB45D,EAAoBtwC,UAEtBtS,EAAAshC,mBAAmB5vB,EAAWL,kBAC9B7tB,EAAOqrC,YAAY,MACjB57B,EACAzP,EAAO4sC,WACL2xB,EACAW,EACAR,EAAiB3uC,iBAElB2uC,EAAiB3uC,iBAGtB,OADA7B,EAAW0C,SAAS5wB,EAAQmsD,GACrBj+B,GAID68B,EAAAzoD,UAAAk9D,cAAR,WAEE,IAAKn/D,KAAKkrD,QAAS,CACjB,IAAIvrD,EAASK,KAAKL,OAClBK,KAAKkrD,QAAUvrD,EAAOqtC,UAHL,QAKf3wB,EAAAsT,WAAWC,KACX,EACAjwB,EAAO8nC,UAAU,IAGrB,MAVmB,SAcbijB,EAAAzoD,UAAA+qD,cAAR,WAEE,IAAKhtD,KAAKmrD,QAAS,CACjB,IAAIxrD,EAASK,KAAKL,OAClBK,KAAKmrD,QAAUxrD,EAAOwtC,YAHL,WAIfntC,KAAK+rD,oBAAqB5vC,EAAAuE,KAAKQ,KAAO/E,EAAAuE,KAAKc,MAC3C,KACA7hB,EAAOmrC,gBAAgB9qC,KAAKm/D,gBAC1Bx/D,EAAOmpC,eAAe,EAAGzsB,EAAAsT,WAAWC,OAGxCjwB,EAAOiuC,kBAVU,WAUsB,YAEzC,MAZmB,YAgBrB8c,EAAAzoD,UAAAm3D,eAAA,SACE/zC,EACAsjB,QAAA,IAAAA,MAAA,MAEA,IAAIy2B,EAAcz2B,EAAWA,EAAS/hC,OAAS,EAC3C01D,EAAe8C,EAEfX,EADep5C,EAASlW,UAAU6uC,mBAElC0gB,EAAer5C,EAASlW,UAAU6f,eAAepoB,OACjD+3D,EAAcD,EACdr5C,EAASzhB,GAAGvB,EAAAqB,YAAY6qB,cACxBkwC,IACAE,IACArC,GAEJtqD,OAAOotD,GAAeX,GAEtB,IAAI9+D,EAASK,KAAKL,OAClB,IAAKK,KAAKowD,gBAAgB/qC,GAAW,OAAO1lB,EAAOmtC,oBACnD,IAAI3nC,EAAakgB,EAASlW,UAAUhK,WAChCk6D,EAAeh6C,EAASzhB,GAAGvB,EAAAqB,YAAY2rD,eAG3C,GAAI+P,EAAcT,EAAa,CACxBh2B,KACHA,EAAW,IAAI7yB,MAAM6oD,IACZ/3D,OAAS,GAKpB,IAHA,IAAIooB,EAAiB3J,EAASlW,UAAU6f,eACpCswC,EAAiBj6C,EAASpjB,UAAU2F,YAAYuH,UAAUjK,WAC1Dq6D,GAA0B,EACrBl/D,EAAIi8D,EAAcj8D,EAAIq+D,IAAgBr+D,EAAG,CAChD,IAAIyE,EAAcw6D,EAAej/D,GAAGyE,YACpC,GAAsB,OAAhBA,IAAwBsX,EAAAzZ,oBAAoBmC,EAAYlC,MAAQ,CACpE28D,GAA0B,EAC1B,OAGJ,GAAIA,EACF,IAASl/D,EAAIi8D,EAAcj8D,EAAIq+D,IAAgBr+D,EAC7CsoC,EAASptB,KACPvb,KAAKwvD,kBACS8P,EAAej/D,GAAGyE,YAC9BkqB,EAAe3uB,GAAE,UAMlB,CACL,IAASA,EAAIi8D,EAAcj8D,EAAIq+D,IAAgBr+D,EAC7CsoC,EAASptB,KAAKyT,EAAe3uB,GAAGi9C,aAAa39C,IAE/C,IAAK0/D,EAAc,CACjB,IAAIrB,EAAW34C,EAEf,GADAA,EAAWrlB,KAAK+sD,iBAAiB1nC,IAC5BrlB,KAAKowD,gBAAgB/qC,GAAW,OAAO1lB,EAAOmtC,oBACnDznB,EAAS+J,KAAK3rB,MAAQu6D,EAAS5uC,KAAK3rB,MACpCzD,KAAK2rB,QAAQxM,gBAAgBpb,IAAIshB,EAAS7C,aAAc6C,GACxD,IAAIs2C,EAAmBx2D,EAAWuqB,eAElC,OADA1vB,KAAK8qD,YAAc3lD,EACZxF,EAAOqrC,YAAY,MACxBrrC,EAAOmrC,gBAAgB9qC,KAAKm/D,gBAAiBx/D,EAAO8nC,UAAU60B,IAC9D38D,EAAO4sC,WAAWlnB,EAAS7C,aAAcmmB,EAAUgzB,IAClDA,KAOT,OADA37D,KAAK8qD,YAAc3lD,EACfk6D,EAAqB1/D,EAAO8sC,iBAAiBpnB,EAAS7C,aAAcmmB,EAAUxjC,EAAWuqB,gBACnF/vB,EAAO4sC,WAAWlnB,EAAS7C,aAAcmmB,EAAUxjC,EAAWuqB,iBAK1Eg7B,EAAAzoD,UAAA66D,oBAAA,SACE3tD,EACA6sD,EACAvB,EACA3M,EACA4M,QAAA,IAAAA,MAAA,GAEA,IAAI4B,EAAe7B,EAAoB7zD,OAEvC,IAAK5G,KAAKk9D,mBACR/tD,EACAmtD,EACW,GAAX5B,EACA5M,GAEA,OAAO9tD,KAAKL,OAAOmtC,oBAGrB,IAAI4wB,EAAuBhD,EAAU4B,EAAe,EAAIA,EACpD3zB,EAAW,IAAI7yB,MAAqB4nD,GACpC3wC,EAAQ,EACR2tC,IACF/xB,EAAS,GAAK+xB,EACd3tC,EAAQ,GAGV,IADA,IAAIiC,EAAiB7f,EAAU6f,eACtB3uB,EAAI,EAAGA,EAAIi8D,IAAgBj8D,IAAK0sB,EACvC4b,EAAS5b,GAAS/sB,KAAKwvD,kBACrBiL,EAAoBp6D,GACpB2uB,EAAe3uB,GAAE,KAMrB,OADA2R,OAAO+a,GAAS2wC,GACT19D,KAAKw/D,iBAAiBrwD,EAAW6sD,EAAUrzB,IAIpD+hB,EAAAzoD,UAAAu9D,iBAAA,SACErwD,EACA6sD,EACArzB,QAAA,IAAAA,MAAA,MAEA,IAAIy2B,EAAcz2B,EAAWA,EAAS/hC,OAAS,EAC3C01D,EAAe8C,EAEfX,EADetvD,EAAU6uC,mBAEzB0gB,EAAevvD,EAAU6f,eAAepoB,OACxC+3D,EAAcD,EACdvvD,EAAUsf,aACVgwC,IACAE,IACArC,GAEJtqD,OAAOotD,GAAeX,GAEtBz+D,KAAK+rD,mBAAmB58C,EAAU6f,eAAgB7f,EAAUhK,WAAYgK,EAAUsf,UAClF,IAAI9uB,EAASK,KAAKL,OAGlB,GAAIy/D,EAAcT,EAAa,CACxBh2B,KACHA,EAAW,IAAI7yB,MAAM6oD,IACZ/3D,OAAS,GAGpB,IADA,IAAIooB,EAAiB7f,EAAU6f,eACtB3uB,EAAIi8D,EAAcj8D,EAAIq+D,IAAgBr+D,EAC7CsoC,EAASptB,KAAKyT,EAAe3uB,GAAGi9C,aAAa39C,IAIjD,IAAIwF,EAAagK,EAAUhK,WAE3B,OADAnF,KAAK8qD,YAAc3lD,EACZxF,EAAOqrC,YAAY,MACxBrrC,EAAOmrC,gBAAgB9qC,KAAKm/D,gBAC1Bx/D,EAAO8nC,UAAU60B,IAEnB38D,EAAOgtC,mBAAmBqvB,EAAUrzB,EAAUx5B,EAAU2hB,sBACvD3rB,EAAWuqB,iBAGhBg7B,EAAAzoD,UAAA4zD,uBAAA,SAAuB7uD,EAA6BquD,GAIlD,IAHA,IAAIttD,EAAcf,EAAWe,YACzB03D,EAAiB13D,EAAYnB,OAC7B84D,EAAQ,IAAI5pD,MAAqB2pD,KAC5Bp/D,EAAI,EAAGA,EAAIo/D,IAAkBp/D,EACpCq/D,EAAMr/D,GAAKL,KAAKwvD,kBACdznD,EAAY1H,GACZ8b,EAAAuE,KAAKc,UAWT,OANAk+C,EAAMD,GAAkBz/D,KAAKwvD,kBAC3BznD,EAAY03D,GACZpK,OAIKr1D,KAAKL,OAAOqrC,YAAY,KAAM00B,EAAO1/D,KAAK8qD,YAAYp7B,iBAG/Dg7B,EAAAzoD,UAAA6zD,+BAAA,SAA+B9uD,EAAqCquD,GAClE,IAAIxjC,EAAS7xB,KAAK6f,SAAS8/C,qBAAqB34D,EAAYhH,KAAKuyB,iBACjE,IAAKV,EAAQ,OAAO7xB,KAAKL,OAAOmtC,oBAChC,OAAQjb,EAAOjvB,MACb,KAAKknD,EAAAlrC,YAAYjL,MACf,IAAIqnD,EAAch7D,KAAKuyB,gBAAgBnD,KAAKxrB,GAAE,MAC1Cg4D,EAAqB/pC,EAAQE,eAAe+3B,EAAA7tC,aAAaY,YAAam+C,GAC1E,IAAKY,EAKH,OAJA57D,KAAKgc,MACHE,EAAAnC,eAAeohD,qCACfn0D,EAAWA,WAAW7C,MAAe0tB,EAAQrP,cAExCxiB,KAAKL,OAAOmtC,oBAErB,IAAI4tB,EAAU16D,KAAKwvD,kBACjBxoD,EAAWA,WACH6qB,EAAQztB,KAAI,KAItB,OAAOpE,KAAK26D,kBAAkBiB,GAC5B50D,EAAWsB,mBACVtB,EAAY0zD,GAOnB,OAJA16D,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,qBAGrB4d,EAAAzoD,UAAA8zD,0BAAA,SAA0B/uD,EAAgCquD,GACxD,IAAIztD,EAAcZ,EAAWY,YACzBhH,EAAOgH,EAAYhH,KACnBqmB,GAAcrmB,EAAKmF,KAAKa,OACxBhG,EAAKmF,KACL,aAAe,IAAM/F,KAAKirD,cAAcrkD,OAAOiU,SAAS,IACxD0X,EAAkBvyB,KAAKuyB,gBACvBtwB,EAAY,IAAI6nD,EAAAnhC,kBAClB3oB,KAAK2rB,QACL1E,EACAsL,EAAgB/P,aAAengB,EAAA2W,gBAAkBiO,EACjDrf,EACA,KACAkiD,EAAAjrC,eAAelb,MAEbyrB,EAAOmD,EAAgBnD,KACvB/J,EAAWrlB,KAAKkwD,kCAClBjuD,KAEAmtB,EAAK/B,wBACL+B,EACAxnB,GAEF,IAAKyd,EAAU,OAAOrlB,KAAKL,OAAOmtC,oBAClC9sC,KAAK8qD,YAAczlC,EAASlW,UAAU/K,KAGtC,IAAI2oB,EAAQ/sB,KAAKwxD,yBAAyBnsC,GAC1C,OAAO0H,EAAQ,EACX/sB,KAAKL,OAAOmtC,oBACZ9sC,KAAKL,OAAO8nC,UAAU1a,IAQ5B29B,EAAAzoD,UAAA+zD,4BAAA,SACEhvD,EACAquD,EACAuK,GAEA,IAAIjgE,EAASK,KAAKL,OACd4yB,EAAkBvyB,KAAKuyB,gBAG3B,OAAQvrB,EAAWpE,MACjB,KAAKwZ,EAAA3Z,SAASK,KACZ,IAAI2d,EAAUzgB,KAAKygB,QAInB,OAHK40C,EAAejZ,iBAClBp8C,KAAK8qD,YAAcrqC,EAAQW,WAEtBX,EAAQkB,SACXhiB,EAAOkoC,UAAU,GACjBloC,EAAO8nC,UAAU,GAEvB,KAAKrrB,EAAA3Z,SAASM,KAEZ,OADA/C,KAAK8qD,YAAc3uC,EAAAuE,KAAKW,KACjB1hB,EAAO8nC,UAAU,GAE1B,KAAKrrB,EAAA3Z,SAASO,MAEZ,OADAhD,KAAK8qD,YAAc3uC,EAAAuE,KAAKW,KACjB1hB,EAAO8nC,UAAU,GAE1B,KAAKrrB,EAAA3Z,SAASgS,KAEZ,IADI2a,EAAOmD,EAAgBnD,MAClBxrB,GAAE,MAET,GADIi8D,EAAazwC,EAAKqE,eAAe,QAGnC,OADAzzB,KAAK8qD,YAAc+U,EAAWz7D,KACvBzE,EAAOmpC,eAAe+2B,EAAW9yC,MAAO8yC,EAAWz7D,KAAKsrB,gBAGnE,GAAI6C,EAAgB3uB,GAAGvB,EAAAqB,YAAY6qB,UAAW,CAC5C,IAAI/qB,EAASwO,OAAOugB,EAAgB/uB,QACpCwO,OAAOxO,EAAOZ,MAAQknD,EAAAlrC,YAAYjL,OAClC,IAAI8a,EAAmBjrB,EAAQY,KAC/B,OAAImuB,EAAgB3uB,GAAGvB,EAAAqB,YAAYmQ,eAC5Bub,EAAKxrB,GAAE,KACVwrB,EAAKrrB,IAAG,IAER/D,KAAK8qD,YAAcr8B,EACZ9uB,EAAOqpC,eAAe,EAC3BhpC,KAAK4wD,wBAA+BptD,EAAQwD,MAIlDhH,KAAK8qD,YAAcr8B,EACZ9uB,EAAOmpC,eAAe,EAAGra,EAASiB,iBAO3C,OALA1vB,KAAKgc,MACHE,EAAAnC,eAAe+lD,+CACf94D,EAAW7C,OAEbnE,KAAK8qD,YAAc9qD,KAAKygB,QAAQW,UACzBzhB,EAAOmtC,oBAEhB,KAAK1wB,EAAA3Z,SAAS+R,MACZ,IAAI4a,EAEEywC,EADN,IADIzwC,EAAOmD,EAAgBnD,MAClBxrB,GAAE,MAET,GADIi8D,EAAazwC,EAAKqE,eAAe,QAInC,GADIpC,EADkBrf,OAAO6tD,EAAWz7D,KAAKg4C,gBAClB/qB,KAGzB,OADArxB,KAAK8qD,YAAcz5B,EAAKjtB,KACjBzE,EAAOmpC,eAAe+2B,EAAW9yC,MAAOsE,EAAKjtB,KAAKsrB,gBAI/D,GAAI6C,EAAgB3uB,GAAGvB,EAAAqB,YAAY6qB,UAAW,CAC5C,IAEI8C,EAFA7tB,EAASwO,OAAOugB,EAAgB/uB,QAGpC,GAFAwO,OAAOxO,EAAOZ,MAAQknD,EAAAlrC,YAAYjL,OAC9B0d,EAAe7tB,EAAQ6tB,KACjB,CACR,IAAI0uC,EAAY1uC,EAAKjtB,KAErB,OADApE,KAAK8qD,YAAciV,EACZpgE,EAAOmpC,eAAe,EAAGi3B,EAAUrwC,iBAQ9C,OALA1vB,KAAKgc,MACHE,EAAAnC,eAAeimD,iDACfh5D,EAAW7C,OAEbnE,KAAK8qD,YAAc9qD,KAAKygB,QAAQW,UACzBzhB,EAAOmtC,oBAKlB,IAAIjb,EAAS7xB,KAAK6f,SAAS8E,kBACzB3d,EACAhH,KAAK6qD,aAAet4B,GAEtB,IAAKV,EAAQ,OAAOlyB,EAAOmtC,oBAE3B,OAAQjb,EAAOjvB,MACb,KAAKknD,EAAAlrC,YAAYoO,MACf,IAAIizC,EAAoBpuC,EAAQztB,KAEhC,GADA4N,OAAOiuD,GAAa9jD,EAAAuE,KAAKc,MACbqQ,EAAQjuB,GAAGvB,EAAAqB,YAAYipB,SACjC,OAAO3sB,KAAKo1D,sBAA6BvjC,EAAQwjC,EAAgBuK,GAEnE,IAAItxC,EAAqBuD,EAAQ9E,MAGjC,OAFA/a,OAAOsc,GAAc,GACrBtuB,KAAK8qD,YAAcmV,EACZjgE,KAAKL,OAAOmpC,eAAexa,EAAY2xC,EAAUvwC,gBAE1D,KAAKo6B,EAAAlrC,YAAYtM,OACf,IAAKtS,KAAK2uD,cAAsB98B,GAC9B,OAAO7xB,KAAKL,OAAOmtC,oBAErB,IAAIqC,EAAsBtd,EAAQztB,KAElC,OADA4N,OAAOm9B,GAAchzB,EAAAuE,KAAKc,MACbqQ,EAAQjuB,GAAGvB,EAAAqB,YAAYipB,SAC3B3sB,KAAKo1D,sBAA8BvjC,EAAQwjC,EAAgBuK,IAEpE5/D,KAAK8qD,YAAc3b,EACZnvC,KAAKL,OAAOupC,gBAAyBrX,EAAQrP,aAAc2sB,EAAWzf,iBAE/E,KAAKo6B,EAAAlrC,YAAYyN,UACf,OAAKwF,EAAOjuB,GAAGvB,EAAAqB,YAAYupD,WAQ3BjtD,KAAK8qD,YAAc3uC,EAAAuE,KAAKG,IACRgR,EAAQjuB,GAAGvB,EAAAqB,YAAYipB,SAC9B3sB,KAAKL,OAAO8nC,UAAsB5V,EAAQvF,eAE5CtsB,KAAKL,OAAOupC,gBAA4BrX,EAAQrP,aAAcnG,EAAAsT,WAAWC,OAX9E5vB,KAAKgc,MACHE,EAAAnC,eAAemmD,+HACfl5D,EAAW7C,OAEbnE,KAAK8qD,YAAc3uC,EAAAuE,KAAKG,IACjB7gB,KAAKL,OAAOmtC,qBAQvB,KAAKgd,EAAAlrC,YAAY6G,mBACf,IAAIJ,EAAWrlB,KAAK6f,SAASiG,gBACR+L,EACnB,KACAU,EAAgBnD,KAAK/B,yBAEvB,IAAMhI,IAAYrlB,KAAKowD,gBAAgB/qC,GAAY,OAAO1lB,EAAOmtC,oBACjE,IAAI/f,EAAQ/sB,KAAKwxD,yBAAyBnsC,GAE1C,OADArlB,KAAK8qD,YAAczlC,EAASlW,UAAU/K,KAC/BpE,KAAKL,OAAO8nC,UAAU1a,GAOjC,OAJA/sB,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,qBAGrB4d,EAAAzoD,UAAAg0D,4BAAA,SACEjvD,EACAquD,GAEA,IAAI11D,EAASK,KAAKL,OAIdwG,EAAOnG,KAAKkvD,4BAA4BloD,EAAWA,WAAYhH,KAAKygB,QAAQW,UAAS,GACrFhd,EAAOpE,KAAK8qD,YACZ/hD,EAAS/I,KAAK6f,SAASkvC,YAAY/nD,EAAW+B,QAElD,OADA/I,KAAK8qD,YAAc3uC,EAAAuE,KAAKW,KACnBtY,EACE3E,EAAKR,GAAE,OAAyBmF,EAAOnF,GAAE,KAC5CQ,EAAKk4C,gBAAgB1qB,eAAe7oB,GAClCpJ,EAAO6oC,aACLpkC,EAAKR,GAAE,IACHyY,EAAAqZ,SAASM,MACT3Z,EAAAqZ,SAASK,MACb5vB,EACA/B,EAAKk5C,aAAa39C,IAEpBA,EAAO8nC,UAAU,GACnB9nC,EAAO8nC,UAAUrjC,EAAKwtB,eAAe7oB,GAAQ,GAAQ,EAAI,GAXzCpJ,EAAOmtC,qBAc7B4d,EAAAzoD,UAAAi0D,yBAAA,SACElvD,EACAquD,EACA8K,QAAA,IAAAA,OAAA,GAEA,IAAIxgE,EAASK,KAAKL,OAElB,OAAQqH,EAAWsM,aACjB,KAAK8I,EAAAhJ,YAAYG,MACfvB,QAAQmuD,GACR,IAAItjB,EAAYwY,EAAejZ,eAC/B,OACES,GACAA,EAAU56C,WAAajC,KAAK2rB,QAAQnM,eAE7Bxf,KAAKogE,oBACVpuD,OAAO6qC,EAAU54C,eAAe,GACP+C,EAAYP,mBACrCO,IAGJhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENxE,EAAOmtC,qBAEhB,KAAK1wB,EAAAhJ,YAAYU,MACf,IAAIusD,EAAsCr5D,EAAY1F,MAItD,OAHI6+D,IACFE,GAAcA,GAEZhL,GAAkBl5C,EAAAuE,KAAKY,IAClB3hB,EAAOsoC,UAAeo4B,IAE/BrgE,KAAK8qD,YAAc3uC,EAAAuE,KAAKa,IACjB5hB,EAAOwoC,UAAUk4B,IAE1B,KAAKjkD,EAAAhJ,YAAYa,QACf,IAAIqsD,EAAsCt5D,EAAY1F,MAOtD,OANI6+D,IACFG,EAAWC,QACT7+C,QAAQ,GACR4+C,IAGIjL,EAAezyD,MAIrB,OACE,GAAI49D,UAAUF,GAAW,OAAO3gE,EAAO8nC,UAAUuI,QAAQswB,IACzD,MAEF,OACE,GAAIG,UAAUH,GAAW,OAAO3gE,EAAO8nC,UAAUuI,QAAQswB,IACzD,MAEF,OACE,GAAII,WAAWJ,GAAW,OAAO3gE,EAAO8nC,UAAUuI,QAAQswB,IAC1D,MAEF,OACE,GAAIK,WAAWL,GAAW,OAAO3gE,EAAO8nC,UAAUuI,QAAQswB,IAC1D,MAEF,OACE,GAAIM,WAAWN,GAAW,OAAO3gE,EAAO8nC,UAAUuI,QAAQswB,IAC1D,MAEF,OACE,GAAIO,WAAWP,GAAW,OAAO3gE,EAAO8nC,UAAUuI,QAAQswB,IAC1D,MAEF,QACE,GAAIQ,YAAYR,GAAW,OAAO3gE,EAAO8nC,UAAUuI,QAAQswB,IAC3D,MAEF,OACE,IAAKtgE,KAAKygB,QAAQkB,SAAU,CAC1B,GAAIi/C,WAAWN,GAAW,OAAO3gE,EAAO8nC,UAAUuI,QAAQswB,IAC1D,MAEF,OAAO3gE,EAAOkoC,UAAUmI,QAAQswB,GAAWrwB,SAASqwB,IAEtD,OACE,IAAKtgE,KAAKygB,QAAQkB,SAAU,CAC1B,GAAIk/C,WAAWP,GAAW,OAAO3gE,EAAO8nC,UAAUuI,QAAQswB,IAC1D,MAEF,OAAO3gE,EAAOkoC,UAAUmI,QAAQswB,GAAWrwB,SAASqwB,IAEtD,OACA,OACE,OAAO3gE,EAAOkoC,UAAUmI,QAAQswB,GAAWrwB,SAASqwB,IAEtD,QACE,GAAIS,WAAWT,GAAW,OAAO3gE,EAAOsoC,UAAU+4B,WAAWV,IAC7D,MAEF,QACE,GAAIW,WAAWX,GAAW,OAAO3gE,EAAOwoC,UAAU+4B,WAAWZ,IAC7D,MAEF,QACE,MAEF,QAEE,OADAtuD,QAAO,GACArS,EAAOmtC,oBAMlB,OAAI8zB,WAAWN,IACbtgE,KAAK8qD,YAAc3uC,EAAAuE,KAAKG,IACjBlhB,EAAO8nC,UAAUuI,QAAQswB,KACvBO,WAAWP,IACpBtgE,KAAK8qD,YAAc3uC,EAAAuE,KAAKQ,IACjBvhB,EAAO8nC,UAAUuI,QAAQswB,MAEhCtgE,KAAK8qD,YAAc3uC,EAAAuE,KAAKI,IACjBnhB,EAAOkoC,UAAUmI,QAAQswB,GAAWrwB,SAASqwB,KAGxD,KAAKlkD,EAAAhJ,YAAYmB,OAEf,OADAvC,QAAQmuD,GACDngE,KAAKmhE,oBAA8Cn6D,EAAY1F,OAExE,KAAK8a,EAAAhJ,YAAYe,OAEf,OADAnC,QAAQmuD,GACDngE,KAAKohE,qBAA8Cp6D,EAAYquD,GAS1E,OALAr1D,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAEbnE,KAAK8qD,YAAcuK,EACZ11D,EAAOmtC,qBAGhB4d,EAAAzoD,UAAAk/D,oBAAA,SAAoBE,GAClB,IAAI1hE,EAASK,KAAKL,OACd8gB,EAAUzgB,KAAKygB,QACfuqC,EAAiBhrD,KAAKgrD,eAEtBsW,EAAsCtW,EAAe9pD,IAAImgE,GAC7D,IAAKC,EAAe,CAClB,IAAIC,EAAeF,EAAYz6D,OAC3B46D,EAAe,IAAIpuB,WAAW,EAAmB,EAAfmuB,GACtCC,EAAa,GAA6B,IAAvBD,EACnBC,EAAa,GAAMD,IAAkB,EAAK,IAC1CC,EAAa,GAAMD,IAAiB,GAAM,IAC1CC,EAAa,GAAMD,IAAiB,GAAM,IAC1C,IAAK,IAAIlhE,EAAI,EAAGA,EAAIkhE,IAAgBlhE,EAClCmhE,EAAa,EAAQ,EAAJnhE,GAA6C,IAAnCghE,EAAYpvD,WAAW5R,GAClDmhE,EAAa,EAAQ,EAAJnhE,GAAUghE,EAAYpvD,WAAW5R,KAAO,EAAK,IAEhEihE,EAAgBthE,KAAKsxD,iBAAiBkQ,EAAc/gD,EAAQW,UAAUuZ,UACtEqwB,EAAejnD,IAAIs9D,EAAaC,GAElC,IAAIG,EAAeH,EAAcv7B,OAC7B27B,EAAa1hE,KAAK2rB,QAAQvM,YAAYle,IAAI,UAE9C,OADAlB,KAAK8qD,YAAc4W,GAA0BjhD,EAAQW,UACjDX,EAAQkB,SACHhiB,EAAOkoC,UAAUmI,QAAQyxB,GAAexxB,SAASwxB,KAE1DzvD,OAAO4uD,WAAWa,IACX9hE,EAAO8nC,UAAUuI,QAAQyxB,MAGlC/W,EAAAzoD,UAAAm+D,oBAAA,SAAoBuB,EAAmB55D,EAAoC+lD,GACzE,IAAI8T,GAAW,EACXjiE,EAASK,KAAKL,OAGd6f,EAAiBxN,OAAOhS,KAAK2rB,QAAQnM,gBACzC,IAAKA,GAAkBA,EAAe5c,MAAQknD,EAAAlrC,YAAYgG,gBAAiB,OAAOjlB,EAAOmtC,oBACzF,IAAI+0B,EAAgB7hE,KAAK6f,SAASyF,aAA6B9F,GAAkBmiD,IACjF,IAAKE,EAAe,OAAOliE,EAAOmtC,oBAClC,IAAIg1B,EAAYD,EAAcz9D,KAE1B29D,EAAeh6D,EAAYnB,OAC/B,GAAIm7D,EAAc,CAChB,IAAIC,EAAoBL,EAAYjyC,eAChCjmB,OAAM,EACNw4D,OAAU,EACd,OAAQD,GACN,KAAK3lD,EAAAsT,WAAWC,IACdnmB,EAASq9B,WAAkB,IAAIo7B,WAAWH,IAC1CE,EAA4B,EAAfF,EACb,MAEF,KAAK1lD,EAAAsT,WAAWE,IACdpmB,EAASq9B,WAAkB,IAAIhxB,MAAWisD,IAC1CE,EAA4B,EAAfF,EACb,MAEF,KAAK1lD,EAAAsT,WAAWG,IACdrmB,EAASq9B,WAAkB,IAAIq7B,aAAaJ,IAC5CE,EAA4B,EAAfF,EACb,MAEF,KAAK1lD,EAAAsT,WAAWI,IACdtmB,EAASq9B,WAAkB,IAAIs7B,aAAaL,IAC5CE,EAA4B,EAAfF,EACb,MAEF,QAEE,OADA/vD,QAAO,GACArS,EAAOmtC,oBAOlB,IAFA,IAAI4yB,EAAQ,IAAI5pD,MAAqBisD,GACjC57D,OAAI,EACC9F,EAAI,EAAGA,EAAI0hE,IAAgB1hE,EAIlC,GAHAq/D,EAAMr/D,GAAK0H,EAAY1H,GACnBL,KAAKwvD,kBAA8BznD,EAAY1H,GAAIshE,EAAW,KAC9DA,EAAYrkB,aAAa39C,GACzBiiE,EAEF,GADAz7D,EAAOxG,EAAOoyC,qBAAqB2tB,EAAMr/D,IACrCgc,EAAA0Y,gBAAgB5uB,IAASkW,EAAA2Y,aAAa6C,MAExC,OADA7lB,OAAOqK,EAAA6c,kBAAkB/yB,IAAS67D,GAC1BA,GACN,KAAK3lD,EAAAsT,WAAWC,IACdkX,WAAkBr9B,GAAQpJ,GAAKgc,EAAAyb,iBAAiB3xB,GAChD,MAEF,KAAKkW,EAAAsT,WAAWE,IACdiX,WAAkBr9B,GAAQpJ,GAAKqhB,QAC7BrF,EAAA8c,oBAAoBhzB,GACpBkW,EAAA25B,qBAAqB7vC,IAEvB,MAEF,KAAKkW,EAAAsT,WAAWG,IACdgX,WAAkBr9B,GAAQpJ,GAAKgc,EAAA+c,iBAAiBjzB,GAChD,MAEF,KAAKkW,EAAAsT,WAAWI,IACd+W,WAAkBr9B,GAAQpJ,GAAKgc,EAAAgd,iBAAiBlzB,GAChD,MAEF,QAAS6L,QAAO,QAUlB4vD,GAAW,EAKjB,IAAIS,EAAgBriE,KAAKygB,QAAQW,UAAUuZ,SAC3C,GAAIinC,EAAU,CAKZ,IAAIU,EAAYD,EAAgB,EAE5BE,EAAkB,GAAM,GAAKC,IAAIP,EADd,EAC8C,GACjEQ,EAAO,IAAIrvB,WAAWkvB,EAAYC,GAClCv8B,EAAUhmC,KAAKsxD,iBAAiBmR,GAChC18B,EAAS,EAoBb,OAjBqB,GAAjBs8B,GACF3/D,EAAAggE,SAASna,QAAQviB,EAAQD,OAAQrkB,QAAQ4gD,IAAaG,EAAM18B,GAC5DA,GAAU,IAEV/zB,OAAmC,GAA5Bi+B,SAASjK,EAAQD,SACxBrjC,EAAAigE,SAAS3yB,QAAQhK,EAAQD,QAAUu8B,EAAWG,EAAM18B,GACpDA,GAAU,GAEZrjC,EAAAigE,SAASZ,EAAcU,EAAM18B,GAC7BA,GAAU,EACV/zB,OAAO+zB,GAAUu8B,GAGjB5/D,EAAAigE,SAASV,EAAYQ,EAAM18B,GAC3BA,GArBuB,EAwBfi8B,GACN,KAAK3lD,EAAAsT,WAAWC,IACd,IAASvvB,EAAI,EAAGA,EAAI0hE,IAAgB1hE,EAClCqC,EAAAigE,SAAS77B,WAAkBr9B,GAAQpJ,GAAIoiE,EAAM18B,GAASA,GAAU,EAElE,MAEF,KAAK1pB,EAAAsT,WAAWE,IACd,IAASxvB,EAAI,EAAGA,EAAI0hE,IAAgB1hE,EAClCqC,EAAAggE,SAAS57B,WAAkBr9B,GAAQpJ,GAAIoiE,EAAM18B,GAASA,GAAU,EAElE,MAEF,KAAK1pB,EAAAsT,WAAWG,IACd,IAASzvB,EAAI,EAAGA,EAAI0hE,IAAgB1hE,EAClCqC,EAAAkgE,SAAS97B,WAAkBr9B,GAAQpJ,GAAIoiE,EAAM18B,GAASA,GAAU,EAElE,MAEF,KAAK1pB,EAAAsT,WAAWI,IACd,IAAS1vB,EAAI,EAAGA,EAAI0hE,IAAgB1hE,EAClCqC,EAAAmgE,SAAS/7B,WAAkBr9B,GAAQpJ,GAAIoiE,EAAM18B,GAASA,GAAU,EAElE,MAEF,QAEE,OADA/zB,QAAO,GACArS,EAAOmtC,oBAMlB,OAHA96B,OAAO+zB,GAAUu8B,EAAYC,GAE7BviE,KAAK8qD,YAAcgX,EACK,GAAjBO,EACH1iE,EAAOkoC,UACLmI,QAAQhK,EAAQD,QAChBkK,SAASjK,EAAQD,SAEnBpmC,EAAO8nC,UACLuI,QAAQhK,EAAQD,SAKtB/lC,KAAK8qD,YAAcgX,EACnB,IAAI5U,EAAS2U,EAAc9vC,eAAe+3B,EAAA7tC,aAAaa,aAAa,GACpE,IAAKowC,EAKH,OAJAltD,KAAKgc,MACHE,EAAAnC,eAAemhD,+CACfpN,EAAW3pD,MAAO09D,EAAcr/C,cAE3B7iB,EAAOmtC,oBAEhB,IAAIg2B,EAAkBhB,EAAUpyC,eAC5B6C,EAAkBvyB,KAAKuyB,gBACvByhC,EAAYzhC,EAAgBhD,aAAauyC,GAAW,GACpDrR,EAAQ,IAAI36C,MAAqB,EAAIisD,GACrCh1C,EAAQ,EACZ0jC,EAAM1jC,KAAWptB,EAAOirC,eAAeopB,EAAUjnC,MAC/C/sB,KAAKo5D,eAAepnD,OAAO6vD,EAActwC,sBACvC5xB,EAAO8nC,UAAU,GACjB9nC,EAAO8nC,UAAUs6B,MAGrB,IAAS1hE,EAAI,EAAGA,EAAI0hE,IAAgB1hE,EAClCowD,EAAM1jC,KAAW/sB,KAAKo5D,eAAelM,GACnCvtD,EAAOmpC,eAAekrB,EAAUjnC,MAAO+1C,GACvCnjE,EAAO8nC,UAAUpnC,GACjBq/D,EAAMr/D,KAOV,OAJA2R,OAAO+a,EAAQ,GAAK0jC,EAAM7pD,QAC1B6pD,EAAM1jC,GAASptB,EAAOmpC,eAAekrB,EAAUjnC,MAAO+1C,GACtDvwC,EAAgBrC,cAAc8jC,GAC9Bh0D,KAAK8qD,YAAcgX,EACZniE,EAAOqrC,YAAY,KAAMylB,EAAOqS,GAKzC,OADA9iE,KAAK8qD,YAAcgX,EACZ9hE,KAAKo5D,eAAepnD,OAAO6vD,EAActwC,sBAC9C5xB,EAAO8nC,UAAU,GACjB9nC,EAAO8nC,UAAU,MAKvBijB,EAAAzoD,UAAAm/D,qBAAA,SAAqBp6D,EAAqCquD,GACxD,IAAI11D,EAASK,KAAKL,OAGdy8C,EAAiBiZ,EAAejZ,eACpC,IAAKA,GAAkBA,EAAex4C,GAAGvB,EAAAqB,YAAY4kB,UAKnD,OAJAtoB,KAAKgc,MACHE,EAAAnC,eAAeo1C,mCACfnoD,EAAW7C,MAAO,WAAYkxD,EAAex6C,YAExClb,EAAOmtC,oBAIhB,IAAI8gB,EAAOxR,EAAe7qB,oBAC1B,GAAIq8B,EAAM,CACR,GAAIA,EAAKz+C,UAAU6uC,mBAKjB,OAJAh+C,KAAKgc,MACHE,EAAAnC,eAAegpD,sDACf/7D,EAAW7C,MAAOi4C,EAAevhC,YAE5Blb,EAAOmtC,oBAEhB,GAAI8gB,EAAKhqD,GAAGvB,EAAAqB,YAAY88C,SAKtB,OAJAxgD,KAAKgc,MACHE,EAAAnC,eAAeipD,mFACfh8D,EAAW7C,MAAOi4C,EAAevhC,YAE5Blb,EAAOmtC,oBAEhB,GAAI8gB,EAAKhqD,GAAGvB,EAAAqB,YAAY+8C,WAKtB,OAJAzgD,KAAKgc,MACHE,EAAAnC,eAAekpD,qFACfj8D,EAAW7C,MAAOi4C,EAAevhC,YAE5Blb,EAAOmtC,oBAKlB,IAAItjC,EAAQxC,EAAWwC,MACnB4iC,EAAW5iC,EAAM5C,OACjB6C,EAASzC,EAAWyC,OACpBsC,EAAUqwC,EAAerwC,QACzBm3D,GAAY,EACZxD,EAAQ,IAAI5pD,MAAqBs2B,EAAW,GAC5C4nB,EAAYh0D,KAAKuyB,gBAAgBhD,aAAavvB,KAAKygB,QAAQW,WAC/DpP,OAAOo6B,GAAY3iC,EAAO7C,QAC1B,IAAK,IAAIvG,EAAI,EAAGsG,EAAIylC,EAAU/rC,EAAIsG,IAAKtG,EAAG,CACxC,IAAIuW,EAAS7K,EAAUA,EAAQ7K,IAAIsI,EAAMnJ,GAAG0F,MAAQ,KACpD,GAAK6Q,GAAUA,EAAOhU,MAAQknD,EAAAlrC,YAAYsS,MAA1C,CAQA,IAAI9sB,EAAewS,EAAQxS,KAC3Bs7D,EAAMr/D,EAAI,GAAKL,KAAKL,OAAO8pC,YACzBrlC,EAAKu2B,SACL36B,KAAKL,OAAOmpC,eAAekrB,EAAUjnC,MAAO/sB,KAAKygB,QAAQ2sC,gBACzDptD,KAAKwvD,kBAAkB/lD,EAAOpJ,GAAYuW,EAAQxS,KAAI,KACtDA,EAAKsrB,eACG9Y,EAAQua,mBAbhBnxB,KAAKgc,MACHE,EAAAnC,eAAeopD,oCACf35D,EAAMnJ,GAAG8D,MAAOqF,EAAMnJ,GAAG0F,KAAMq2C,EAAevhC,YAEhDqoD,GAAY,EAahB,OADAljE,KAAK8qD,YAAc1O,EAAeh4C,KAAKk4C,gBACnC4mB,EAAkBvjE,EAAOmtC,qBAG7B4yB,EAAM,GAAK//D,EAAOirC,eAChBopB,EAAUjnC,MACV88B,EAAAuZ,gBAAgBpjE,KAAMo8C,EAAgBp1C,IAIxC04D,EAAMA,EAAM94D,OAAS,GAAKjH,EAAOmpC,eAAekrB,EAAUjnC,MAAO/sB,KAAKygB,QAAQ2sC,gBAEvEztD,EAAOqrC,YAAY,KAAM00B,EAAO1/D,KAAKygB,QAAQ2sC,kBAGtD1C,EAAAzoD,UAAAk0D,qBAAA,SAAqBnvD,EAA2BquD,GAC9C,IAAI11D,EAASK,KAAKL,OACd8gB,EAAUzgB,KAAKygB,QACf8R,EAAkBvyB,KAAKuyB,gBAGvBV,EAAS7xB,KAAK6f,SAASg7C,kBACzB7zD,EAAWA,WACXurB,GAEF,IAAKV,EAAQ,OAAOlyB,EAAOmtC,oBAC3B,GAAIjb,EAAOjvB,MAAQknD,EAAAlrC,YAAYgG,gBAK7B,OAJA5kB,KAAKgc,MACHE,EAAAnC,eAAespD,yEACfr8D,EAAWA,WAAW7C,OAEjBnE,KAAKL,OAAOmtC,oBAErB,IAGIsP,EAqBAj2C,EAxBA8hB,EAAiC4J,EACjCyxC,EAA8B,KAC9Br/D,EAAgB+C,EAAW/C,cAoB/B,KAbEq/D,GAJCr/D,GACoD,QAApDm4C,EAAiBiZ,EAAejZ,iBACjCA,EAAex4C,GAAGvB,EAAAqB,YAAYiiB,SAEd3lB,KAAK6f,SAASyF,aAC5B2C,EACAm0B,EAAen4C,cACfsuB,EAAgBnD,KAAK/B,yBAGPrtB,KAAK6f,SAASqxC,8BAC5BjpC,EACAhkB,EACAsuB,EAAgBnD,KAAK/B,wBACrBrmB,IAGgB,OAAOrH,EAAOmtC,oBAKlC,IAAIy2B,EAAqCD,EACrC/xC,EAAuC,KAC3C,GAEE,GADAA,EAAsBgyC,EAAqBhyC,oBAClB,YAClBgyC,EAAuBA,EAAqBlyC,MAcrD,OAVElrB,EADEorB,EACKvxB,KAAK26D,kBAAkBppC,EAAqBvqB,EAAWrB,UAAWqB,EACvEyZ,EAAQW,UAAUk8B,aAAa39C,IAK1BK,KAAKwjE,aAAaF,EAAet8D,GAG1ChH,KAAK8qD,YAAcwY,EAAcl/D,KAC1B+B,GAGTukD,EAAAzoD,UAAAm0D,+BAAA,SACEpvD,EACAquD,GAGA,OAAOr1D,KAAKwvD,kBACVxoD,EAAWA,WACXquD,EAAc,MAWlB3K,EAAAzoD,UAAAo0D,gCAAA,SACEoN,EACApO,EACAuK,GAEA,IAAIjgE,EAASK,KAAKL,OAEdkyB,EAAS7xB,KAAK6f,SAAS6jD,sBAAsBD,EAAgBzjE,KAAKuyB,iBACtE,IAAKV,EAAQ,OAAOlyB,EAAOmtC,oBAE3B,OAAQjb,EAAOjvB,MACb,KAAKknD,EAAAlrC,YAAYtM,OACf,IAAKtS,KAAK2uD,cAAsB98B,GAC9B,OAAOlyB,EAAOmtC,oBAEhB,IAAIqC,EAAsBtd,EAAQztB,KAElC,OADA4N,OAAOm9B,GAAchzB,EAAAuE,KAAKc,MACbqQ,EAAQjuB,GAAGvB,EAAAqB,YAAYipB,SAC3B3sB,KAAKo1D,sBAA8BvjC,EAAQwjC,EAAgBuK,IAEpE5/D,KAAK8qD,YAAc3b,EACZxvC,EAAOupC,gBAAyBrX,EAAQrP,aAAc2sB,EAAWzf,iBAE1E,KAAKo6B,EAAAlrC,YAAYyN,UACf,IAAI7oB,EAAqBquB,EAAQruB,OAEjC,OADAwO,OAAkB,OAAXxO,GAAmBA,EAAOZ,MAAQknD,EAAAlrC,YAAYwN,MAChDpsB,KAAK0vD,YAAkBlsD,IAI5BxD,KAAK8qD,YAAc3uC,EAAAuE,KAAKG,IACRgR,EAAQjuB,GAAGvB,EAAAqB,YAAYipB,SAC9BhtB,EAAO8nC,UAAsB5V,EAAQvF,eAEvC3sB,EAAOupC,gBAA4BrX,EAAQrP,aAAcnG,EAAAsT,WAAWC,OAPzE5vB,KAAK8qD,YAAc3uC,EAAAuE,KAAKG,IACjB7gB,KAAKL,OAAOmtC,qBAQvB,KAAKgd,EAAAlrC,YAAYsS,MACf,IAAIoqC,EAAiBtpD,OAAOhS,KAAK6f,SAAS07C,uBAC1CvpD,OAAe6f,EAAQV,cAAgB,GACvC,IAAIqqC,EAAWx7D,KAAKkvD,4BAClBoM,EACAt7D,KAAKygB,QAAQW,UAAS,GAIxB,OADAphB,KAAK8qD,YAAsBj5B,EAAQztB,KAC5BzE,EAAOypC,WACJvX,EAAQztB,KAAKu2B,SACb9I,EAAQztB,KAAKR,GAAG,GACxB43D,EACQ3pC,EAAQztB,KAAKsrB,eACbmC,EAAQV,cAGpB,KAAK24B,EAAAlrC,YAAY+K,SACf,IAAI1nB,EAAuB4vB,EAAQjI,gBACnC,GAAI3nB,EAAW,CACb,IAAIojB,EAAWrlB,KAAK6f,SAASiG,gBAAgB7jB,EAAW,MACxD,IAAKojB,EAAU,OAAO1lB,EAAOmtC,oBAC7B,IAAI39B,EAAYkW,EAASlW,UACzB,IAAKnP,KAAKk9D,mBACR/tD,EACA,EACAkW,EAASzhB,GAAGvB,EAAAqB,YAAY6qB,UACxBk1C,GAEA,OAAO9jE,EAAOmtC,oBAEhB,IAAIwwB,EAA8D,IAApDj4C,EAASqD,eAAiBohC,EAAAjrC,eAAetM,QACvD,GAAI8S,EAASzhB,GAAGvB,EAAAqB,YAAY6qB,UAAW,CACjC/qB,EAASwO,OAAOqT,EAAS7hB,QAC7BwO,OAAOxO,EAAOZ,MAAQknD,EAAAlrC,YAAYjL,OAC9B2nD,EAAiBtpD,OAAOhS,KAAK6f,SAAS07C,uBACtCC,EAAWx7D,KAAKkvD,4BAClBoM,EACAt7D,KAAKygB,QAAQW,UAAS,GAIxB,OADAphB,KAAK8qD,YAAc37C,EAAUhK,WACtBnF,KAAK26D,kBAAkBt1C,KAAco+C,EAAgBjI,EAAU8B,GAGtE,OADAt9D,KAAK8qD,YAAc37C,EAAUhK,WACtBnF,KAAK26D,kBAAkBt1C,KAAco+C,EAAgB,EAAGnG,GAOjE,OAJAt9D,KAAKgc,MACHE,EAAAnC,eAAeopD,oCACfM,EAAet/D,MAAkB0tB,EAAQ5K,WAAuB4K,EAAQruB,OAAOqX,YAE1Elb,EAAOmtC,oBAQpB,OAJA9sC,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfo8C,EAAet/D,OAEVxE,EAAOmtC,qBAGhB4d,EAAAzoD,UAAAq0D,yBAAA,SAAyBtvD,EAA+BquD,GACtD,IAAIhrD,EAASrD,EAAWqD,OACpBC,EAAStD,EAAWsD,OACpBioB,EAAkBvyB,KAAKuyB,gBACvBC,EAAaD,EAAgBnD,KAE7ByjC,EAAW7yD,KAAK8yD,cAClB9yD,KAAKkvD,4BAA4BloD,EAAWoD,UAAW+R,EAAAuE,KAAKW,KAAI,GAChErhB,KAAK8qD,aAGP,IACG9qD,KAAKygB,QAAQmB,eACd5hB,KAAKuyB,gBAAgBzuB,MAAMzB,EAAAqB,YAAYiiB,QAAUtjB,EAAAqB,YAAY8vD,iBAC7D,CAEA,IAAIC,EAAkBzzD,KAAKL,OAAOoyC,qBAAqB8gB,GACvD,GACEx2C,EAAA0Y,gBAAgB0+B,IAAoBp3C,EAAA2Y,aAAa6C,OACjDxb,EAAA6c,kBAAkBu6B,IAAoBp3C,EAAAsT,WAAWC,IAEjD,OAAOvT,EAAAyb,iBAAiB27B,GACpBzzD,KAAKkvD,4BAA4B7kD,EAAQgrD,EAAc,GACvDr1D,KAAKkvD,4BAA4B5kD,EAAQ+qD,EAAc,GAI3DxC,EAAW7yD,KAAK8yD,cACd9yD,KAAKkvD,4BAA4BloD,EAAWoD,UAAW+R,EAAAuE,KAAKW,KAAI,GAChErhB,KAAK8qD,aAKX,IAAI6Y,EAAanxC,EAAWO,OAC5BR,EAAgBnD,KAAOu0C,EACvB,IAAIC,EAAa5jE,KAAKkvD,4BAA4B7kD,EAAQgrD,EAAc,GACpEwO,EAAa7jE,KAAK8qD,YACtB6Y,EAAWzwC,OAEX,IAAI4wC,EAAatxC,EAAWO,OAC5BR,EAAgBnD,KAAO00C,EACvB,IAAIC,EAAa/jE,KAAKkvD,4BAA4B5kD,EAAQ+qD,EAAc,GACpE2O,EAAahkE,KAAK8qD,YACtBv4B,EAAgBnD,KAAO00C,EAAW5wC,OAElCV,EAAWgC,cAAcmvC,EAAYG,GAErC,IAAIzL,EAAal8C,EAAAuE,KAAKy8B,iBAAiB0mB,EAAYG,GAAY,GAC/D,OAAK3L,GAQLuL,EAAa5jE,KAAKy2D,kBAChBmN,EACAC,EACAxL,EAAU,IAGVhuD,GAEF05D,EAAa/jE,KAAKy2D,kBAChBsN,EACAC,EACA3L,EAAU,IAGV/tD,GAEFtK,KAAK8qD,YAAcuN,EACZr4D,KAAKL,OAAO+rC,SAASmnB,EAAU+Q,EAAYG,KAxBhD/jE,KAAKgc,MACHE,EAAAnC,eAAeo1C,mCACfnoD,EAAW7C,MAAO0/D,EAAWhpD,WAAYmpD,EAAWnpD,YAEtD7a,KAAK8qD,YAAcuK,EACZr1D,KAAKL,OAAOmtC,sBAsBvB4d,EAAAzoD,UAAAs0D,8BAAA,SAA8BvvD,EAAoCquD,GAChE,IAAI11D,EAASK,KAAKL,OACd4yB,EAAkBvyB,KAAKuyB,gBAGvB0xC,EAAWjkE,KAAKwvD,kBAClBxoD,EAAWiE,QACXoqD,GAAkBl5C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLw0C,EAAc,KAKpB,GAAIh5C,EAAA0Y,gBAAgBkvC,IAAa5nD,EAAA2Y,aAAayF,YAAa,OAAOwpC,EAClE,IAEI37B,EACA6kB,EACA+W,EAJApZ,EAAc9qD,KAAK8qD,YAMvB,OAAQ9jD,EAAWI,UACjB,KAAK9E,EAAAC,MAAMw/C,UAGT,GAAI/hD,KAAK8qD,YAAYlnD,GAAE,KAKrB,OAJA5D,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAGrB,OAAQge,EAAYloD,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACE0lC,EAAKjsB,EAAAqZ,SAASu6B,OACd9C,EAAa9wC,EAAAsT,WAAWC,IACxBs0C,EAAYvkE,EAAO8nC,UAAU,GAC7B,MAEF,OACA,OAEEa,GADI7nB,EAAUzgB,KAAKygB,SACNkB,SACTtF,EAAAqZ,SAASgjC,OACTr8C,EAAAqZ,SAASu6B,OACb9C,EAAa1sC,EAAQ2sC,eACrB8W,EAAYpZ,EAAYvN,YAAY59C,GACpC,MAEF,OACA,OACE2oC,EAAKjsB,EAAAqZ,SAASgjC,OACdvL,EAAa9wC,EAAAsT,WAAWE,IACxBq0C,EAAYvkE,EAAOkoC,UAAU,GAC7B,MAEF,QACES,EAAKjsB,EAAAqZ,SAASijC,OACdxL,EAAa9wC,EAAAsT,WAAWG,IACxBo0C,EAAYvkE,EAAOsoC,UAAU,GAC7B,MAEF,QACEK,EAAKjsB,EAAAqZ,SAASkjC,OACdzL,EAAa9wC,EAAAsT,WAAWI,IACxBm0C,EAAYvkE,EAAOwoC,UAAU,GAC7B,MAEF,QAEE,OADAn2B,QAAO,GACArS,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAMy/C,YAGT,GAAIhiD,KAAK8qD,YAAYlnD,GAAE,KAKrB,OAJA5D,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENnE,KAAKL,OAAOmtC,oBAGrB,OAAQge,EAAYloD,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACE0lC,EAAKjsB,EAAAqZ,SAASmjC,OACd1L,EAAa9wC,EAAAsT,WAAWC,IACxBs0C,EAAYvkE,EAAO8nC,UAAU,GAC7B,MAEF,OACA,OACE,IAAIhnB,EACJ6nB,GADI7nB,EAAUzgB,KAAKygB,SACNkB,SACTtF,EAAAqZ,SAASojC,OACTz8C,EAAAqZ,SAASmjC,OACb1L,EAAa1sC,EAAQ2sC,eACrB8W,EAAYpZ,EAAYvN,YAAY59C,GACpC,MAEF,OACA,OACE2oC,EAAKjsB,EAAAqZ,SAASojC,OACd3L,EAAa9wC,EAAAsT,WAAWE,IACxBq0C,EAAYvkE,EAAOkoC,UAAU,GAC7B,MAEF,QACES,EAAKjsB,EAAAqZ,SAASqjC,OACd5L,EAAa9wC,EAAAsT,WAAWG,IACxBo0C,EAAYvkE,EAAOsoC,UAAU,GAC7B,MAEF,QACEK,EAAKjsB,EAAAqZ,SAASsjC,OACd7L,EAAa9wC,EAAAsT,WAAWI,IACxBm0C,EAAYvkE,EAAOwoC,UAAU,GAC7B,MAEF,QAEE,OADAn2B,QAAO,GACArS,EAAOmtC,oBAGlB,MAEF,QAEE,OADA96B,QAAO,GACArS,EAAOmtC,oBAKlB,GAAIuoB,GAAkBl5C,EAAAuE,KAAKc,KACzB,OAAOxhB,KAAKm1D,2BAA2BnuD,EAAWiE,QAChDtL,EAAO6oC,aAAaF,EAClB27B,EACAC,IAEF,GAKJ,IAAIlQ,EAAYzhC,EAAgBhD,aAAau7B,GAAa,GACtDqZ,EAAWnkE,KAAKm1D,2BAA2BnuD,EAAWiE,QACxDtL,EAAO6oC,aAAaF,EAClBtoC,KAAKL,OAAOmpC,eAAekrB,EAAUjnC,MAAOogC,GAC5C+W,IAEF,GAEFlkE,KAAK8qD,YAAc94C,OAAOgiD,GAAW5vD,KACrCmuB,EAAgBrC,cAAqB8jC,GAErC,IAAI1lC,EAAqB0lC,EAAWjnC,MACpC,OAAOptB,EAAOqrC,YAAY,MACxBrrC,EAAOirC,eAAetc,EAAY21C,GAClCE,EACAxkE,EAAOmpC,eAAexa,EAAY6+B,IACjCA,IAGLzC,EAAAzoD,UAAAu0D,6BAAA,SACExvD,EACAquD,GAEA,IAEIlvD,EAFAxG,EAASK,KAAKL,OACd24D,GAAW,EAGf,OAAQtxD,EAAWI,UACjB,KAAK9E,EAAAC,MAAM4b,KAWT,GAVAhY,EAAOnG,KAAKwvD,kBACVxoD,EAAWiE,QACXoqD,GAAkBl5C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLw0C,EAAc,KAMhBr1D,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiBp8C,KAAK8qD,YAAY1O,eAGpC,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAakC,MAC5C,CACZhY,EAAOnG,KAAKs6D,qBAAqBpoC,EAAUlrB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENxE,EAAOmtC,oBAIhB,MAEF,KAAKxqC,EAAAC,MAAM8b,MACT,GAAIrX,EAAWiE,QAAQrI,MAAQwZ,EAAA3Z,SAASI,UAClBmE,EAAWiE,QAASqI,aAAe8I,EAAAhJ,YAAYa,SAC/CjN,EAAWiE,QAASqI,aAAe8I,EAAAhJ,YAAYU,OAClE,CAED3N,EAAOnG,KAAKk2D,yBAA4ClvD,EAAWiE,QAASoqD,GAAgB,GAExFr1D,KAAKygB,QAAQ+P,WAAWxwB,KAAKwyD,iBAAiBrsD,EAAMa,EAAW7C,OACnE,MAaF,GAVAgC,EAAOnG,KAAKwvD,kBACVxoD,EAAWiE,QACXoqD,GAAkBl5C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLw0C,EAAc,KAMhBr1D,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiBp8C,KAAK8qD,YAAY1O,eAGpC,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAaoC,OAC5C,CACZlY,EAAOnG,KAAKs6D,qBAAqBpoC,EAAUlrB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENxE,EAAOmtC,oBAGhB,OAAQ9sC,KAAK8qD,YAAYloD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASmjC,OAAQl5D,EAAO8nC,UAAU,GAAIthC,GACjE,MAEF,OACA,OACEA,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASojC,OACTz8C,EAAAqZ,SAASmjC,OACb74D,KAAK8qD,YAAYxN,aAAa39C,GAC9BwG,GAEF,MAEF,OACA,OACEA,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASojC,OAAQn5D,EAAOkoC,UAAU,GAAI1hC,GACjE,MAEF,QACEA,EAAOxG,EAAO0oC,YAAYhsB,EAAAuc,QAAQwrC,OAAQj+D,GAC1C,MAEF,QACEA,EAAOxG,EAAO0oC,YAAYhsB,EAAAuc,QAAQyrC,OAAQl+D,GAC1C,MAEF,QACE6L,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAMw/C,UAYT,GAXAuW,GAAW,EACXnyD,EAAOnG,KAAKwvD,kBACVxoD,EAAWiE,QACXoqD,GAAkBl5C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLw0C,EAAc,KAMhBr1D,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiBp8C,KAAK8qD,YAAY1O,eAGpC,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAamC,YAC5C,CACZjY,EAAOnG,KAAKs6D,qBAAqBpoC,EAAUlrB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENxE,EAAOmtC,oBAGhB,OAAQ9sC,KAAK8qD,YAAYloD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASu6B,OAAQ9pD,EAAMnG,KAAKL,OAAO8nC,UAAU,IACxE,MAEF,OACA,OACEthC,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASgjC,OACTr8C,EAAAqZ,SAASu6B,OACb9pD,EACAnG,KAAK8qD,YAAYvN,YAAY59C,IAE/B,MAEF,OACA,OACEwG,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASgjC,OAAQvyD,EAAMxG,EAAOkoC,UAAU,IACnE,MAEF,QACE1hC,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASijC,OAAQxyD,EAAMxG,EAAOsoC,UAAU,IACnE,MAEF,QACE9hC,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASkjC,OAAQzyD,EAAMxG,EAAOwoC,UAAU,IACnE,MAEF,QACEn2B,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAMy/C,YAYT,GAXAsW,GAAW,EACXnyD,EAAOnG,KAAKwvD,kBACVxoD,EAAWiE,QACXoqD,GAAkBl5C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLw0C,EAAc,KAMhBr1D,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAE5C,GADIw4C,EAAiBp8C,KAAK8qD,YAAY1O,eAGpC,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAaqC,YAC5C,CACZnY,EAAOnG,KAAKs6D,qBAAqBpoC,EAAUlrB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENxE,EAAOmtC,oBAGhB,OAAQ9sC,KAAK8qD,YAAYloD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASmjC,OAAQ1yD,EAAMxG,EAAO8nC,UAAU,IACnE,MAEF,OACA,OACEthC,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAASojC,OACTz8C,EAAAqZ,SAASmjC,OACb1yD,EACAnG,KAAK8qD,YAAYvN,YAAY59C,IAE/B,MAEF,OACA,OACEwG,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASojC,OAAQ3yD,EAAMxG,EAAOkoC,UAAU,IACnE,MAEF,QACE1hC,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASqjC,OAAQ5yD,EAAMxG,EAAOsoC,UAAU,IACnE,MAEF,QACE9hC,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASsjC,OAAQ7yD,EAAMxG,EAAOwoC,UAAU,IACnE,MAEF,QACEn2B,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAMggD,YAWT,GAVAp8C,EAAOnG,KAAKwvD,kBACVxoD,EAAWiE,QACXoqD,GAAkBl5C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLw0C,EAAc,KAMhBr1D,KAAK8qD,YAAYlnD,GAAE,KAErB,GADIw4C,EAAiBp8C,KAAK8qD,YAAY1O,eAGpC,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAasC,KAC5C,CACZpY,EAAOnG,KAAKs6D,qBAAqBpoC,EAAUlrB,EAAWiE,QAAS9E,EAAMa,GACrE,MAMNb,EAAOnG,KAAKskE,eAAen+D,EAAMnG,KAAK8qD,aACtC9qD,KAAK8qD,YAAc3uC,EAAAuE,KAAKW,KACxB,MAEF,KAAK/e,EAAAC,MAAMigD,MAaT,GAZAr8C,EAAOnG,KAAKwvD,kBACVxoD,EAAWiE,QACXoqD,GAAkBl5C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLw0C,EAAezxD,GAAE,GACfuY,EAAAuE,KAAKI,IACLu0C,EAAc,KAMlBr1D,KAAK8qD,YAAYlnD,GAAE,KAAuB,CAC5C,IAAIw4C,EAEElqB,EADN,GADIkqB,EAAiBp8C,KAAK8qD,YAAY1O,eAGpC,GADIlqB,EAAWkqB,EAAerqB,eAAe+3B,EAAA7tC,aAAauC,aAC5C,CACZrY,EAAOnG,KAAKs6D,qBAAqBpoC,EAAUlrB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAhH,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENxE,EAAOmtC,oBAUhB,OARE3mC,EAAOnG,KAAKy2D,kBACVtwD,EACAnG,KAAK8qD,YAAa9qD,KAAK8qD,YAAY8O,QAAO,IAE1C5yD,EAAWiE,SAIPjL,KAAK8qD,YAAYloD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEuD,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS0kC,OAAQj0D,EAAMxG,EAAO8nC,WAAW,IACpE,MAEF,OACA,OACEthC,EAAOxG,EAAO6oC,aACZxoC,KAAKygB,QAAQkB,SACTtF,EAAAqZ,SAAS2kC,OACTh+C,EAAAqZ,SAAS0kC,OACbj0D,EACAnG,KAAK8qD,YAAYtN,eAAe79C,IAElC,MAEF,OACA,OACEwG,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAAS2kC,OAAQl0D,EAAMxG,EAAOkoC,WAAW,GAAI,IACxE,MAEF,QACE71B,QAAO,GACP7L,EAAOxG,EAAOmtC,oBAGlB,MAEF,KAAKxqC,EAAAC,MAAMo+C,OAKT,OAJA3gD,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAENxE,EAAOmtC,oBAEhB,QAEE,OADA96B,QAAO,GACArS,EAAOmtC,oBAGlB,OAAOwrB,EACHt4D,KAAKm1D,2BAA2BnuD,EAAWiE,QAAS9E,EAAMkvD,GAAkBl5C,EAAAuE,KAAKc,MACjFrb,GAINukD,EAAAzoD,UAAAy0D,uBAAA,SAAuBvwD,EAAqB/B,GAC1C,IAAIzE,EAASK,KAAKL,OACdyvB,EAAOpvB,KAAKuyB,gBAAgBnD,KAChC,OAAQhrB,EAAKxB,MACX,OACMwsB,EAAK0F,YAAY3uB,EAAM/B,KACzB+B,EAAOnG,KAAKygB,QAAQwB,WAAU,GAC1BtiB,EAAO0oC,YAAYhsB,EAAAuc,QAAQ2rC,cAAep+D,GAC1CxG,EAAO6oC,aAAansB,EAAAqZ,SAAS2C,OAC3B14B,EAAO6oC,aAAansB,EAAAqZ,SAASwC,OAC3B/xB,EACAxG,EAAO8nC,UAAU,KAEnB9nC,EAAO8nC,UAAU,MAGzB,MAEF,OACMrY,EAAK0F,YAAY3uB,EAAM/B,KACzB+B,EAAOnG,KAAKygB,QAAQwB,WAAU,GAC1BtiB,EAAO0oC,YAAYhsB,EAAAuc,QAAQ4rC,eAAgBr+D,GAC3CxG,EAAO6oC,aAAansB,EAAAqZ,SAAS2C,OAC3B14B,EAAO6oC,aAAansB,EAAAqZ,SAASwC,OAC3B/xB,EACAxG,EAAO8nC,UAAU,KAEnB9nC,EAAO8nC,UAAU,MAGzB,MAEF,OACMrY,EAAK0F,YAAY3uB,EAAM/B,KACzB+B,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASsC,OAClC7xB,EACAxG,EAAO8nC,UAAU,OAGrB,MAEF,OACMrY,EAAK0F,YAAY3uB,EAAM/B,KACzB+B,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASsC,OAClC7xB,EACAxG,EAAO8nC,UAAU,SAGrB,MAEF,QACMrY,EAAK0F,YAAY3uB,EAAM/B,KACzB+B,EAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASsC,OAClC7xB,EACAxG,EAAO8nC,UAAU,KAMzB,OAAOthC,GAITukD,EAAAzoD,UAAAqiE,eAAA,SAAen+D,EAAqB/B,GAClC,IAAIzE,EAASK,KAAKL,OAClB,OAAQyE,EAAKxB,MACX,OACA,OACA,OACA,OACA,QACEuD,EAAOnG,KAAK02D,uBAAuBvwD,EAAM/B,GAG3C,OACA,OACE,OAAOzE,EAAO0oC,YAAYhsB,EAAAuc,QAAQC,OAAQ1yB,GAE5C,OACA,OACE,OAAOxG,EAAO0oC,YAAYhsB,EAAAuc,QAAQE,OAAQ3yB,GAE5C,OACA,OACE,OAAOxG,EAAO0oC,YAAyB,IAAbjkC,EAAKg0B,KAAa/b,EAAAuc,QAAQE,OAASzc,EAAAuc,QAAQC,OAAQ1yB,GAE/E,QACE,OAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASG,MAAO1vB,EAAMxG,EAAOsoC,UAAU,IAEpE,QACE,OAAOtoC,EAAO6oC,aAAansB,EAAAqZ,SAASI,MAAO3vB,EAAMxG,EAAOwoC,UAAU,IAEpE,QAEE,OADAn2B,QAAO,GACArS,EAAO8nC,UAAU,KAM9BijB,EAAAzoD,UAAA6wD,cAAA,SAAc3sD,EAAqB/B,GACjC,IAAIzE,EAASK,KAAKL,OAClB,OAAQyE,EAAKxB,MACX,OACA,OACA,OACA,OACA,QACEuD,EAAOnG,KAAK02D,uBAAuBvwD,EAAM/B,GAG3C,OACA,OACE,OAAO+B,EAET,OACA,OACE,OAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASM,MAAO7vB,EAAMxG,EAAOkoC,UAAU,IAEpE,OACA,OACE,OAAoB,IAAbzjC,EAAKg0B,KACRz4B,EAAO6oC,aAAansB,EAAAqZ,SAASM,MAAO7vB,EAAMxG,EAAOkoC,UAAU,IAC3D1hC,EAEN,QACE,OAAOxG,EAAO6oC,aAAansB,EAAAqZ,SAASO,MAAO9vB,EAAMxG,EAAOsoC,UAAU,IAEpE,QACE,OAAOtoC,EAAO6oC,aAAansB,EAAAqZ,SAASQ,MAAO/vB,EAAMxG,EAAOwoC,UAAU,IAEpE,QAEE,OADAn2B,QAAO,GACArS,EAAO8nC,UAAU,KAM9BijB,EAAAzoD,UAAAuhE,aAAA,SAAaF,EAAsBxV,WAC7BnuD,EAASK,KAAKL,OACd4yB,EAAkBvyB,KAAKuyB,gBACvB66B,EAAiBptD,KAAKygB,QAAQ2sC,eAG9B4G,EAAYzhC,EAAgBhD,aAAa+zC,EAAcl/D,MAAM,GAC7D4wD,EAAe,IAAIl/C,MAQvB,GAPAk/C,EAAaz5C,KACX5b,EAAOirC,eAAeopB,EAAUjnC,MAC9B88B,EAAAuZ,gBAAgBpjE,KAAMsjE,EAAexV,KAKrCwV,EAAcv3D,YAChB,IAAmB,IAAA8iB,EAAAlL,EAAA2/C,EAAcv3D,QAAQtC,UAAQsa,EAAA8K,EAAAhL,QAAAE,EAAAD,KAAAC,EAAA8K,EAAAhL,OAAE,CAA9C,IAAIjN,EAAMmN,EAAAziB,MACb,GAAIsV,EAAOhU,MAAQknD,EAAAlrC,YAAYsS,MAAO,CACpC,IAAIuzC,EAAe7tD,EACf8tD,EAAYD,EAAMrgE,KAClBugE,EAAkBD,EAAUh1C,eAC5Bk1C,EAAmBH,EAAMxiE,UAAU2F,YAEvC,GADAoK,QAAQyyD,EAAM3gE,MAAMzB,EAAAqB,YAAY+nB,QAC5Bm5C,EAAiB9/D,YACnBkwD,EAAaz5C,KAAK5b,EAAO8pC,YAAYi7B,EAAU/pC,SAC7Ch7B,EAAOmpC,eAAekrB,EAAUjnC,MAAOqgC,GACvCptD,KAAKwvD,kBACHoV,EAAiB9/D,YACjB4/D,EAAS,KAIXC,EACAF,EAAMtzC,mBAEH,CAEL,IAAI3Z,EAAoCitD,EAAMxiE,UAAU2F,YAAa4P,eACrEw9C,EAAaz5C,KAAK5b,EAAO8pC,YAAYi7B,EAAU/pC,SAC7Ch7B,EAAOmpC,eAAekrB,EAAUjnC,MAAOqgC,GACvC51C,GAAkB,EACd7X,EAAOmpC,eAAe,EAAItxB,EAAgBmtD,GAC1CD,EAAUpnB,aAAa39C,GACzBglE,EACFF,EAAMtzC,mHAchB,OANA6jC,EAAaz5C,KACX5b,EAAOmpC,eAAekrB,EAAUjnC,MAAOqgC,IAGzC76B,EAAgBrC,cAAc8jC,GAC9Bh0D,KAAK8qD,YAAcwY,EAAcl/D,KAC1BzE,EAAOqrC,YAAY,KAAMgqB,EAAc5H,IAIhD1C,EAAAzoD,UAAA2uD,wBAAA,SAAwB0S,EAAsBxV,GAE5C,IAAInuD,EAASK,KAAKL,OACdytD,EAAiBptD,KAAKygB,QAAQ2sC,eAElC,OADAptD,KAAK8qD,YAAcwY,EAAcl/D,KAC1BzE,EAAO+rC,SACZ0hB,GAAkB/wC,EAAAsT,WAAWE,IACzBlwB,EAAO6oC,aACLnsB,EAAAqZ,SAASM,MACTr2B,EAAOmpC,eAAe,EAAGzsB,EAAAsT,WAAWE,KACpClwB,EAAOkoC,UAAU,IAEnBloC,EAAOmpC,eAAe,EAAGzsB,EAAAsT,WAAWC,KACxCjwB,EAAOmpC,eAAe,EAAGskB,GACzBztD,EAAOqpC,eAAe,EACpBhpC,KAAKwjE,aAAaF,EAAexV,MAMvCpD,EAAAzoD,UAAAuwD,iBAAA,SAAiBrsD,EAAqBhC,GACpC,IAAIouB,EAAkBvyB,KAAKuyB,gBACvBnlB,EAASjJ,EAAMiJ,OACfA,EAAOkI,eAAiB,IAAGlI,EAAOkI,eAAiBtV,KAAKL,OAAO21C,iBAAiBloC,EAAOJ,iBAC3F7I,EAAMwsB,aAAexqB,EACrBosB,EAAgB7E,eAAenS,KAAKpX,IAExCumD,EApqOA,CAA8BxuC,EAAAP,mBAwqO9B,SAAA2zC,EACElnD,EACAR,EACAi9D,GAKA,QALA,IAAAA,MAAA,MAEAra,EAA8Bqa,EAAgBA,EAAc59C,WAAarf,EAAYzD,MAAMiJ,OAAOwI,WAClG60C,EAA+BriD,EAAQ6e,WAElC7e,EAAQ0e,aAAagjC,EAAAjrC,eAAexM,UAAzC,CAEA,IAAIsZ,EAAUvjB,EAAQujB,QAClB/S,EAAY5G,OAAOoK,EAAAzD,cAAcyD,EAAAvK,cAAcQ,SAAUzK,EAAYoE,aACrExG,EAAOoT,EAAUjT,UACrB,GAAIH,GAAQA,EAAKoB,OAAQ,CACvB,IAAIgW,EAAMpX,EAAK,GACXoX,EAAIha,MAAQwZ,EAAA3Z,SAASI,SAA+B+Z,EAAKtJ,aAAe8I,EAAAhJ,YAAYmB,QACtFk2C,EAAyD7tC,EAAKtb,MAC1DkE,EAAKoB,QAAU,KACjBgW,EAAMpX,EAAK,IACH5C,MAAQwZ,EAAA3Z,SAASI,SAA+B+Z,EAAKtJ,aAAe8I,EAAAhJ,YAAYmB,QACtFi2C,EAA8BC,EAC9BA,EAAyD7tC,EAAKtb,MAC1DkE,EAAKoB,OAAS,GAChB+kB,EAAQ3P,MACNE,EAAAnC,eAAeuP,+BACf1Q,EAAUzU,MAAO,IAAKqB,EAAKoB,OAAOiU,aAItC8Q,EAAQ3P,MACNE,EAAAnC,eAAesP,wBACfzM,EAAIzY,SAKVwnB,EAAQ3P,MACNE,EAAAnC,eAAesP,wBACfzM,EAAIzY,YAIRwnB,EAAQ3P,MACNE,EAAAnC,eAAesjD,wCACfzkD,EAAUzU,MAAO,IAAK,MAptOfzE,EAAAgrD,0FCrPb,SAAY3wC,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,qCACAA,IAAA,mHACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,+HACAA,IAAA,qIACAA,IAAA,mGACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,yFACAA,IAAA,mEACAA,IAAA,+CACAA,IAAA,yMACAA,IAAA,+FACAA,IAAA,mHACAA,IAAA,yFACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,4EACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,wIACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,kJACAA,IAAA,oFACAA,IAAA,sIACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,4KACAA,IAAA,0DACAA,IAAA,8FACAA,IAAA,4JACAA,IAAA,gIACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,8KACAA,IAAA,kLACAA,IAAA,kFACAA,IAAA,0CACAA,IAAA,wFACAA,IAAA,4HAlHF,CAAYra,EAAAqa,iBAAAra,EAAAqa,oBAsHZra,EAAAsa,uBAAA,SAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,+DACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,qGACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,4EAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,8EAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,4FAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,QAAS,MAAO,sRClPpB,IAAA2qD,EAAA3kE,EAAA,IAkBA2pD,EAAA3pD,EAAA,GAUAic,EAAAjc,EAAA,GAoBA4kE,EAAA,WAKA,OALA,WAIE/kE,KAAAglE,OAAwB,IAAIlvD,OAJ9B,GAOAmvD,EAAA,WAQA,OAJE,SAAYC,EAAqBC,GAC/BnlE,KAAKolE,cAAgBF,EACrBllE,KAAKoE,KAAO+gE,GANhB,GAUAE,EAAA,WAUA,OAJE,SAAYzkE,EAAcwD,GAF1BpE,KAAAslE,mBAA6B,GAG3BtlE,KAAKY,KAAOA,EACZZ,KAAKoE,KAAOA,GARhB,GAaAmhE,EAAA,oBAAAA,KAuBA,OArBSA,EAAAC,cAAqC,IAAIzmD,MAC7C,KAAM,SACN,MAAO,UACP,MAAO,UACP,MAAO,UACP,QAAS,KACT,KAAM,UACN,MAAO,WACP,MAAO,WACP,MAAO,WACP,QAAS,UACT,OAAQ,UACR,MAAO,QACP,MAAO,QACP,UAAW,UACX,eAAgB,SAChB,kBAAmB,SACnB,cAAe,SACf,cAAe,WACf,QAAS,WAEdwmD,EAvBA,GAAa7lE,EAAA6lE,YAyBb,IAAAE,EAAA,WAWA,OAJE,SAAY7kE,EAAcwD,GAJ1BpE,KAAA0lE,WAAqB,QACrB1lE,KAAA2lE,YAAwB,YACxB3lE,KAAA4lE,YAAwB,UAGtB5lE,KAAKY,KAAOA,EACZZ,KAAKoE,KAAOA,GAThB,GAcA8b,EAAA,WAwBE,SAAAA,EAAYyL,GAVZ3rB,KAAAwlE,cAAqC,IAAIzmD,IAEzC/e,KAAA6lE,aAA4B,IAAI96C,IAEhC/qB,KAAA8lE,cAAqC,IAAI/mD,IAEzC/e,KAAA+lE,cAAsC,IAAIhnD,IAE1C/e,KAAAgmE,oBAA0D,IAAIjnD,IAI5D/e,KAAK2rB,QAAUA,EAEf3rB,KAAKimE,SACHC,QAAS,cACTxoB,MAAO,IAAI5nC,MACXqwD,QAAS,IAAIrwD,MACbswD,QAAS,IAAItwD,MACbuwD,OAAQ,IAAIvwD,OAGd9V,KAAKwlE,cAAgBD,EAAUC,cAuanC,OAjaEtlD,EAAAje,UAAAqkE,YAAA,SAAYC,EAAoBp3D,WAE1Bq3D,EAAS,IAAIzB,EACjByB,EAAO5lE,KAAO2lE,EACdC,EAAOn1C,KAAO,GAEd,IAAIqsB,EAAQvuC,EAAUjK,WACtB,GAAIw4C,MACF,IAAiB,IAAAvhC,EAAAwH,EAAA+5B,GAAK+oB,EAAAtqD,EAAA0H,QAAA4iD,EAAA3iD,KAAA2iD,EAAAtqD,EAAA0H,OAAE,CAAnB,IAAIzf,EAAIqiE,EAAAnlE,MACPolE,EAAWtiE,EAAKA,KAAKD,MAAM0W,WAC/B7a,KAAK2mE,gBAAgBD,GACrBF,EAAOxB,OAAOzpD,MAAO3a,KAAMwD,EAAKxD,KAAKuD,MAAM0W,WAAYzW,KAAMA,EAAKA,KAAKD,MAAM0W,+GAGjF,OAAO2rD,GAITtmD,EAAAje,UAAA0kE,gBAAA,SAAgBC,GAEd,IAAK5mE,KAAK6lE,aAAazgD,IAAIwhD,GAAe,CAExC,IAAIC,EAAmB7mE,KAAK8mE,yBAAyBF,GACjDzB,EAAWnlE,KAAKwlE,cAActkE,IAAI2lE,GAClC1B,GACFnlE,KAAKimE,QAAQvoB,MAAMniC,KAAK,IAAI0pD,EAAa2B,EAAczB,IAEzDnlE,KAAK6lE,aAAa76C,IAAI47C,KAW1B1mD,EAAAje,UAAA6kE,yBAAA,SAAyBF,GAGvB,GAD6B5mE,KAAKwlE,cAActkE,IAAI0lE,GAElD,OAAOA,EAET,IAAIG,EAAY/mE,KAAK2rB,QAAQtM,YAAYne,IAAI0lE,GAC7C,GAAIG,EAAW,CACb,IAAIC,EAAkBD,EAAU3iE,KAAKD,MAAM0W,WAC3C,OAAO7a,KAAK8mE,yBAAyBE,GAErC,OAAOJ,GAQX1mD,EAAAje,UAAAglE,2BAAA,SAA2BL,GACzB,IAAIG,EAAY/mE,KAAK2rB,QAAQtM,YAAYne,IAAI0lE,GAC7C,GAAIG,EAAW,CACb,IAAIC,EAAkBD,EAAU3iE,KAAKD,MAAM0W,WAC3C,OAAO7a,KAAKinE,2BAA2BD,GAEvC,OAAOJ,GAUX1mD,EAAAje,UAAAilE,uBAAA,SAAuBN,GACrB,IAAI1I,EAAel+D,KAAKinE,2BAA2BL,GAGnD,OAD8B5mE,KAAK2rB,QAAQvM,YAAYle,IAAIg9D,IAM7Dh+C,EAAAje,UAAAklE,4BAAA,SAA4BC,EAAkCxhE,WACxDoG,EAAao7D,EAAcx/D,YAAYoE,WACvCq7D,GAAoB,EACxB,GAAIr7D,MACF,IAAsB,IAAAs7D,EAAA3jD,EAAA3X,GAAUu7D,EAAAD,EAAAzjD,QAAA0jD,EAAAzjD,KAAAyjD,EAAAD,EAAAzjD,OAAE,CAAhB0jD,EAAAjmE,MACFsE,eAAiBA,IAC7ByhE,GAAoB,qGAI1B,OAAOA,GAGTnnD,EAAAje,UAAAulE,mBAAA,SAAmB17C,GAEjB,YAAW27C,GAAP37C,GAA2B,MAAPA,IAGA,KAAjBA,EAAI47C,OAAO,IAA4C,KAA9B57C,EAAI47C,OAAO57C,EAAIllB,OAAS,KAS1DsZ,EAAAje,UAAA0lE,sBAAA,SAAsBv/D,GAEpB,GAAIA,EAAQxF,MAAQknD,EAAAlrC,YAAY6G,mBAAoB,CAClD,IAAImiD,EAA8Bx/D,EAClC,OAAOpI,KAAKmnE,4BAA4BS,EAAUxrD,EAAAvK,cAAcK,QAElE,OAAO,GAMTgO,EAAAje,UAAA4lE,sBAAA,SAAsB77D,eACpB,IAAsB,IAAA87D,EAAAnkD,EAAA3X,GAAU+7D,EAAAD,EAAAjkD,QAAAkkD,EAAAjkD,KAAAikD,EAAAD,EAAAjkD,OAAE,CAA7B,IAAIjL,EAASmvD,EAAAzmE,MAChB,GAAIsX,EAAUhT,eAAiBwW,EAAAvK,cAAcO,UAAYwG,EAAUjT,UAAW,CAE5E,GAAIiT,EAAUjT,UAAUiB,OAAS,EAC/B,MAAM,IAAIue,MAAM,8CAGlB,IAAI/gB,EAAOwU,EAAUjT,UAAU,GAAGxB,MAAM0W,WACpCja,EAAOZ,KAAKgoE,qBAAqBpvD,EAAUjT,UAAU,IAEzD3F,KAAKimE,QAAQI,OAAO9qD,KAAK,IAAIkqD,EAAM7kE,EAAMwD,IAEzCpE,KAAKioE,0BAA0BrvD,EAAUjT,UAAU,yGAMzDua,EAAAje,UAAA+lE,qBAAA,SAAqB7hE,GACnB,IAAI+hE,EAAe/hE,EAAKhC,MAAM0W,WAE9B,GAAI7a,KAAKwnE,mBAAmBU,GAC1B,OAAOA,EAAKryD,UAAU,EAAGqyD,EAAKthE,OAAS,GAGzC,IAAI4b,EAAesiD,EAAAqD,SAASC,gBAAgBjiE,GACxCiC,EAA0BpI,KAAK2rB,QAAQzM,eAAehe,IAAIshB,GAE9D,GAAIpa,EAAS,CACX,IAAIR,EAA6EQ,EAASR,YAC1F,GAAIA,GAAeA,EAAY9C,YAE7B,OADgE8C,EAAY9C,YAC7DxD,MAGnB,MAAM,IAAI6jB,MAAM,wBAAwB3C,IAM1CtC,EAAAje,UAAAgmE,0BAAA,SAA0B9hE,GAExB,IAEIqc,EAFerc,EAAKhC,MAAMiJ,OAAOC,aAEH,IADvBlH,EAAKhC,MAAM0W,WAEtB7a,KAAKqoE,6BAA6B7lD,IAGpCtC,EAAAje,UAAAomE,6BAAA,SAA6B7lD,GAE3B,IAAIpa,EAAUpI,KAAK2rB,QAAQzM,eAAehe,IAAIshB,GAC9C,IAAKpa,GAAWA,EAAQxF,MAAQknD,EAAAlrC,YAAYgG,gBAC1C,MAAM,IAAIO,MAAM,WAAW3C,EAAY,6CAA6CA,EAAY,iBAElG,IAAIyF,EAAiC7f,EACrCpI,KAAKsoE,8BAA8BrgD,IAIrC/H,EAAAje,UAAAqmE,8BAAA,SAA8BrgD,WAExBlc,EAAkCkc,EAAergB,YAAYmE,QAC7Dy6D,EAAS,IAAIzB,EAGjB,GAFAyB,EAAO5lE,KAAOqnB,EAAehB,YAEzBjnB,KAAKwlE,cAActkE,IAAIslE,EAAO5lE,MAAlC,CAIA4lE,EAAOn1C,KAAO,OACd,IAAmB,IAAAk3C,EAAA5kD,EAAA5X,GAAOy8D,EAAAD,EAAA1kD,QAAA2kD,EAAA1kD,KAAA0kD,EAAAD,EAAA1kD,OAAE,CAAvB,IAAIjN,EAAM4xD,EAAAlnE,MACb,GAAIsV,EAAOhU,MAAQwZ,EAAA3Z,SAAS8U,iBAAkB,CAC5C,IAAIkxD,EAAmD7xD,EACnD8xD,EAAY9xD,EAAOhW,KAAKuD,MAAM0W,WAC9B8tD,EAAYF,EAAarkE,KAEzBukE,GACFnC,EAAOxB,OAAOzpD,MAAO3a,KAAM8nE,EAAWtkE,KAAMukE,EAAUxkE,MAAM0W,gHAIlE7a,KAAK4oE,UAAUpC,KAIjBtmD,EAAAje,UAAA2mE,UAAA,SAAUpC,GAEHxmE,KAAK8lE,cAAc1gD,IAAIohD,EAAO5lE,QACjCZ,KAAKimE,QAAQE,QAAQ5qD,KAAKirD,GAC1BxmE,KAAK8lE,cAAc/hE,IAAIyiE,EAAO5lE,KAAM4lE,KAOxCtmD,EAAAje,UAAA4mE,UAAA,SAAU/8C,GAER9Z,OAAO8Z,EAAIllB,OAAS,EAAG,gCACvBoL,OAAO8Z,EAAIllB,QAAU,GAAI,eAAeklB,EAAG,wCAO7C5L,EAAAje,UAAA6mE,uBAAA,SAAuBC,WAEjB35D,EAAO,IAAI0G,MACXkzD,GAAqB,EACzB,GAAID,EAAaxgD,gBAAiB,CAEhC,IAAI0gD,EAAeF,EAAa9hD,WAC5BiiD,EAAkB,IAAMD,EAE5B75D,EAAKmM,KAAK,6BACVnM,EAAKmM,KAAK,WAAW2tD,EAAe,UAAUD,EAAY,eAC1D75D,EAAKmM,KAAK,gBAAgB2tD,EAAe,qBACzC95D,EAAKmM,KAAK,gDAEV,IAAqB,IAAAsT,EAAAlL,EAAAolD,EAAaxgD,gBAAgB9e,UAAQsa,EAAA8K,EAAAhL,QAAAE,EAAAD,KAAAC,EAAA8K,EAAAhL,OAAE,CAAvD,IAAIwB,EAAQtB,EAAAziB,MACf,GAAItB,KAAK2nE,sBAAsBtiD,GAAW,CAExCrlB,KAAKmpE,yBAA4C9jD,GACjD2jD,GAAqB,EACrB,IAAIphE,EAAuDyd,EAAUzd,YAEjEwhE,EAAWxhE,EAAYhH,KAAKuD,MAAM0W,WAClC6iC,EAAQ91C,EAAYuH,UAAUjK,WAElClF,KAAK6oE,UAAUO,GAEfh6D,EAAKmM,KAAK,0BAA0B6tD,EAAQ,QAG5C,IADA,IAAIpE,EAAS,IAAIlvD,MACRiX,EAAQ,EAAGA,EAAQ2wB,EAAM92C,OAAQmmB,IAAS,CACjD,IAAI3oB,EAAsBs5C,EAAM3wB,GAC5BkC,EAAgB7qB,EAAKA,KAAKD,MAAM0W,WAChCqU,EAAgB9qB,EAAKxD,KAAKuD,MAAM0W,WAIhCwuD,EAD2C,IAAIvE,EAAAh0D,oBAAoB9Q,KAAK2rB,QAASvnB,EAAKA,MACxDklE,0BAElC,GAAID,EAAQE,QACNF,EAAQzmE,MAAQkiE,EAAA0E,aAAaC,OAC/Br6D,EAAKmM,KAAK,aAAa2T,EAAa,oBAAoBm6C,EAAQK,SAAQ,QAC/DL,EAAQzmE,MAAQkiE,EAAA0E,aAAaG,KACtCv6D,EAAKmM,KAAK,aAAa2T,EAAa,2BAC3Bm6C,EAAQzmE,MAAQkiE,EAAA0E,aAAaj1D,QAGtCnF,EAAKmM,KAAK,aAAa2T,EAAa,2BAA2Bm6C,EAAQ13C,SAAQ,aAGjF,GAAI03C,EAAQzmE,MAAQkiE,EAAA0E,aAAaj1D,OAC/BnF,EAAKmM,KAAK,aAAa2T,EAAa,4BAC/B,GAAIm6C,EAAQzmE,MAAQkiE,EAAA0E,aAAaG,KACtCv6D,EAAKmM,KAAK,aAAa2T,EAAa,+BAC/B,GAAIm6C,EAAQzmE,MAAQkiE,EAAA0E,aAAaC,OACtCr6D,EAAKmM,KAAK,aAAa2T,EAAa,cAAcm6C,EAAQK,SAAQ,YAC7D,CACL,IAAIlnD,EAAesiD,EAAAqD,SAASC,gBAAgBhkE,EAAKA,MACjDpE,KAAKqoE,6BAA6B7lD,GAClCpT,EAAKmM,KAAK,aAAa2T,EAAa,UAAUD,EAAa,OAC3D7f,EAAKmM,KAAK,SAAS2T,EAAa,qBAGpC81C,EAAOzpD,KAAK2T,GAEd9f,EAAKmM,KAAK,SAAS2tD,EAAe,IAAIE,EAAQ,IAAIpE,EAAOxpD,KAAK,KAAI,MAClEpM,EAAKmM,KAAK,4GAKd,GAFAnM,EAAKmM,KAAK,OAENytD,EAAoB,CACRD,EAAa9hD,WACV8hD,EAAanhE,YAAYzD,MAAMiJ,OAAOC,aACnD07D,EAAanhE,YAAYoE,YAC3BhM,KAAK6nE,sBAAsBkB,EAAanhE,YAAYoE,aAI1D,OAAOg9D,EAAqB55D,EAAO,IAAI0G,OAGzCoK,EAAAje,UAAAknE,yBAAA,SAAyB/B,GAEvB,IACIgC,EADmChC,EAAcx/D,YAC1BhH,KAAKuD,MAAM0W,WAClC1L,EAAYi4D,EAAcx/D,YAAYuH,UACtCq3D,EAASxmE,KAAKsmE,YAAY8C,EAAUj6D,GAExCnP,KAAK4oE,UAAUpC,GACfxmE,KAAKimE,QAAQG,QAAQ7qD,KAAK,IAAI8pD,EAAO+D,EAAUA,KAIjDlpD,EAAAje,UAAA2nE,mBAAA,uBAEMC,EAAkB7pE,KAAK2rB,QAAQvM,YAAY0qD,WAC/C,IAAgB,IAAAC,EAAApmD,EAAAkmD,GAAeG,EAAAD,EAAAlmD,QAAAmmD,EAAAlmD,KAAAkmD,EAAAD,EAAAlmD,OAAE,CAA5B,IAAIjiB,EAAGooE,EAAA1oE,OACNA,EAAQtB,KAAK2rB,QAAQvM,YAAYle,IAAIU,KAEvCqoE,QAAQC,IAAI,qBAAqBtoE,EAAG,YAAYN,EAAMsB,wGAI1D,IAAIunE,EAAiBnqE,KAAK2rB,QAAQtM,YAAYyqD,WAC9C,IAAgB,IAAAM,EAAAzmD,EAAAwmD,GAAcE,EAAAD,EAAAvmD,QAAAwmD,EAAAvmD,KAAAumD,EAAAD,EAAAvmD,OAAE,CAA3B,IACCviB,EADGM,EAAGyoE,EAAA/oE,OACNA,EAAQtB,KAAK2rB,QAAQtM,YAAYne,IAAIU,KAEvCqoE,QAAQC,IAAI,mBAAmBtoE,EAAG,YAAYN,EAAM8C,KAAKD,MAAM0W,gHAKrEqF,EAAAje,UAAAqoE,uBAAA,mBACMR,EAAO9pE,KAAK2rB,QAAQzM,eAAe4qD,WACvC,IAAgB,IAAAS,EAAA5mD,EAAAmmD,GAAIU,EAAAD,EAAA1mD,QAAA2mD,EAAA1mD,KAAA0mD,EAAAD,EAAA1mD,OAAE,CAAjB,IAAIjiB,EAAG4oE,EAAAlpE,MACNA,EAAQtB,KAAK2rB,QAAQzM,eAAehe,IAAIU,GACxCN,GACF2oE,QAAQC,IAAI,sBAAsBtoE,EAAG,SAASN,EAAMsB,0GAIlDsd,EAAAje,UAAAwoE,wBAAR,mBACMX,EAAO9pE,KAAK2rB,QAAQzM,eAAe4qD,WACvC,IAAgB,IAAAY,EAAA/mD,EAAAmmD,GAAIa,EAAAD,EAAA7mD,QAAA8mD,EAAA7mD,KAAA6mD,EAAAD,EAAA7mD,OAAE,CAAjB,IAAIjiB,EAAG+oE,EAAArpE,MACNA,EAAwBtB,KAAK2rB,QAAQzM,eAAehe,IAAIU,GAC5D,GAAIN,GAASA,EAAMsB,MAAQknD,EAAAlrC,YAAYgG,gBAAiB,CAEtD,IAAIqD,EAAiD3mB,EACjD2mB,EAAepD,eACjBolD,QAAQC,IAAI,sBAAsBtoE,EAAG,oBAAoBqmB,EAAepD,cAAcoC,iHAM9F/G,EAAAje,UAAAke,QAAA,mBAOMyqD,EAAmC,IAAI9F,EAAA+F,gBAAgB7qE,KAAK2rB,SAChEi/C,EAAgBzqD,UAChBngB,KAAKgmE,oBAAsB4E,EAAgB5E,oBAE3C,IAAI8E,EAAiB,IAAIh1D,UAEzB,IAAoB,IAAA+Y,EAAAlL,EAAA3jB,KAAK2rB,QAAQzM,eAAezV,UAAQsa,EAAA8K,EAAAhL,QAAAE,EAAAD,KAAAC,EAAA8K,EAAAhL,OAAE,CAArD,IAAIzb,EAAO2b,EAAAziB,MAEd,GAAI8G,EAAQxF,MAAQknD,EAAAlrC,YAAYgG,gBAAiB,CAC/C,IAAImkD,EAA+B3gE,EACnC,IAAKpI,KAAK+lE,cAAc3gD,IAAI2jD,EAAavmD,cACJxiB,KAAK8oE,uBAAuBC,GACjDgC,QAAQ,SAACzpE,EAAeyrB,GACpC+9C,EAAevvD,KAAKja,KAEtBtB,KAAK+lE,cAAchiE,IAAIglE,EAAavmD,aAAcpa,sGAKpD0iE,EAAelkE,OAInB5G,KAAKgrE,SAAWhrE,KAAKirE,iBAAiBH,IAGxC5qD,EAAAje,UAAAipE,WAAA,SAAWtqE,GACT,IAAIwH,EAAuBpI,KAAK2rB,QAAQzM,eAAehe,IAAIN,GAE3D,OADAqpE,QAAQC,IAAI,mBAAmBtpE,EAAI,SAAQwH,EAAqB,OACzDA,GAID8X,EAAAje,UAAAgpE,iBAAR,SAAyB77D,GAEvB,IAAIkM,EAAK,IAAIxF,MAQb,OAPAwF,EAAGC,KAAK,iFAERnM,EAAK27D,QAAQ,SAACzpE,EAAeyrB,GAC3BzR,EAAGC,KAAKja,KAEVga,EAAGC,KAAK,KAEDD,EAAGE,KAAK,OAtMV0E,EAAAirD,QAAiB,mEAwM1BjrD,EA3cA,GAAaxgB,EAAAwgB,u4BChHb,IAyDYkrD,EAzDZlvD,EAAA/b,EAAA,GAKA2pD,EAAA3pD,EAAA,GAmBAic,EAAAjc,EAAA,GAoBAgc,EAAAhc,EAAA,GAMAkC,EAAAlC,EAAA,IAOA,SAAYirE,GAEVA,IAAA,mBAEAA,IAAA,qBAJF,CAAYA,EAAA1rE,EAAA0rE,aAAA1rE,EAAA0rE,gBAQZ,IAAAtrD,EAAA,SAAA1O,GAWE,SAAA0O,EAAY6L,GAAZ,IAAAra,EACEF,EAAA5Q,KAAAR,KAAM2rB,EAAQ/P,cAAY5b,YAN5BsR,EAAAiqD,sBAA2C,KAE3CjqD,EAAAypD,yBAA+C,KAK7CzpD,EAAKqa,QAAUA,IA6jCnB,OA1kC8Bta,EAAAyO,EAAA1O,GAiB5B0O,EAAA7d,UAAA8sD,YAAA,SACE/oD,EACAqnB,EACAg+C,GAIA,QALA,IAAAh+C,MAAA,WACA,IAAAg+C,MAAaD,EAAWE,QAIpBtlE,EAAKpD,MAAQwZ,EAAA3Z,SAASqP,UAAW,CACnC,IAAI3C,EAAYnP,KAAKurE,iBAAgCvlE,EAAMqnB,EAAyBg+C,GACpF,OAAKl8D,EACEnJ,EAAK9B,WAAaiL,EAAU/K,KAAK04C,aAAe3tC,EAAU/K,KAD1C,KAKzB4N,OAAOhM,EAAKpD,MAAQwZ,EAAA3Z,SAAS+O,MAC7B,IAAIgrD,EAAqBx2D,EACrBihB,EAAau1C,EAAS57D,KAAKmF,KAC3BggB,EAAakB,EACb3D,EAAYk5C,EAASr4D,MAAMiJ,OAAOC,aAAehL,EAAAsT,eAAiBsR,EAIhE/H,EAAiBlf,KAAK2rB,QAAQzM,eAC9B9W,OAAO,EACX,IACGA,EAAU8W,EAAehe,IAAIoiB,MAC7Blb,EAAU8W,EAAehe,IAAI6kB,IAE9B,OAAQ3d,EAAQxF,MACd,KAAKknD,EAAAlrC,YAAYwN,KACf,OAA+B,OAA3BowC,EAASv4D,eAA0Bu4D,EAASv4D,cAAc2C,QACxDykE,GAAcD,EAAWE,QAC3BtrE,KAAKgc,MACHE,EAAAnC,eAAemiD,sBACfl2D,EAAK7B,MAAOiE,EAAQoa,cAGjB,MAEFrG,EAAAuE,KAAKG,IAEd,KAAKipC,EAAAlrC,YAAYgG,gBACf,IAAIS,EAAWrlB,KAAKkxD,8BACF9oD,EAChBo0D,EAASv4D,cACTopB,EACArnB,GAEF,OAAKqf,EACErf,EAAK9B,WAAamhB,EAASjhB,KAAK04C,aAAez3B,EAASjhB,KADzC,KAS5B,IAAIqM,EAAQzQ,KAAK2rB,QAAQtM,YAAYne,IAAI+lB,GACzC,GAAIxW,EAAO,OAAOzQ,KAAK+uD,YAAYt+C,EAAMrM,KAAMipB,EAAyBg+C,GAKxE,IAAItO,EAAoBP,EAASv4D,cACjC,GAAI84D,EAAmB,CAGrB,IAFA,IAAIyO,EAAmBzO,EAAkBn2D,OACrCogC,EAAa,IAAIlxB,MAAY01D,GACxBnrE,EAAI,EAAGA,EAAImrE,IAAoBnrE,EAAG,CACzC,IAAIorE,EAAYzrE,KAAK+uD,YACnBgO,EAAkB18D,GAClBgtB,EACAg+C,GAEF,IAAKI,EAAW,OAAO,KACvBzkC,EAAW3mC,GAAKorE,EAElB,GAAID,EAAkB,CACpB,IAAIE,EAAcvvD,EAAAyhC,cAAc5W,GAC5B0kC,EAAY9kE,SACd0c,GAAa,IAAMooD,EAAc,IACjC3lD,GAAc,IAAM2lD,EAAc,UAE/B,GAAIr+C,EAAyB,CAClC,IAAIs+C,EAAkBt+C,EAAwBnsB,IAAI6kB,GAClD,GAAI4lD,EAAiB,OAAOA,GAOhC,IAAIvsD,EAAcpf,KAAK2rB,QAAQvM,YAC3Bhb,OAAI,EACR,OACGA,EAAOgb,EAAYle,IAAIoiB,MACvBlf,EAAOgb,EAAYle,IAAI6kB,IAEjB3hB,GAIPinE,GAAcD,EAAWE,QAC3BtrE,KAAKgc,MACHE,EAAAnC,eAAeuK,mBACfk4C,EAAS57D,KAAKuD,MAAO4hB,GAGlB,OAITjG,EAAA7d,UAAAspE,iBAAA,SACEvlE,EACAqnB,EACAg+C,QADA,IAAAh+C,MAAA,WACA,IAAAg+C,MAAyBD,EAAWE,QAEpC,IAAIlmE,EAAmBY,EAAKZ,iBACxBqpB,EAAwB,KAC5B,GAAIrpB,KACFqpB,EAAWzuB,KAAK+uD,YAAY3pD,EAAkBioB,EAAyBg+C,IACxD,OAAO,KAQxB,IANA,IAAIO,EAAqB5lE,EAAKd,WAC1Bq5C,EAAgBqtB,EAAmBhlE,OACnCooB,EAAiB,IAAIlZ,MAAYyoC,GACjCR,EAAiB,IAAIjoC,MAAcyoC,GACnCP,EAAqB,EACrBC,GAAU,EACL59C,EAAI,EAAGA,EAAIk+C,IAAiBl+C,EAAG,CACtC,IAAIwrE,EAAoBD,EAAmBvrE,GAC3C,OAAQwrE,EAAkB7mE,eACxB,KAAKoX,EAAA1K,cAAcguC,QACjB1B,EAAqB39C,EAAI,EACzB,MAEF,KAAK+b,EAAA1K,cAAco6D,KACjB95D,OAAO3R,GAAKk+C,GACZN,GAAU,EAId,IAAIhvB,EAAgBjvB,KAAK+uD,YACvB/8C,OAAO65D,EAAkBznE,MACzBipB,EACAg+C,GAEF,IAAKp8C,EAAe,OAAO,KAC3BD,EAAe3uB,GAAK4uB,EACpB8uB,EAAe19C,GAAKwrE,EAAkBjrE,KAAKmF,KAE7C,IACIZ,EADA4mE,EAAiB/lE,EAAKb,WAE1B,GAAI4mE,GAEF,KADA5mE,EAAanF,KAAK+uD,YAAYgd,EAAgB1+C,EAAyBg+C,IACtD,OAAO,UAExBlmE,EAAagX,EAAAuE,KAAKc,KAEpB,IAAIrS,EAAY,IAAIgN,EAAA0hC,UAAU7uB,EAAgB7pB,EAAYspB,GAI1D,OAHAtf,EAAU4uC,eAAiBA,EAC3B5uC,EAAU6uC,mBAAqBA,EAC/B7uC,EAAU8uC,QAAUA,EACb9uC,GAIT2Q,EAAA7d,UAAA+6D,qBAAA,SACEnxD,EACAkxD,EACA1vC,EACA4jC,EACAoa,QAFA,IAAAh+C,MAAA,WACA,IAAA4jC,MAAA,WACA,IAAAoa,MAAyBD,EAAWE,QAEpC,IAAIU,EAAiBngE,EAAejF,OAChCqlE,EAAgBlP,EAAoBA,EAAkBn2D,OAAS,EACnE,GAAIolE,GAAkBC,EAgBpB,OAfIA,EACFjsE,KAAKgc,MACHE,EAAAnC,eAAemyD,oCACf9vD,EAAA5Z,MAAMgZ,KACSuhD,EAAmB,GAAG54D,MACtB44D,EAAmBkP,EAAgB,GAAG9nE,OAErD6nE,EAAenxD,SAAS,IAAKoxD,EAAcpxD,SAAS,KAE7Co2C,GACTjxD,KAAKgc,MACHE,EAAAnC,eAAemyD,oCACfjb,EAAsB9sD,MAAM8qD,MAAO+c,EAAenxD,SAAS,IAAK,KAG7D,KAGT,IADA,IAAI5W,EAAgB,IAAI6R,MAAYk2D,GAC3B3rE,EAAI,EAAGA,EAAI2rE,IAAkB3rE,EAAG,CACvC,IAAI+D,EAAOpE,KAAK+uD,YACDgO,EAAmB18D,GAChCgtB,EACAg+C,GAEF,IAAKjnE,EAAM,OAAO,KAElBH,EAAc5D,GAAK+D,EAErB,OAAOH,GAIT6b,EAAA7d,UAAA0iB,kBAAA,SACE/Y,EACAmoD,EACAsX,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IACIljE,EADAxH,EAAOgL,EAAW7F,KAGtB,GAAIguD,EAAS,CAEX,OAAQA,EAAQnxD,MACd,KAAKknD,EAAAlrC,YAAY7K,SAEf,GADA3L,EAAqB2rD,EAAS3kC,KAAKqE,eAAe7yB,GAIhD,OAFAZ,KAAKu7D,sBAAwB,KAC7Bv7D,KAAK+6D,yBAA2B,KACzB3yD,EAET2rD,EAAqBA,EAAS9xD,UAAUuB,OACxC,MAEF,KAAKsmD,EAAAlrC,YAAYjL,MACfogD,EAAkBA,EAAS9xD,UAAUuB,OAMzC,KAAOuwD,GAAS,CACd,IAAIhoD,EAAUgoD,EAAQhoD,QACtB,GAAIA,IACE3D,EAAU2D,EAAQ7K,IAAIN,IAGxB,OAFAZ,KAAKu7D,sBAAwB,KAC7Bv7D,KAAK+6D,yBAA2B,KACzB3yD,EAGX2rD,EAAUA,EAAQvwD,QAKtB,IAAI0b,EAAiBlf,KAAK2rB,QAAQzM,eAClC,OAAI9W,EAAU8W,EAAehe,IAAI0K,EAAWzH,MAAMiJ,OAAOC,aAAehL,EAAAsT,eAAiB/U,KACvFZ,KAAKu7D,sBAAwB,KAC7Bv7D,KAAK+6D,yBAA2B,KACzB3yD,IAILA,EAAU8W,EAAehe,IAAIN,KAC/BZ,KAAKu7D,sBAAwB,KAC7Bv7D,KAAK+6D,yBAA2B,KACzB3yD,IAGLijE,GAAcD,EAAWE,QAC3BtrE,KAAKgc,MACHE,EAAAnC,eAAeuK,mBACf1Y,EAAWzH,MAAOvD,GAGf,OAITkf,EAAA7d,UAAAyhE,sBAAA,SACED,EACA0I,EACAd,QAAA,IAAAA,MAAyBD,EAAWE,QAGpC,IAAIc,EAAmB3I,EAAez8D,WAClC6qB,EAAS7xB,KAAK66D,kBAAkBuR,EAAkBD,EAAoBd,GAC1E,IAAKx5C,EAAQ,OAAO,KAGpB,IAAIw6C,EAAe5I,EAAezhE,SAAS+D,KAG3C,OAAQ8rB,EAAOjvB,MACb,KAAKknD,EAAAlrC,YAAYtM,OACjB,KAAKw3C,EAAAlrC,YAAYoO,MACjB,KAAK88B,EAAAlrC,YAAYsS,MAEf,KADIkrB,EAAuCvqB,EAAQztB,KAAKg4C,gBAMtD,OAJAp8C,KAAKgc,MACHE,EAAAnC,eAAeopD,oCACfM,EAAezhE,SAASmC,MAAOkoE,EAAoCx6C,EAAQztB,KAAKyW,YAE3E,KAETgX,EAASuqB,EACT,MAEF,KAAK0N,EAAAlrC,YAAY+K,SACf,IAOIyyB,EAPAv7C,EAASb,KAAK8lB,gBAChB9T,OAAkB6f,EAAQjI,iBAC1B,KACA,KACAyhD,GAEF,IAAKxqE,EAAQ,OAAO,KAEpB,KADIu7C,EAAiBv7C,EAAOsO,UAAUhK,WAAWi3C,gBAM/C,OAJAp8C,KAAKgc,MACHE,EAAAnC,eAAeopD,oCACfM,EAAezhE,SAASmC,MAAOkoE,EAAcxrE,EAAOsO,UAAUhK,WAAW0V,YAEpE,KAETgX,EAASuqB,EACT,MAEF,KAAK0N,EAAAlrC,YAAYjL,MACf,IAAIrL,EAAoBtI,KAAK+6D,yBAC7B,GAAIzyD,EAAmB,CACrB,IAAIszD,EAAqB/pC,EAAQE,eAAe+3B,EAAA7tC,aAAaY,aAC7D,IAAK++C,EAKH,OAJA57D,KAAKgc,MACHE,EAAAnC,eAAeohD,qCACf7yD,EAAkBnE,MAAe0tB,EAAQrP,cAEpC,KAET,IAAIrd,EAAay2D,EAAWzsD,UAAUhK,WACtC,KAAM0sB,EAAS1sB,EAAWi3C,gBAKxB,OAJAp8C,KAAKgc,MACHE,EAAAnC,eAAeopD,oCACfM,EAAezhE,SAASmC,MAAOkoE,EAAclnE,EAAW0V,YAEnD,MAQf,OAAQgX,EAAOjvB,MACb,KAAKknD,EAAAlrC,YAAYgG,gBACjB,KAAKklC,EAAAlrC,YAAYjL,MACf,OAAG,CACD,IACIiD,OAAM,EACV,IAFI7K,EAAU8lB,EAAO9lB,WAEL6K,EAAS7K,EAAQ7K,IAAImrE,IAGnC,OAFArsE,KAAKu7D,sBAAwB6Q,EAC7BpsE,KAAK+6D,yBAA2B,KACzBnkD,EAGT,GAAIib,EAAOjvB,MAAQknD,EAAAlrC,YAAYgG,gBAAiB,CAC9C,IAAqBiN,EAAQhN,cAG3B,MAFAgN,EAA0CA,EAAQhN,kBAK/C,IAAIgN,EAAOjvB,MAAQknD,EAAAlrC,YAAYjL,MAOpC,MANA,IAAYke,EAAQR,KAGlB,MAFAQ,EAAwBA,EAAQR,MAQtC,MAEF,QACE,IAAItlB,EACJ,GADIA,EAAU8lB,EAAO9lB,QAGnB,GADI6K,EAAS7K,EAAQ7K,IAAImrE,GAIvB,OAFArsE,KAAKu7D,sBAAwB6Q,EAC7BpsE,KAAK+6D,yBAA2B,KACzBnkD,EAUf,OAJA5W,KAAKgc,MACHE,EAAAnC,eAAeopD,oCACfM,EAAezhE,SAASmC,MAAOkoE,EAAcx6C,EAAOrP,cAE/C,MAGT1C,EAAA7d,UAAA09D,qBAAA,SACE2M,EACAH,EACAd,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IAAIc,EAAmBE,EAActlE,WACjC6qB,EAAS7xB,KAAK66D,kBAAkBuR,EAAkBD,EAAoBd,GAC1E,IAAKx5C,EAAQ,OAAO,KACpB,OAAQA,EAAOjvB,MACb,KAAKknD,EAAAlrC,YAAYtM,OACjB,KAAKw3C,EAAAlrC,YAAYoO,MACjB,KAAK88B,EAAAlrC,YAAYsS,MAEf,GAAIW,EAD6BA,EAAQztB,KACvBg4C,eAGhB,OAFAp8C,KAAKu7D,sBAAwB6Q,EAC7BpsE,KAAK+6D,yBAA2BuR,EAAchkE,kBACvCupB,EAET,MAEF,KAAKi4B,EAAAlrC,YAAYjL,MACf,IAAIioD,EAAqB/pC,EAAQE,eAAe+3B,EAAA7tC,aAAaY,aAC7D,IAAK++C,EAOH,OANIyP,GAAcD,EAAWE,QAC3BtrE,KAAKgc,MACHE,EAAAnC,eAAeohD,qCACfmR,EAAcnoE,MAAe0tB,EAAQrP,cAGlC,KAGT,GAAIqP,EADa+pC,EAAWzsD,UAAUhK,WACdi3C,eAGtB,OAFAp8C,KAAKu7D,sBAAwB6Q,EAC7BpsE,KAAK+6D,yBAA2BuR,EAAchkE,kBACvCupB,EAWb,OANIw5C,GAAcD,EAAWE,QAC3BtrE,KAAKgc,MACHE,EAAAnC,eAAesN,wBACf+kD,EAAiBjoE,OAGd,MAGT2b,EAAA7d,UAAA44D,kBAAA,SACE7zD,EACAmlE,EACAd,GAEA,SAFA,IAAAA,MAAyBD,EAAWE,QAE7BtkE,EAAWpE,MAAQwZ,EAAA3Z,SAAS2R,eACjCpN,EAAuCA,EAAYA,WAErD,OAAQA,EAAWpE,MACjB,KAAKwZ,EAAA3Z,SAASgR,UACZ,IAAIrP,EAAOpE,KAAK+uD,YACQ/nD,EAAYC,OAClCklE,EAAmB/8C,KAAK/B,wBACxBg+C,GAEF,GAAIjnE,EAEF,GADIy4C,EAAYz4C,EAAKg4C,eAInB,OAFAp8C,KAAKu7D,sBAAwB,KAC7Bv7D,KAAK+6D,yBAA2B,KACzBle,EAGX,OAAO,KAET,KAAKzgC,EAAA3Z,SAASiR,OACZ,MAAM,IAAIyR,MAAM,mBAElB,KAAK/I,EAAA3Z,SAASgS,KACZ,GAAI03D,EAAmB/8C,KAAKxrB,GAAE,MAE5B,GADI2oE,EAAgBJ,EAAmB/8C,KAAKqE,eAAe,QAIzD,OAFAzzB,KAAKu7D,sBAAwB,KAC7Bv7D,KAAK+6D,yBAA2B,KACzBwR,EAIX,OADI/oE,EAAS2oE,EAAmB3oE,SAE9BxD,KAAKu7D,sBAAwB,KAC7Bv7D,KAAK+6D,yBAA2B,KACzBv3D,IAEL6nE,GAAcD,EAAWE,QAC3BtrE,KAAKgc,MACHE,EAAAnC,eAAe+lD,+CACf94D,EAAW7C,OAGR,MAET,KAAKiY,EAAA3Z,SAAS+R,MAEV,IAAI+3D,EAOF/oE,EARJ,GAAI2oE,EAAmB/8C,KAAKxrB,GAAE,MAE5B,GADI2oE,EAAgBJ,EAAmB/8C,KAAKqE,eAAe,SAIzD,OAFAzzB,KAAKu7D,sBAAwB,KAC7Bv7D,KAAK+6D,yBAA2B,KACzBwR,EAIX,OADI/oE,EAAS2oE,EAAmB3oE,SAClBA,EAAOZ,MAAQknD,EAAAlrC,YAAYjL,QAAUnQ,EAAiBA,EAAQ6tB,OAC1ErxB,KAAKu7D,sBAAwB,KAC7Bv7D,KAAK+6D,yBAA2B,KACzBv3D,IAEL6nE,GAAcD,EAAWE,QAC3BtrE,KAAKgc,MACHE,EAAAnC,eAAeimD,iDACfh5D,EAAW7C,OAGR,MAET,KAAKiY,EAAA3Z,SAASS,WACZ,OAAOlD,KAAK2kB,kBAAwC3d,EAAYmlE,EAAoBd,GAEtF,KAAKjvD,EAAA3Z,SAASI,QACZ,OAA4BmE,EAAYsM,aACtC,KAAK8I,EAAAhJ,YAAYmB,OAGf,OAFAvU,KAAKu7D,sBAAwBv0D,EAC7BhH,KAAK+6D,yBAA2B,KACzB/6D,KAAK2rB,QAAQlM,eAIxB,MAEF,KAAKrD,EAAA3Z,SAASY,eACZ,OAAOrD,KAAK0jE,sBACgB18D,EAC1BmlE,EACAd,GAGJ,KAAKjvD,EAAA3Z,SAASW,cACZ,OAAOpD,KAAK2/D,qBACe34D,EACzBmlE,EACAd,GAGJ,KAAKjvD,EAAA3Z,SAASU,KACZ,IAAIipE,EAAoCplE,EAAYA,WAChD6qB,EAAS7xB,KAAK66D,kBAAkBuR,EAAkBD,EAAoBd,GAC1E,IAAKx5C,EAAQ,OAAO,KACpB,GAAIA,EAAOjvB,MAAQknD,EAAAlrC,YAAY6G,mBAAoB,CACjD,IAAIJ,EAAWrlB,KAAKmwD,iCACCt+B,EACF7qB,EAAY/C,cAC7BkoE,EAAmB/8C,KAAK/B,wBACxBrmB,EACAqkE,GAEF,IAAKhmD,EAAU,OAAO,KACtB,IACIw3B,EADA13C,EAAakgB,EAASlW,UAAUhK,WAEpC,GADI03C,EAAY13C,EAAWi3C,eAIzB,OAAOS,EAEP,IAAI1tC,EAAYhK,EAAWk3C,mBAC3B,GAAIltC,EAAW,CACb,IAAIq9D,EAAiBr9D,EAAU2uC,qBAO/B,OANK0uB,IACHA,EAAiB,IAAI1iB,EAAAl5B,eAAe5wB,KAAK2rB,QAASxc,GAClDA,EAAU2uC,qBAAuB0uB,GAI5BA,EASX,OANInB,GAAcD,EAAWE,QAC3BtrE,KAAKgc,MACHE,EAAAnC,eAAe8iD,uGACfuP,EAAiBjoE,MAAO0tB,EAAOrP,cAG5B,MAWb,OANI6oD,GAAcD,EAAWE,QAC3BtrE,KAAKgc,MACHE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAGR,MAIT2b,EAAA7d,UAAA6jB,gBAAA,SACE7jB,EACAgC,EACAopB,EACAg+C,gBADA,IAAAh+C,MAAA,WACA,IAAAg+C,MAAyBD,EAAWE,QAEpC,IAAII,EAAcznE,EAAgBkY,EAAAyhC,cAAc35C,GAAiB,GAC7DohB,EAAWpjB,EAAUirB,UAAUhsB,IAAIwqE,GACvC,GAAIrmD,EAAU,OAAOA,EAErB,IAAIzd,EAAc3F,EAAU2F,YACxB22D,EAAat8D,EAAU2B,GAAGvB,EAAAqB,YAAY6qB,UACtCtG,EAAiBhmB,EAAUgmB,eAG3ByG,EAAyBrB,EAE7B,GADAA,EAA0B,IAAItO,IAC1B2P,MACF,IAA2C,IAAAC,EAAAhL,EAAA+K,GAAsBE,EAAAD,EAAA9K,QAAA+K,EAAA9K,KAAA8K,EAAAD,EAAA9K,OAAE,CAA1D,IAAAgL,EAAA7K,EAAA4K,EAAAttB,MAAA,GAACwtB,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GACvBxB,EAAwBtpB,IACtB+qB,EACAC,qGAMN,IAAI5B,EAAqBlrB,EAAUkrB,mBACnC,GAAIA,EAAoB,CACtBnb,OAAO/P,EAAU2B,GAAGvB,EAAAqB,YAAY6qB,WAChC,IACIk+C,EADmBz6D,OAAOiW,GAAgBrgB,YACHiE,eACvC6gE,EAAyBD,EAAoB7lE,OACjDoL,OAAO06D,GAA0Bv/C,EAAmBvmB,QACpD,IAAK,IAAIvG,EAAI,EAAGA,EAAIqsE,IAA0BrsE,EAC5CgtB,EAAwBtpB,IACtB0oE,EAAoBpsE,GAAGO,KAAKmF,KAC5BonB,EAAmB9sB,SAIvB2R,QAAQmb,GAIV,IAEIw/C,EAFAC,EAAgBhlE,EAAYuH,UAC5B09D,EAAyBjlE,EAAYiE,eAEzC,GAAI5H,IAAkB0oE,EAA2B1oE,EAAc2C,QAAS,CACtEoL,OAAO66D,GAA0BF,GAA4BE,EAAuBjmE,QACpF,IAASvG,EAAI,EAAGA,EAAIssE,IAA4BtsE,EAC9CgtB,EAAwBtpB,IACA8oE,EAAwBxsE,GAAGO,KAAKmF,KACtD9B,EAAc5D,SAIlB2R,QAAQ66D,GAA2D,GAAjCA,EAAuBjmE,QAI3D,IAAI08D,EAA8B,KAC9B70C,EAAwB,KAC5B,GAAI8vC,EAAY,CAOd,KANA+E,EAAgBtjE,KAAKslB,aACnBtT,OAAOiW,GACPkF,EACAE,EACAg+C,IAEkB,OAAO,KAC3B58C,EAAW60C,EAAcl/D,KACzBipB,EAAwBtpB,IAAI,OAAQ0qB,GAItC,IAiBItpB,EAjBA2nE,EAAsBF,EAAc1nE,WACpC6nE,EAA0BD,EAAoBlmE,OAC9CooB,EAAiB,IAAIlZ,MAAYi3D,GACjChvB,EAAiB,IAAIjoC,MAAci3D,GACnC/uB,EAAqB,EACzB,IAAS39C,EAAI,EAAGA,EAAI0sE,IAA2B1sE,EAAG,CAChD,IAAI2sE,EAAuBF,EAAoBzsE,GAC3C2sE,EAAqBhoE,eAAiBoX,EAAA1K,cAAcguC,UACtD1B,EAAqB39C,EAAI,GAE3B,IAAIm8D,EAAWxqD,OAAOg7D,EAAqB5oE,MACvC6qB,EAAgBjvB,KAAK+uD,YAAYyN,EAAUnvC,EAAyBg+C,GACxE,IAAKp8C,EAAe,OAAO,KAC3BD,EAAe3uB,GAAK4uB,EACpB8uB,EAAe19C,GAAK2sE,EAAqBpsE,KAAKmF,KAIhD,GAAI9D,EAAU2B,GAAGvB,EAAAqB,YAAYokB,KAC3B3iB,EAAagX,EAAAuE,KAAKc,UACb,GAAIvf,EAAU2B,GAAGvB,EAAAqB,YAAYmQ,aAClC1O,EAAa6M,OAAOsxD,GAAel/D,SAC9B,CACDo4D,EAAWxqD,OAAO46D,EAAcznE,YAApC,IACIf,EAAOpE,KAAK+uD,YAAYyN,EAAUnvC,EAAyBg+C,GAC/D,IAAKjnE,EAAM,OAAO,KAClBe,EAAaf,EAGf,IAAI+K,EAAY,IAAIgN,EAAA0hC,UAAU7uB,EAAgB7pB,EAAYspB,GAC1Dtf,EAAU4uC,eAAiBA,EAC3B5uC,EAAU6uC,mBAAqBA,EAE/B,IAAIx7B,EAAevgB,EAAUugB,aAa7B,OAZIkpD,EAAY9kE,SAAQ4b,GAAgB,IAAMkpD,EAAc,KAC5DrmD,EAAW,IAAIykC,EAAA18B,SACbnrB,EACAugB,EACArT,EACAm0D,GAEIr7C,EACJoF,GAEFprB,EAAUirB,UAAUnpB,IAAI2nE,EAAarmD,GACrCrlB,KAAK2rB,QAAQxM,gBAAgBpb,IAAIye,EAAc6C,GACxCA,GAITvF,EAAA7d,UAAAgrE,yBAAA,SACEhrE,EACAgC,EACAonE,QAAA,IAAAA,MAAyBD,EAAWE,QAEpCt5D,OAAO/P,EAAU2B,GAAGvB,EAAAqB,YAAY6qB,WAChC,IAAItG,EAAiBjW,OAAO/P,EAAUgmB,gBAEtC,IAAMhkB,IAAiBA,EAAc2C,OAAS,OAAO3E,EAErD,IAAIglB,EAAahlB,EAAUglB,WACvBimD,EAAa/wD,EAAAyhC,cAAc35C,GAC3BkpE,EAAmB,IAAIrjB,EAAAnhC,kBACzB3oB,KAAK2rB,QACL1E,EACAgB,EAAezF,aAAe,IAAM0qD,EAAa,IAAM7qE,EAAAoW,mBAAqBwO,EAC5EhlB,EAAU2F,YACVqgB,EACAhmB,EAAUymB,gBAKZ,OAHAykD,EAAiB1pE,MAAQxB,EAAUwB,MACnC0pE,EAAiB/jD,aAAennB,EAAUmnB,aAC1C+jD,EAAiBhgD,mBAAqBlpB,EAC/BkpE,GAITrtD,EAAA7d,UAAAkuD,iCAAA,SACEluD,EACA86D,EACA1vC,EACAygC,EACAud,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IAAI1O,EAAuC,KAC3C,OAAI36D,EAAU2B,GAAGvB,EAAAqB,YAAYiiB,WAC3B3T,OAA4B,MAArB+qD,GAAyD,GAA5BA,EAAkBn2D,QACtDg2D,EAAwB58D,KAAKg9D,qBAC3BhrD,OAAO/P,EAAU2F,YAAYiE,gBAC7BkxD,EACA1vC,EACAygC,EACAud,IAIGrrE,KAAK8lB,gBACV7jB,EACA26D,EACAvvC,EACAg+C,GANmC,MAWvCvrD,EAAA7d,UAAAqjB,aAAA,SACErjB,EACAgC,EACAopB,EACAg+C,4BADA,IAAAh+C,MAAA,WACA,IAAAg+C,MAAyBD,EAAWE,QAEpC,IAAII,EAAcznE,EAAgBkY,EAAAyhC,cAAc35C,GAAiB,GAG7DohB,EAAWpjB,EAAUirB,UAAUhsB,IAAIwqE,GACvC,GAAIrmD,EAAU,OAAOA,EAGrB,IAAIqJ,EAAyBrB,EAE7B,GADAA,EAA0B,IAAItO,IAC1B2P,MACF,IAA2C,IAAA+C,EAAA9N,EAAA+K,GAAsBgD,EAAAD,EAAA5N,QAAA6N,EAAA5N,KAAA4N,EAAAD,EAAA5N,OAAE,CAA1D,IAAA6oC,EAAA1oC,EAAA0N,EAAApwB,MAAA,GAACwtB,EAAA49B,EAAA,GAAe39B,EAAA29B,EAAA,GACvBr/B,EAAwBtpB,IAAI+qB,EAAeC,qGAM/C,IAAInnB,EAAc3F,EAAU2F,YAC5B,GAAI3D,EAAe,CACjB,IAAI4H,EAAiBjE,EAAYiE,eAC7BuhE,EAAwBvhE,EAAejF,OACvCymE,EAAsBppE,EAAc2C,OACxCoL,OAAOq7D,GAAuBD,GAC9B,IAAK,IAAI/sE,EAAI,EAAGA,EAAIgtE,IAAuBhtE,EACzCgtB,EAAwBtpB,IAAI8H,EAAexL,GAAGO,KAAKmF,KAAM9B,EAAc5D,SAGzE2R,OAA4C,GAArCpK,EAAYiE,eAAejF,QAIpC,IAAI0mE,EAA0B,KAC9B,GAAI1lE,EAAYlD,YAAa,CAC3B,IAAI6oE,EAAgBvtE,KAAK+uD,YACvBnnD,EAAYlD,YACZ2oB,EACAg+C,GAEF,IAAKkC,EAAe,OAAO,KAC3B,KAAMD,EAAYC,EAAcnxB,gBAO9B,OANIivB,GAAcD,EAAWE,QAC3BtrE,KAAK2rB,QAAQ3P,MACXE,EAAAnC,eAAe+K,sCACfld,EAAYlD,YAAYP,OAGrB,KAET,GAAImpE,EAAUxmD,aAAagjC,EAAAjrC,eAAepM,QAOxC,OANI44D,GAAcD,EAAWE,QAC3BtrE,KAAK2rB,QAAQ3P,MACXE,EAAAnC,eAAeyzD,yCACf5lE,EAAYlD,YAAYP,MAAOmpE,EAAU9qD,cAGtC,KAET,GAAI8qD,EAAUxmD,aAAagjC,EAAAjrC,eAAenM,YAAczQ,EAAU6kB,aAAagjC,EAAAjrC,eAAenM,WAO5F,OANI24D,GAAcD,EAAWE,QAC3BtrE,KAAK2rB,QAAQ3P,MACXE,EAAAnC,eAAe0zD,+DACfrxD,EAAA5Z,MAAMgZ,KAAK5T,EAAYhH,KAAKuD,MAAOyD,EAAYlD,YAAYP,QAGxD,KAKX,IAAI8iB,EAAahlB,EAAUglB,WACvBzE,EAAevgB,EAAUugB,aACzBkpD,EAAY9kE,SACdqgB,GAAc,IAAMykD,EAAc,IAClClpD,GAAgB,IAAMkpD,EAAc,MAEtCrmD,EAAW,IAAIykC,EAAA14B,MAAMnvB,EAAWglB,EAAYzE,EAAcve,EAAeqpE,IAChEjgD,wBAA0BA,EACnCprB,EAAUirB,UAAUnpB,IAAI2nE,EAAarmD,GACrCrlB,KAAK2rB,QAAQxM,gBAAgBpb,IAAIye,EAAc6C,GAG/C,IAAI8L,EAAoB,EACxB,GAAIm8C,EAAW,CACb,GAAIA,EAAUvhE,QAAS,CAChBsZ,EAAStZ,UAASsZ,EAAStZ,QAAU,IAAIgT,SAC9C,IAA4B,IAAA4tC,EAAAhpC,EAAA2pD,EAAUvhE,QAAQtC,UAAQmjD,EAAAD,EAAA9oC,QAAA+oC,EAAA9oC,KAAA8oC,EAAAD,EAAA9oC,OAAE,CAAnD,IAAI6pD,EAAe9gB,EAAAtrD,MACtB+jB,EAAStZ,QAAQhI,IAAI2pE,EAAgBzmD,WAAYymD,sGAGrDv8C,EAAem8C,EAAUh8C,oBAI3B,GAAIrvB,EAAU2mB,qBAAsB,CAClC,IAAI+kD,EAAqB3tE,KAAKitE,yBAC5BhrE,EAAU2mB,qBACV3kB,EACAonE,GAEF,IAAKsC,EAAoB,OAAO,KAChCtoD,EAASkM,oBAAsBvxB,KAAK8lB,gBAAgB6nD,EAAoB,KAAM,KAAMtC,GAItF,GAAIppE,EAAUsmB,oBACZ,IAAmB,IAAAskC,EAAAlpC,EAAA1hB,EAAUsmB,gBAAgB9e,UAAQ8jD,EAAAV,EAAAhpC,QAAA0pC,EAAAzpC,KAAAypC,EAAAV,EAAAhpC,OAAE,CAAlD,IAAIjN,EAAM22C,EAAAjsD,MACb,OAAQsV,EAAOhU,MAGb,KAAKknD,EAAAlrC,YAAYoS,gBACV3L,EAAStZ,UAASsZ,EAAStZ,QAAU,IAAIgT,KAC9C,IAAI6lD,EAAoChuD,EAAQhP,YAC5C88D,EAAyB,KAE7B,GAAKE,EAAiBxgE,KAiBpBsgE,EAAY1kE,KAAK+uD,YACf6V,EAAiBxgE,KACjBihB,EAASgI,wBACTg+C,OApBwB,CAC1B,GAAkB,OAAdiC,GAA4C,OAAtBA,EAAUvhE,QAAkB,CACpD,IAAI6hE,EAAYN,EAAUvhE,QAAQ7K,IAAqB0V,EAAQqQ,YAC3D2mD,IAAcA,EAAUhqE,GAAGvB,EAAAqB,YAAY88C,WACzCxuC,OAAO47D,EAAUhrE,MAAQknD,EAAAlrC,YAAYsS,OACrCwzC,EAAoBkJ,EAAWxpE,MAG9BsgE,GACC2G,GAAcD,EAAWE,QAC3BtrE,KAAKgc,MACHE,EAAAnC,eAAei1C,cACf4V,EAAiBhkE,KAAKuD,MAAM8qD,OAWpC,IAAKyV,EAAW,MAChB,IAAImJ,EAAgB,IAAI/jB,EAAA74B,MACNra,EAChB4L,EAAengB,EAAAoW,mBAAsC7B,EAAQqQ,WAC7Dy9C,EACAE,EACAv/C,GAEF,OAAQq/C,EAAU/pC,UAChB,KAAK,EAAG,MACR,KAAK,EAAwB,EAAfxJ,KAAoBA,EAAc,MAChD,KAAK,EAAwB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IAAuB,MACvE,KAAK,EAAwB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IAAuB,MACvE,QAASnf,QAAO,GAElB67D,EAAc18C,aAAeA,EAC7BA,GAAgBuzC,EAAU/pC,SAC1BtV,EAAStZ,QAAQhI,IAAI6S,EAAOqQ,WAAY4mD,GACxC,MAIF,KAAK/jB,EAAAlrC,YAAY6G,mBACVJ,EAAStZ,UAASsZ,EAAStZ,QAAU,IAAIgT,KAC9C,IAAIouD,EAAmBntE,KAAKitE,yBACPr2D,EACnB3S,EACAonE,GAEF,IAAK8B,EAAkB,OAAO,KAC9BA,EAAiB3qD,aAAeA,EAAengB,EAAAoW,mBAAqB00D,EAAiBlmD,WACrF5B,EAAStZ,QAAQhI,IAAI6S,EAAOqQ,WAAYkmD,GACxC,MAIF,KAAKrjB,EAAAlrC,YAAY+K,SACVtE,EAAStZ,UAASsZ,EAAStZ,QAAU,IAAIgT,KAC9C,IAAI6K,EAAkB5X,OAAkB4E,EAAQgT,iBAC5CC,EAA6BjT,EAAQiT,gBACrCikD,EAAmB,IAAIhkB,EAAAhgC,SACzB9pB,KAAK2rB,QACL/U,EAAOqQ,WACPzE,EAAengB,EAAAoW,mBAAqB7B,EAAOqQ,WAC3ChlB,GAEE8rE,EAAyB/tE,KAAKitE,yBAChCrjD,EACA3lB,EACAonE,GAEF,IAAK0C,EAAwB,OAAO,KAIpC,GAHAA,EACGvrD,aAAeA,EAAengB,EAAAoW,mBAAqBs1D,EAAuB9mD,WAC7E6mD,EAAiBlkD,gBAAkBmkD,EAC/BlkD,EAAiB,CACnB,IAAImkD,GAAyBhuE,KAAKitE,yBAChCpjD,EACA5lB,EACAonE,GAEF,IAAK2C,GAAwB,OAAO,KACpCA,GACGxrD,aAAeA,EAAengB,EAAAoW,mBAAqBu1D,GAAuB/mD,WAC7E6mD,EAAiBjkD,gBAAkBmkD,GAErC3oD,EAAStZ,QAAQhI,IAAI6S,EAAOqQ,WAAY6mD,GACxC,MAEF,QAAS97D,QAAO,sGAMtBqT,EAASiM,oBAAsBH,MAG/B,IAAsC,IAAAq8B,GAAA7pC,EAAA1hB,EAAUinB,oBAAkBwkC,GAAAF,GAAA3pC,QAAA6pC,GAAA5pC,KAAA4pC,GAAAF,GAAA3pC,OAAE,CAA3D,IAAA8pC,GAAA3pC,EAAA0pC,GAAApsD,MAAA,GAACsB,GAAA+qD,GAAA,GAAMsgB,GAAAtgB,GAAA,GACd37C,OAAOpP,IAAQknD,EAAA7tC,aAAa0C,SAC5B,IAAI47C,QAAgB,EACpB,GAAI0T,GAAkBrqE,GAAGvB,EAAAqB,YAAY6qB,UAAW,CAC9C,IAAI2/C,GAAkBluE,KAAKitE,yBACzBgB,GACAhqE,EACAonE,GAEF,IAAK6C,GAAiB,SACtB3T,GAAmBv6D,KAAK8lB,gBAAgBooD,GAAiB,KAAM,KAAM7C,QAErE9Q,GAAmBv6D,KAAK8lB,gBAAgBmoD,GAAmB,KAAM,KAAM5C,GAEzE,GAAK9Q,GAAL,CACA,IAAItxC,GAAY5D,EAAS4D,UACpBA,KAAW5D,EAAS4D,UAAYA,GAAY,IAAIlK,KACrDkK,GAAUllB,IAAInB,GAAM23D,2GAEtB,OAAOl1C,GAITvF,EAAA7d,UAAAivD,8BAAA,SACEjvD,EACA86D,EACA1vC,EACAygC,EACAud,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IAAI1O,EAAuC,KAG3C,GAAI36D,EAAU2B,GAAGvB,EAAAqB,YAAYiiB,SAAU,CACrC,IAAIwoD,EAAqBlsE,EAAU2F,YAAYiE,eAC3CuhE,EAAwBe,EAAmBvnE,OAC/CoL,OAAOo7D,EAAwB,GAC/B,IAAIC,EAA4C,OAAtBtQ,EAA6BA,EAAkBn2D,OAAS,EAClF,GAAIwmE,GAAyBC,EAO3B,OANIhC,GAAcD,EAAWE,QAC3BtrE,KAAKgc,MACHE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAOipE,EAAsBvyD,SAAS,IAAKwyD,EAAoBxyD,SAAS,KAGhF,KAST,KAPA+hD,EAAwB58D,KAAKg9D,qBAC3BmR,EACApR,EACA1vC,EACAygC,EACAud,IAE0B,OAAO,UAInC,GAA0B,OAAtBtO,GAA8BA,EAAkBn2D,OAOlD,OANIykE,GAAcD,EAAWE,QAC3BtrE,KAAKgc,MACHE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGzB,KAKX,OAAOxiB,KAAKslB,aACVrjB,EACA26D,EACAvvC,EACAg+C,IAGNvrD,EA1kCA,CAA8B5D,EAAAP,mBAAjBjc,EAAAogB,iIC9Db3f,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IAEA,IAAAkc,EAAAlc,EAAA,GAEAkc,EAAA4pB,OAAOhkC,UAAUuxC,OAAS,WACxB,OAAO,IAAI46B,SAASnoC,OAAOjmC,KAAK2tB,KAAK0gD,YAGvChyD,EAAA4pB,OAAOhkC,UAAUwxC,QAAU,WACzB,OAAO,IAAI26B,SAASnoC,OAAOjmC,KAAK2tB,KAAK2gD,+BCpBvC,SAAA1f,GAEA,MAAAwf,EAAAxf,EAAA2f,UAAApuE,EAAA,IAGA,QAAAyB,KAFAgtD,EAAAwf,WAEAA,GACAxsE,EAAAsL,WAAA,cAAAtL,EAAAsL,WAAA,gBAAA0hD,EAAAhtD,GAAAwsE,EAAAxsE,IAKAgtD,EAAA4f,kBAAAJ,EAAAK,QACA7f,EAAA8f,cAAAN,EAAAO,MACA/f,EAAAggB,cAAAR,EAAAS,SACAjgB,EAAAkgB,QAAA,SAAAvlC,EAAAwR,GAAqCqzB,EAAAW,OAAAxlC,GAAAwR,GACrC6T,EAAAogB,OAAA,SAAAzlC,GAA+B,OAAA6kC,EAAAW,OAAAxlC,qCCf/B5pC,EAAAD,QAAAO,oBCAA,SAAA2uD,GAEA,IAAAqgB,EAAA,oBAAAlzB,qBAAA,IAAA6S,MAAA7uD,KA6IA,SAAAmvE,IACA/pD,MAAAgqD,kBACAhqD,MAAAgqD,kBAAAnvE,KAAAkvE,GAEAlvE,KAAAovE,MAAApvE,KAAAY,KAAA,KAAAZ,KAAAoa,QAAA,UAAA+K,OAAAiqD,MAWA,SAAAC,EAAAj1D,GACApa,KAAAoa,WAAA,mBACA+K,MAAAgqD,kBACAhqD,MAAAgqD,kBAAAnvE,KAAAqvE,GAEArvE,KAAAovE,MAAApvE,KAAAY,KAAA,KAAAZ,KAAAoa,QAAA,UAAA+K,OAAAiqD,MA/JAH,EAAAK,WAAA,EAEAvuE,OAAAwuE,iBACAN,EAAA,YAAA3tE,GAA0C,OAAAA,GAAA,SAE1Cg4B,WAAgBh4B,OAAA,IAAAkuE,UAAA,GAChBj2C,WAAgBj4B,MAAA,IAAAkuE,UAAA,KAGhBzuE,OAAAwuE,iBACAN,EAAA,aAAA3tE,GAA4C,OAAAA,GAAA,SAE5Cg4B,WAAgBh4B,OAAA,MAAAkuE,UAAA,GAChBj2C,WAAgBj4B,MAAA,MAAAkuE,UAAA,KAGhBzuE,OAAAwuE,iBACAN,EAAA,IAAAA,EAAA,eAAA3tE,GAAmE,SAAAA,IAEnEg4B,WAAgBh4B,OAAA,WAAAkuE,UAAA,GAChBj2C,WAAgBj4B,MAAA,WAAAkuE,UAAA,KAGhBzuE,OAAAwuE,iBACAN,EAAA,YAAA3tE,GAA0C,WAAAA,IAE1Cg4B,WAAgBh4B,MAAA,EAAAkuE,UAAA,GAChBj2C,WAAgBj4B,MAAA,IAAAkuE,UAAA,KAGhBzuE,OAAAwuE,iBACAN,EAAA,aAAA3tE,GAA4C,aAAAA,IAE5Cg4B,WAAgBh4B,MAAA,EAAAkuE,UAAA,GAChBj2C,WAAgBj4B,MAAA,MAAAkuE,UAAA,KAGhBzuE,OAAAwuE,iBACAN,EAAA,IAAAA,EAAA,eAAA3tE,GAAmE,OAAAA,IAAA,IAEnEg4B,WAAgBh4B,MAAA,EAAAkuE,UAAA,GAChBj2C,WAAgBj4B,MAAA,WAAAkuE,UAAA,KAGhBzuE,OAAAwuE,iBACAN,EAAA,cAAA3tE,GAA8C,QAAAA,IAE9Cg4B,WAAgBh4B,MAAA,EAAAkuE,UAAA,GAChBj2C,WAAgBj4B,MAAA,EAAAkuE,UAAA,KAGhBzuE,OAAAwuE,iBACAN,EAAA,aAAA3tE,GAA4C,OAAAmuE,KAAAC,OAAApuE,KAE5Cg4B,WAAgBh4B,MAAAmuE,KAAAC,QAAA,eAAAF,UAAA,GAChBj2C,WAAgBj4B,MAAAmuE,KAAAC,OAAA,eAAAF,UAAA,GAChBG,oBAAyBruE,MAAAmuE,KAAAC,OAAA,iBAAAF,UAAA,GACzBI,kBAAuBtuE,OAAA,SAAAkuE,UAAA,GACvBK,kBAAuBvuE,MAAA,SAAAkuE,UAAA,GACvBM,SAAcxuE,MAAAmuE,KAAAC,OAAA,cAAAF,UAAA,KAGdzuE,OAAAwuE,iBACAN,EAAA,aAAA3tE,GAA4C,OAAAA,IAE5Cg4B,WAAgBh4B,OAAA,uBAAAkuE,UAAA,GAChBj2C,WAAgBj4B,MAAA,uBAAAkuE,UAAA,GAChBG,oBAAyBruE,MAAA,wBAAAkuE,UAAA,GACzBI,kBAAuBtuE,OAAA,iBAAAkuE,UAAA,GACvBK,kBAAuBvuE,MAAA,iBAAAkuE,UAAA,GACvBM,SAAcxuE,MAAA,sBAAAkuE,UAAA,KAGdP,EAAA,IAAAQ,KAAAM,MAEAd,EAAA,aAAA3tE,GACA,IAAAZ,EAAA+uE,KAAAM,MAAAzuE,MACA,OAAAA,EAAA,GAAAZ,KAGAuuE,EAAA,gBAAA3tE,GAGA,kBADAA,GAAA,WADAA,OAAA,gBACAA,IAAA,eACAA,IAAA,oBAGA2tE,EAAA,cAAA3tE,EAAA62B,GAEA,OAAA72B,IADA62B,GAAA,IACA72B,IAAA,GAAA62B,GAGA82C,EAAA,cAAA3tE,EAAA62B,GAEA,OAAA72B,KADA62B,GAAA,IACA72B,GAAA,GAAA62B,GAGA82C,EAAA,IAAAQ,KAAAO,IAEAf,EAAA,IAAAQ,KAAAhkB,IAEAwjB,EAAA,IAAAQ,KAAA56C,IAEAo6C,EAAA,KAAAQ,KAAAtzB,KAEA8yB,EAAA,MAAAQ,KAAAQ,MAGAhB,EAAA,iBAAA3tE,GACA,WAAAmuE,KAAAO,IAAA1uE,EAAAmuE,KAAAS,MAAA5uE,IACA,EAAAmuE,KAAAU,MAAA,GAAA7uE,GAEAmuE,KAAAU,MAAA7uE,IAGA2tE,EAAA,gBAAAlhE,EAAAC,EAAA5D,GACA,OAAAA,EAAA2D,EAAAC,GAGAihE,EAAA,KAAAQ,KAAAW,KAEAnB,EAAA,MAAAQ,KAAAS,MAEAjB,EAAA,kBAAAoB,EAAAC,GACA,OAAAb,KAAAO,IAAAK,GAAAZ,KAAAc,KAAAD,IAGArB,EAAA,eAAA3tE,GACA,IAAAkiD,EAAAliD,GAAA,WACAmiD,GAAA,SAAAniD,IAAA,EAIA,OAFAkiD,GADAliD,EAAAkiD,EAAAC,IACA,WACAA,GAAA,MAAAniD,IAAA,KAIA2tE,EAAA,iBAAA3tE,GACA,OAAAA,GAAA,QAAAA,GAAA,iBAAAA,GAUA4tE,EAAAjtE,UAAAlB,OAAAY,OAAAwjB,MAAAljB,WACAitE,EAAAjtE,UAAArB,KAAA,mBACAsuE,EAAAjtE,UAAAmY,QAAA,cAEA60D,EAAA,uBACA,UAAAC,GAWAG,EAAAptE,UAAAlB,OAAAY,OAAAwjB,MAAAljB,WACAotE,EAAAptE,UAAArB,KAAA,iBAEAquE,EAAA,gBAAAuB,EAAAp2D,GACA,GAAAo2D,EAAA,OAAAA,EACA,UAAAnB,EAAAj1D,IAGA60D,EAAA,oBAAA3tE,GACA,OAAAA,GAGA2tE,EAAA,kBAAAnjD,EAAA2kD,GACA,SAAAC,SAAA5kD,OAAA27C,IAGAhsB,OAAA,uBAAAD,GACA,OAAAC,OAAA+L,aAAAj2C,MAAAkqC,OAAAD,IAGAC,OAAA,wBAAAD,GACA,OAAAC,OAAAk1B,cAAAp/D,MAAAkqC,OAAAD,IAGAyzB,EAAA,UAAA2B,OAAAC,UAEA5B,EAAA,iBAAAryD,GACA,uBAAAA,GAGAqyD,EAAA,qBAAAryD,GACA,uBAAAA,GAAA,iBAAAA,GAGAqyD,EAAA,kBAAAryD,GACA,uBAAAA,gBAAA6+B,QAGAwzB,EAAA,QAAAn5D,MAAAyzD,QAEA0F,EAAA,mBAAA9oE,GACA,OAAAA,GAGA8oE,EAAA,cAAAoB,EAAAC,GACA,OAAAD,EAAAC,GAGArB,EAAA,eAAAoB,EAAAC,GACA,OAAAb,KAAAC,OAAAW,EAAAC,IAGArB,EAAA,OAAAQ,KAEAR,EAAA,aACA,IAAA6B,EAAA,IAAA19B,WAAA,GACA29B,EAAA,EACA,OACAtqC,SAAAwoC,EAAA,4BAAA72C,GACA,KAAAA,KAAA,YACA,GAAA24C,EAAA34C,EAAA04C,EAAAlqE,OAAA,CACA,IAAAoqE,EAAAF,GACAA,EAAA,IAAA19B,WAAAq8B,KAAAhkB,IAAA,MAAAqlB,EAAAlqE,OAAAwxB,EAAA,EAAA04C,EAAAlqE,UACA7C,IAAAitE,GAEA,IAAAznC,EAAAwnC,EAEA,OADA,GAAAA,GAAA34C,KAAA24C,EAAA,KAAAA,IACAxnC,GAEArW,KAAA+7C,EAAA,wBAAA1lC,KACA0nC,KAAAhC,EAAA,wBAAAiC,EAAAC,EAAA/4C,GACA04C,EAAAM,WAAAF,EAAAC,IAAA/4C,MAjBA,GAsBA62C,EAAA,MAAAA,EAAA,kBAAA1lC,EAAAjoC,EAAAykC,GACA+qC,KAAAvnC,GAAA,EAAAxD,IAAAzkC,GAGA2tE,EAAA,KAAAA,EAAA,iBAAA1lC,EAAAxD,GACA,OAAA+qC,KAAAvnC,GAAA,EAAAxD,yCCvPA,SAAA6oB,GAAA,MAAA7+B,EAAA,IAAAqyC,aAAA,GACAtyC,EAAA,IAAAqyC,aAAApyC,EAAA+V,QACAlW,EAAA,IAAAsyC,WAAAnyC,EAAA+V,QAEA8oB,EAAAyiB,WAAA,SAAA/vE,GAEA,OADAwuB,EAAA,GAAAxuB,EACAsuB,EAAA,IAGAg/B,EAAA0iB,WAAA,SAAAhwE,GAEA,OADAsuB,EAAA,GAAAtuB,EACAwuB,EAAA,IAGA8+B,EAAA2iB,WAAA,SAAAjwE,GAEA,OADAyuB,EAAA,GAAAzuB,EACAogB,QAAAkO,EAAA,GAAAA,EAAA,KAGAg/B,EAAA4iB,WAAA,SAAAlwE,GAGA,OAFAsuB,EAAA,GAAAogB,QAAA1uC,GACAsuB,EAAA,GAAAqgB,SAAA3uC,GACAyuB,EAAA,wCCtBA,SAAA6+B,GAAA,MAAA6iB,EAAA7iB,EAAA6iB,MAAAtxE,EAAA,IAEAyuD,EAAA36B,SAAAw9C,EAAAC,KAEA9iB,EAAA56B,QAAAy9C,EAAAE,IAEA/iB,EAAAltC,QAAA,SAAAkwD,EAAAC,GACA,OAAAJ,EAAAK,SAAAF,EAAAC,IAGAjjB,EAAA5e,QAAA,SAAA1uC,GACA,OAAAA,EAAAywE,KAGAnjB,EAAA3e,SAAA,SAAA3uC,GACA,OAAAA,EAAA0wE,MAGApjB,EAAArG,QAAA,SAAAlhD,EAAAC,GACA,OAAAD,EAAA2jB,IAAA1jB,IAGAsnD,EAAA2R,QAAA,SAAAl5D,EAAAC,GACA,OAAAD,EAAA4qE,IAAA3qE,IAGAsnD,EAAApG,QAAA,SAAAnhD,EAAAC,GACA,OAAAD,EAAA6qE,IAAA5qE,IAGAsnD,EAAAujB,QAAA,SAAA9qE,EAAAC,GACA,OAAAD,EAAA+qE,IAAA9qE,IAGAsnD,EAAAyjB,UAAA,SAAAhrE,EAAAC,GACA,OAAAD,EAAAirE,aAAAF,IAAA9qE,EAAAgrE,cAAAC,YAGA3jB,EAAA4jB,QAAA,SAAAnrE,EAAAC,GACA,OAAAD,EAAAorE,IAAAnrE,IAGAsnD,EAAA8jB,UAAA,SAAArrE,EAAAC,GACA,OAAAD,EAAAirE,aAAAG,IAAAnrE,EAAAgrE,cAAAC,YAGA3jB,EAAA96B,QAAA,SAAAzsB,EAAAC,GACA,OAAAD,EAAAsrE,IAAArrE,IAGAsnD,EAAAz6B,OAAA,SAAA9sB,EAAAC,GACA,OAAAD,EAAAurE,GAAAtrE,IAGAsnD,EAAAikB,QAAA,SAAAxrE,EAAAC,GACA,OAAAD,EAAAyrE,IAAAxrE,IAGAsnD,EAAA76B,QAAA,SAAA1sB,EAAAC,GACA,OAAAD,EAAA0rE,IAAAzrE,IAGAsnD,EAAAokB,QAAA,SAAA3rE,EAAAC,GACA,OAAAD,EAAA4rE,IAAA3rE,IAGAsnD,EAAA1C,UAAA,SAAA7kD,EAAAC,GACA,OAAAD,EAAA6rE,KAAA5rE,IAGAsnD,EAAAx6B,QAAA,SAAA9yB,GACA,OAAAA,EAAA6xE,OAGAvkB,EAAAwkB,OAAA,SAAA/rE,EAAAC,GACA,OAAAD,EAAAgsE,GAAA/rE,IAGAsnD,EAAA/6B,OAAA,SAAAxsB,EAAAC,GACA,OAAAD,EAAAisE,GAAAhsE,IAGAsnD,EAAA5C,UAAA,SAAA1qD,EAAAiwD,GACAv/C,OAAAu/C,GAAA,IAAAA,IAAA,IACA,IAAAgE,EAAAkc,EAAA8B,QAAAhiB,EAAA,GACA,OAAAjwD,EAAA0pB,IAAAuqC,GAAAod,IAAApd,EAAA4d,QAGAvkB,EAAA4R,UAAA,SAAAl/D,GACA,WAAAA,EAAA0wE,MAAA1wE,EAAAywE,KAAA,GAAAzwE,EAAAywE,KAAApxD,GAAA4Y,YACA,IAAAj4B,EAAA0wE,MAAA1wE,EAAAywE,KAAApxD,GAAA2Y,WAAAh4B,EAAAywE,IAAA,GAGAnjB,EAAA8R,WAAA,SAAAp/D,GACA,WAAAA,EAAA0wE,MAAA1wE,EAAAywE,KAAA,GAAAzwE,EAAAywE,KAAAnxD,IAAA2Y,YACA,IAAAj4B,EAAA0wE,MAAA1wE,EAAAywE,KAAAnxD,IAAA0Y,WAAAh4B,EAAAywE,IAAA,GAGAnjB,EAAAgS,WAAA,SAAAt/D,GACA,WAAAA,EAAA0wE,MAAA1wE,EAAAywE,KAAA,IACA,IAAAzwE,EAAA0wE,MAAA1wE,EAAAywE,IAAA,GAGAnjB,EAAA6R,UAAA,SAAAn/D,GACA,WAAAA,EAAA0wE,MAAA1wE,EAAAywE,KAAA,GAAAzwE,EAAAywE,KAAA/wD,GAAAuY,WAGAq1B,EAAA+R,WAAA,SAAAr/D,GACA,WAAAA,EAAA0wE,MAAA1wE,EAAAywE,KAAA,GAAAzwE,EAAAywE,KAAA9wD,IAAAsY,WAGAq1B,EAAAiS,WAAA,SAAAv/D,GACA,WAAAA,EAAA0wE,MAGApjB,EAAAkS,YAAA,SAAAx/D,GACA,WAAAA,EAAA0wE,OAAA,IAAA1wE,EAAAywE,KAAA,IAAAzwE,EAAAywE,MAGA,MAAAyB,EAAA/B,EAAAgC,WAAAnyD,IAAAsuD,kBACA8D,EAAAjC,EAAAgC,WAAAnyD,IAAAuuD,kBAEAjhB,EAAAmS,WAAA,SAAAz/D,GACA,OAAAA,EAAAqyE,IAAAH,IAAAlyE,EAAAsyE,IAAAF,IAGA,MAAAG,EAAApC,EAAAgC,WAAAlyD,IAAAquD,kBACAkE,EAAArC,EAAAgC,WAAAlyD,IAAAsuD,kBAEAjhB,EAAAqS,WAAA,SAAA3/D,GACA,OAAAA,EAAAqyE,IAAAE,IAAAvyE,EAAAsyE,IAAAE,IAGAllB,EAAAoS,WAAA,SAAA1/D,GACA,OAAAstD,EAAA6gB,KAAAC,OAAApuE,EAAAyyE,aAGAnlB,EAAAsS,WAAA,SAAA5/D,GACA,OAAAA,EAAAyyE,YAGAnlB,EAAAolB,cAAA,SAAA1yE,EAAA2yE,GACA,OAAAA,EAAA3yE,EAAAgxE,aAAAhxE,GAAAuZ,SAAA,sCC9IAlb,EAAAD,QAAA+xE,EAKA,IAAAyC,EAAA,KAEA,IACAA,EAAA,IAAAC,YAAAC,SAAA,IAAAD,YAAAluC,OAAA,IAAAmN,YACA,u2BACS1zC,QACR,MAAAo8C,IAcD,SAAA21B,EAAAM,EAAAC,EAAAiC,GAMAj0E,KAAA+xE,IAAA,EAAAA,EAMA/xE,KAAAgyE,KAAA,EAAAA,EAMAhyE,KAAAi0E,aAoCA,SAAAI,EAAAC,GACA,YAAAA,KAAA,YAXA7C,EAAAxvE,UAAAsyE,WAEAxzE,OAAAC,eAAAywE,EAAAxvE,UAAA,cAAqDX,OAAA,IAkBrDmwE,EAAA4C,SAOA,IAAAG,KAOAC,KAQA,SAAAlB,EAAAjyE,EAAA2yE,GACA,IAAAK,EAAAI,EAAAC,EACA,OAAAV,GAEAU,EAAA,IADArzE,KAAA,IACAA,EAAA,OACAozE,EAAAD,EAAAnzE,IAEAozE,GAEAJ,EAAAxC,EAAAxwE,GAAA,EAAAA,GAAA,WACAqzE,IACAF,EAAAnzE,GAAAgzE,GACAA,IAGAK,GAAA,MADArzE,GAAA,IACAA,EAAA,OACAozE,EAAAF,EAAAlzE,IAEAozE,GAEAJ,EAAAxC,EAAAxwE,IAAA,WACAqzE,IACAH,EAAAlzE,GAAAgzE,GACAA,GAmBA,SAAAb,EAAAnyE,EAAA2yE,GACA,GAAAW,MAAAtzE,GACA,OAAA2yE,EAAAY,EAAAnD,EACA,GAAAuC,EAAA,CACA,GAAA3yE,EAAA,EACA,OAAAuzE,EACA,GAAAvzE,GAAAwzE,EACA,OAAAC,MACK,CACL,GAAAzzE,IAAA0zE,EACA,OAAA17C,EACA,GAAAh4B,EAAA,GAAA0zE,EACA,OAAAz7C,EAEA,OAAAj4B,EAAA,EACAmyE,GAAAnyE,EAAA2yE,GAAAgB,MACAnD,EAAAxwE,EAAA4zE,EAAA,EAAA5zE,EAAA4zE,EAAA,EAAAjB,GAmBA,SAAAnC,EAAAqD,EAAAC,EAAAnB,GACA,WAAAxC,EAAA0D,EAAAC,EAAAnB,GA5CAxC,EAAA8B,UAkCA9B,EAAAgC,aAsBAhC,EAAAK,WASA,IAAAuD,EAAA5F,KAAA6F,IASA,SAAAC,EAAAzpD,EAAAmoD,EAAAxD,GACA,OAAA3kD,EAAAllB,OACA,MAAAue,MAAA,gBACA,WAAA2G,GAAA,aAAAA,GAAA,cAAAA,GAAA,cAAAA,EACA,OAAA4lD,EASA,GARA,iBAAAuC,GAEAxD,EAAAwD,EACAA,GAAA,GAEAA,OAEAxD,KAAA,IACA,MAAAA,EACA,MAAA+E,WAAA,SAEA,IAAArzE,EACA,IAAAA,EAAA2pB,EAAA2pD,QAAA,QACA,MAAAtwD,MAAA,mBACA,OAAAhjB,EACA,OAAAozE,EAAAzpD,EAAAjW,UAAA,GAAAo+D,EAAAxD,GAAAwE,MAQA,IAHA,IAAAS,EAAAjC,EAAA4B,EAAA5E,EAAA,IAEA1kD,EAAA2lD,EACArxE,EAAA,EAAmBA,EAAAyrB,EAAAllB,OAAgBvG,GAAA,GACnC,IAAA+3B,EAAAq3C,KAAA56C,IAAA,EAAA/I,EAAAllB,OAAAvG,GACAiB,EAAAovE,SAAA5kD,EAAAjW,UAAAxV,IAAA+3B,GAAAq4C,GACA,GAAAr4C,EAAA,GACA,IAAAu9C,EAAAlC,EAAA4B,EAAA5E,EAAAr4C,IACArM,IAAAmmD,IAAAyD,GAAA3qD,IAAAyoD,EAAAnyE,SAGAyqB,GADAA,IAAAmmD,IAAAwD,IACA1qD,IAAAyoD,EAAAnyE,IAIA,OADAyqB,EAAAkoD,WACAloD,EAoBA,SAAA6pD,EAAA76B,EAAAk5B,GACA,uBAAAl5B,EACA04B,EAAA14B,EAAAk5B,GACA,iBAAAl5B,EACAw6B,EAAAx6B,EAAAk5B,GAEAnC,EAAA/2B,EAAAg3B,IAAAh3B,EAAAi3B,KAAA,kBAAAiC,IAAAl5B,EAAAk5B,UAfAxC,EAAA8D,aAyBA9D,EAAAmE,YAUA,IAcAV,EAAAW,WAOAf,EAAAI,IAOAF,EAAAF,EAAA,EAOAgB,EAAAvC,EA5BA,OAkCA7B,EAAA6B,EAAA,GAMA9B,EAAAC,OAMA,IAAAmD,EAAAtB,EAAA,MAMA9B,EAAAoD,QAMA,IAAAlD,EAAA4B,EAAA,GAMA9B,EAAAE,MAMA,IAAAoE,EAAAxC,EAAA,MAMA9B,EAAAsE,OAMA,IAAAC,EAAAzC,GAAA,GAMA9B,EAAAuE,UAMA,IAAAz8C,EAAAu4C,GAAA,iBAMAL,EAAAl4C,YAMA,IAAAw7C,EAAAjD,GAAA,SAMAL,EAAAsD,qBAMA,IAAAz7C,EAAAw4C,EAAA,kBAMAL,EAAAn4C,YAMA,IAAA28C,EAAAxE,EAAAxvE,UAMAg0E,EAAAC,MAAA,WACA,OAAAl2E,KAAAi0E,SAAAj0E,KAAA+xE,MAAA,EAAA/xE,KAAA+xE,KAOAkE,EAAAlC,SAAA,WACA,OAAA/zE,KAAAi0E,UACAj0E,KAAAgyE,OAAA,GAAAkD,GAAAl1E,KAAA+xE,MAAA,GACA/xE,KAAAgyE,KAAAkD,GAAAl1E,KAAA+xE,MAAA,IAUAkE,EAAAp7D,SAAA,SAAA41D,GAEA,IADAA,KAAA,IACA,MAAAA,EACA,MAAA+E,WAAA,SACA,GAAAx1E,KAAAm2E,SACA,UACA,GAAAn2E,KAAAo2E,aAAA,CACA,GAAAp2E,KAAAqzE,GAAA/5C,GAAA,CAGA,IAAA+8C,EAAA5C,EAAAhD,GACA2B,EAAApyE,KAAAoyE,IAAAiE,GACAC,EAAAlE,EAAAF,IAAAmE,GAAApE,IAAAjyE,MACA,OAAAoyE,EAAAv3D,SAAA41D,GAAA6F,EAAAJ,QAAAr7D,SAAA41D,GAEA,UAAAzwE,KAAAi1E,MAAAp6D,SAAA41D,GAQA,IAHA,IAAAiF,EAAAjC,EAAA4B,EAAA5E,EAAA,GAAAzwE,KAAAi0E,UACAsC,EAAAv2E,KACA+rB,EAAA,KACA,CACA,IAAAyqD,EAAAD,EAAAnE,IAAAsD,GAEAe,GADAF,EAAAtE,IAAAuE,EAAAtE,IAAAwD,IAAAQ,UAAA,GACAr7D,SAAA41D,GAEA,IADA8F,EAAAC,GACAL,SACA,OAAAM,EAAA1qD,EAEA,KAAA0qD,EAAA7vE,OAAA,GACA6vE,EAAA,IAAAA,EACA1qD,EAAA,GAAA0qD,EAAA1qD,IASAkqD,EAAAS,YAAA,WACA,OAAA12E,KAAAgyE,MAOAiE,EAAAU,oBAAA,WACA,OAAA32E,KAAAgyE,OAAA,GAOAiE,EAAAW,WAAA,WACA,OAAA52E,KAAA+xE,KAOAkE,EAAAY,mBAAA,WACA,OAAA72E,KAAA+xE,MAAA,GAOAkE,EAAAa,cAAA,WACA,GAAA92E,KAAAo2E,aACA,OAAAp2E,KAAAqzE,GAAA/5C,GAAA,GAAAt5B,KAAAi1E,MAAA6B,gBAEA,IADA,IAAA/7B,EAAA,GAAA/6C,KAAAgyE,KAAAhyE,KAAAgyE,KAAAhyE,KAAA+xE,IACAgF,EAAA,GAAsBA,EAAA,GACtB,IAAAh8B,EAAA,GAAAg8B,GAD+BA,KAG/B,UAAA/2E,KAAAgyE,KAAA+E,EAAA,GAAAA,EAAA,GAOAd,EAAAE,OAAA,WACA,WAAAn2E,KAAAgyE,MAAA,IAAAhyE,KAAA+xE,KAOAkE,EAAAe,IAAAf,EAAAE,OAMAF,EAAAG,WAAA,WACA,OAAAp2E,KAAAi0E,UAAAj0E,KAAAgyE,KAAA,GAOAiE,EAAAgB,WAAA,WACA,OAAAj3E,KAAAi0E,UAAAj0E,KAAAgyE,MAAA,GAOAiE,EAAAiB,MAAA,WACA,aAAAl3E,KAAA+xE,MAOAkE,EAAAkB,OAAA,WACA,aAAAn3E,KAAA+xE,MAQAkE,EAAAmB,OAAA,SAAA9iD,GAGA,OAFA+/C,EAAA//C,KACAA,EAAAshD,EAAAthD,KACAt0B,KAAAi0E,WAAA3/C,EAAA2/C,UAAAj0E,KAAAgyE,OAAA,OAAA19C,EAAA09C,OAAA,SAEAhyE,KAAAgyE,OAAA19C,EAAA09C,MAAAhyE,KAAA+xE,MAAAz9C,EAAAy9C,MASAkE,EAAA5C,GAAA4C,EAAAmB,OAOAnB,EAAAoB,UAAA,SAAA/iD,GACA,OAAAt0B,KAAAqzE,GAAA/+C,IASA2hD,EAAAqB,IAAArB,EAAAoB,UAQApB,EAAA3C,GAAA2C,EAAAoB,UAOApB,EAAAsB,SAAA,SAAAjjD,GACA,OAAAt0B,KAAAw3E,KAAAljD,GAAA,GASA2hD,EAAAwB,GAAAxB,EAAAsB,SAOAtB,EAAAyB,gBAAA,SAAApjD,GACA,OAAAt0B,KAAAw3E,KAAAljD,IAAA,GASA2hD,EAAArC,IAAAqC,EAAAyB,gBAQAzB,EAAA0B,GAAA1B,EAAAyB,gBAOAzB,EAAA2B,YAAA,SAAAtjD,GACA,OAAAt0B,KAAAw3E,KAAAljD,GAAA,GASA2hD,EAAA4B,GAAA5B,EAAA2B,YAOA3B,EAAA6B,mBAAA,SAAAxjD,GACA,OAAAt0B,KAAAw3E,KAAAljD,IAAA,GASA2hD,EAAAtC,IAAAsC,EAAA6B,mBAQA7B,EAAA8B,GAAA9B,EAAA6B,mBAQA7B,EAAA+B,QAAA,SAAA1jD,GAGA,GAFA+/C,EAAA//C,KACAA,EAAAshD,EAAAthD,IACAt0B,KAAAqzE,GAAA/+C,GACA,SACA,IAAA2jD,EAAAj4E,KAAAo2E,aACA8B,EAAA5jD,EAAA8hD,aACA,OAAA6B,IAAAC,GACA,GACAD,GAAAC,EACA,EAEAl4E,KAAAi0E,SAGA3/C,EAAA09C,OAAA,EAAAhyE,KAAAgyE,OAAA,GAAA19C,EAAA09C,OAAAhyE,KAAAgyE,MAAA19C,EAAAy9C,MAAA,EAAA/xE,KAAA+xE,MAAA,OAFA/xE,KAAAiyE,IAAA39C,GAAA8hD,cAAA,KAYAH,EAAAuB,KAAAvB,EAAA+B,QAMA/B,EAAAkC,OAAA,WACA,OAAAn4E,KAAAi0E,UAAAj0E,KAAAqzE,GAAA/5C,GACAA,EACAt5B,KAAAmzE,MAAAnoD,IAAA2mD,IAQAsE,EAAAhB,IAAAgB,EAAAkC,OAOAlC,EAAAjrD,IAAA,SAAAotD,GACA/D,EAAA+D,KACAA,EAAAxC,EAAAwC,IAIA,IAAAC,EAAAr4E,KAAAgyE,OAAA,GACAsG,EAAA,MAAAt4E,KAAAgyE,KACAuG,EAAAv4E,KAAA+xE,MAAA,GACAyG,EAAA,MAAAx4E,KAAA+xE,IAEA0G,EAAAL,EAAApG,OAAA,GACA0G,EAAA,MAAAN,EAAApG,KACA2G,EAAAP,EAAArG,MAAA,GAGA6G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAYA,OAVAD,IADAC,GAAAP,GAHA,MAAAJ,EAAArG,QAIA,GAGA8G,IADAC,GAAAP,EAAAI,KACA,GAGAC,IADAC,GAAAP,EAAAI,KACA,GAEAE,GAAAP,EAAAI,EAEA3G,GANAgH,GAAA,QAMA,IATAC,GAAA,QAQAH,GAAA,QACA,IAHAC,GAAA,OAGA74E,KAAAi0E,WAQAgC,EAAA+C,SAAA,SAAAC,GAGA,OAFA5E,EAAA4E,KACAA,EAAArD,EAAAqD,IACAj5E,KAAAgrB,IAAAiuD,EAAAhE,QASAgB,EAAAhE,IAAAgE,EAAA+C,SAOA/C,EAAAiD,SAAA,SAAAC,GACA,GAAAn5E,KAAAm2E,SACA,OAAAzE,EAKA,GAJA2C,EAAA8E,KACAA,EAAAvD,EAAAuD,IAGAjF,EAKA,OAAApC,EAJAoC,EAAAhC,IAAAlyE,KAAA+xE,IACA/xE,KAAAgyE,KACAmH,EAAApH,IACAoH,EAAAnH,MACAkC,EAAAkF,WAAAp5E,KAAAi0E,UAGA,GAAAkF,EAAAhD,SACA,OAAAzE,EACA,GAAA1xE,KAAAqzE,GAAA/5C,GACA,OAAA6/C,EAAAjC,QAAA59C,EAAAo4C,EACA,GAAAyH,EAAA9F,GAAA/5C,GACA,OAAAt5B,KAAAk3E,QAAA59C,EAAAo4C,EAEA,GAAA1xE,KAAAo2E,aACA,OAAA+C,EAAA/C,aACAp2E,KAAAi1E,MAAA/C,IAAAiH,EAAAlE,OAEAj1E,KAAAi1E,MAAA/C,IAAAiH,GAAAlE,MACK,GAAAkE,EAAA/C,aACL,OAAAp2E,KAAAkyE,IAAAiH,EAAAlE,aAGA,GAAAj1E,KAAAy3E,GAAA3B,IAAAqD,EAAA1B,GAAA3B,GACA,OAAArC,EAAAzzE,KAAA+zE,WAAAoF,EAAApF,WAAA/zE,KAAAi0E,UAKA,IAAAoE,EAAAr4E,KAAAgyE,OAAA,GACAsG,EAAA,MAAAt4E,KAAAgyE,KACAuG,EAAAv4E,KAAA+xE,MAAA,GACAyG,EAAA,MAAAx4E,KAAA+xE,IAEA0G,EAAAU,EAAAnH,OAAA,GACA0G,EAAA,MAAAS,EAAAnH,KACA2G,EAAAQ,EAAApH,MAAA,GACAsH,EAAA,MAAAF,EAAApH,IAEA6G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAqBA,OAnBAD,IADAC,GAAAP,EAAAa,KACA,GAGAR,IADAC,GAAAP,EAAAc,KACA,GACAP,GAAA,MAEAD,IADAC,GAAAN,EAAAG,KACA,GAGAC,IADAC,GAAAP,EAAAe,KACA,GACAR,GAAA,MAEAD,IADAC,GAAAN,EAAAI,KACA,GACAE,GAAA,MAEAD,IADAC,GAAAL,EAAAE,KACA,GAEAE,GAAAP,EAAAgB,EAAAf,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA3G,GAZAgH,GAAA,QAYA,IAlBAC,GAAA,QAiBAH,GAAA,QACA,IAHAC,GAAA,OAGA74E,KAAAi0E,WASAgC,EAAA/D,IAAA+D,EAAAiD,SAQAjD,EAAAqD,OAAA,SAAAC,GAGA,GAFAlF,EAAAkF,KACAA,EAAA3D,EAAA2D,IACAA,EAAApD,SACA,MAAAhxD,MAAA,oBAaA,IAWAq0D,EAAAjD,EAAAkD,EArBA,GAAAvF,EAIA,OAAAl0E,KAAAi0E,WACA,aAAAj0E,KAAAgyE,OACA,IAAAuH,EAAAxH,MAAA,IAAAwH,EAAAvH,KAUAF,GANA9xE,KAAAi0E,SAAAC,EAAAwF,MAAAxF,EAAAyF,OACA35E,KAAA+xE,IACA/xE,KAAAgyE,KACAuH,EAAAxH,IACAwH,EAAAvH,MAEAkC,EAAAkF,WAAAp5E,KAAAi0E,UARAj0E,KAWA,GAAAA,KAAAm2E,SACA,OAAAn2E,KAAAi0E,SAAAY,EAAAnD,EAEA,GAAA1xE,KAAAi0E,SA6BK,CAKL,GAFAsF,EAAAtF,WACAsF,IAAAjH,cACAiH,EAAA1B,GAAA73E,MACA,OAAA60E,EACA,GAAA0E,EAAA1B,GAAA73E,KAAAkzE,KAAA,IACA,OAAA6C,EACA0D,EAAA5E,MAtCA,CAGA,GAAA70E,KAAAqzE,GAAA/5C,GACA,OAAAigD,EAAAlG,GAAA1B,IAAA4H,EAAAlG,GAAA2C,GACA18C,EACAigD,EAAAlG,GAAA/5C,GACAq4C,GAIA6H,EADAx5E,KAAAizE,IAAA,GACAb,IAAAmH,GAAAxG,IAAA,IACAM,GAAA3B,GACA6H,EAAAnD,aAAAzE,EAAAqE,GAEAO,EAAAv2E,KAAAiyE,IAAAsH,EAAArH,IAAAsH,IACAC,EAAAD,EAAAxuD,IAAAurD,EAAAnE,IAAAmH,UAIS,GAAAA,EAAAlG,GAAA/5C,GACT,OAAAt5B,KAAAi0E,SAAAY,EAAAnD,EACA,GAAA1xE,KAAAo2E,aACA,OAAAmD,EAAAnD,aACAp2E,KAAAi1E,MAAA7C,IAAAmH,EAAAtE,OACAj1E,KAAAi1E,MAAA7C,IAAAmH,GAAAtE,MACS,GAAAsE,EAAAnD,aACT,OAAAp2E,KAAAoyE,IAAAmH,EAAAtE,aACAwE,EAAA/H,EAmBA,IADA6E,EAAAv2E,KACAu2E,EAAA5C,IAAA4F,IAAA,CAGAC,EAAA/J,KAAAhkB,IAAA,EAAAgkB,KAAAQ,MAAAsG,EAAAxC,WAAAwF,EAAAxF,aAWA,IAPA,IAAA6F,EAAAnK,KAAAtzB,KAAAszB,KAAAvF,IAAAsP,GAAA/J,KAAAoK,KACAC,EAAAF,GAAA,KAAAvE,EAAA,EAAAuE,EAAA,IAIAG,EAAAtG,EAAA+F,GACAQ,EAAAD,EAAA7H,IAAAqH,GACAS,EAAA5D,cAAA4D,EAAAnC,GAAAtB,IAGAyD,GADAD,EAAAtG,EADA+F,GAAAM,EACA95E,KAAAi0E,WACA/B,IAAAqH,GAKAQ,EAAA5D,WACA4D,EAAApI,GAEA8H,IAAAzuD,IAAA+uD,GACAxD,IAAAtE,IAAA+H,GAEA,OAAAP,GASAxD,EAAA7D,IAAA6D,EAAAqD,OAOArD,EAAAgE,OAAA,SAAAV,GAKA,OAJAlF,EAAAkF,KACAA,EAAA3D,EAAA2D,IAGArF,EAOApC,GANA9xE,KAAAi0E,SAAAC,EAAAgG,MAAAhG,EAAAiG,OACAn6E,KAAA+xE,IACA/xE,KAAAgyE,KACAuH,EAAAxH,IACAwH,EAAAvH,MAEAkC,EAAAkF,WAAAp5E,KAAAi0E,UAGAj0E,KAAAiyE,IAAAjyE,KAAAoyE,IAAAmH,GAAArH,IAAAqH,KASAtD,EAAAxD,IAAAwD,EAAAgE,OAQAhE,EAAAM,IAAAN,EAAAgE,OAMAhE,EAAA9C,IAAA,WACA,OAAArB,GAAA9xE,KAAA+xE,KAAA/xE,KAAAgyE,KAAAhyE,KAAAi0E,WAQAgC,EAAAtD,IAAA,SAAAr+C,GAGA,OAFA+/C,EAAA//C,KACAA,EAAAshD,EAAAthD,IACAw9C,EAAA9xE,KAAA+xE,IAAAz9C,EAAAy9C,IAAA/xE,KAAAgyE,KAAA19C,EAAA09C,KAAAhyE,KAAAi0E,WAQAgC,EAAArD,GAAA,SAAAt+C,GAGA,OAFA+/C,EAAA//C,KACAA,EAAAshD,EAAAthD,IACAw9C,EAAA9xE,KAAA+xE,IAAAz9C,EAAAy9C,IAAA/xE,KAAAgyE,KAAA19C,EAAA09C,KAAAhyE,KAAAi0E,WAQAgC,EAAAnD,IAAA,SAAAx+C,GAGA,OAFA+/C,EAAA//C,KACAA,EAAAshD,EAAAthD,IACAw9C,EAAA9xE,KAAA+xE,IAAAz9C,EAAAy9C,IAAA/xE,KAAAgyE,KAAA19C,EAAA09C,KAAAhyE,KAAAi0E,WAQAgC,EAAAmE,UAAA,SAAAC,GAGA,OAFAhG,EAAAgG,KACAA,IAAAnE,SACA,IAAAmE,GAAA,IACAr6E,KACAq6E,EAAA,GACAvI,EAAA9xE,KAAA+xE,KAAAsI,EAAAr6E,KAAAgyE,MAAAqI,EAAAr6E,KAAA+xE,MAAA,GAAAsI,EAAAr6E,KAAAi0E,UAEAnC,EAAA,EAAA9xE,KAAA+xE,KAAAsI,EAAA,GAAAr6E,KAAAi0E,WASAgC,EAAAlD,IAAAkD,EAAAmE,UAOAnE,EAAAqE,WAAA,SAAAD,GAGA,OAFAhG,EAAAgG,KACAA,IAAAnE,SACA,IAAAmE,GAAA,IACAr6E,KACAq6E,EAAA,GACAvI,EAAA9xE,KAAA+xE,MAAAsI,EAAAr6E,KAAAgyE,MAAA,GAAAqI,EAAAr6E,KAAAgyE,MAAAqI,EAAAr6E,KAAAi0E,UAEAnC,EAAA9xE,KAAAgyE,MAAAqI,EAAA,GAAAr6E,KAAAgyE,MAAA,OAAAhyE,KAAAi0E,WASAgC,EAAAhD,IAAAgD,EAAAqE,WAOArE,EAAAsE,mBAAA,SAAAF,GAIA,GAHAhG,EAAAgG,KACAA,IAAAnE,SAEA,KADAmE,GAAA,IAEA,OAAAr6E,KAEA,IAAAgyE,EAAAhyE,KAAAgyE,KACA,OAAAqI,EAAA,GAEAvI,EADA9xE,KAAA+xE,MACAsI,EAAArI,GAAA,GAAAqI,EAAArI,IAAAqI,EAAAr6E,KAAAi0E,UAEAnC,EADS,KAAAuI,EACTrI,EAEAA,IAAAqI,EAAA,GAFA,EAAAr6E,KAAAi0E,WAYAgC,EAAA/C,KAAA+C,EAAAsE,mBAQAtE,EAAAuE,MAAAvE,EAAAsE,mBAMAtE,EAAA1D,SAAA,WACA,OAAAvyE,KAAAi0E,SAEAnC,EAAA9xE,KAAA+xE,IAAA/xE,KAAAgyE,MAAA,GADAhyE,MAQAi2E,EAAA3D,WAAA,WACA,OAAAtyE,KAAAi0E,SACAj0E,KACA8xE,EAAA9xE,KAAA+xE,IAAA/xE,KAAAgyE,MAAA,IAQAiE,EAAAwE,QAAA,SAAA9C,GACA,OAAAA,EAAA33E,KAAA06E,YAAA16E,KAAA26E,aAOA1E,EAAAyE,UAAA,WACA,IAAA7I,EAAA7xE,KAAAgyE,KACAJ,EAAA5xE,KAAA+xE,IACA,OACA,IAAAH,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,GACA,IAAAC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,KAQAoE,EAAA0E,UAAA,WACA,IAAA9I,EAAA7xE,KAAAgyE,KACAJ,EAAA5xE,KAAA+xE,IACA,OACAF,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,IAWAH,EAAAmJ,UAAA,SAAAvxC,EAAA4qC,EAAA0D,GACA,OAAAA,EAAAlG,EAAAoJ,YAAAxxC,EAAA4qC,GAAAxC,EAAAqJ,YAAAzxC,EAAA4qC,IASAxC,EAAAoJ,YAAA,SAAAxxC,EAAA4qC,GACA,WAAAxC,EACApoC,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACA4qC,IAUAxC,EAAAqJ,YAAA,SAAAzxC,EAAA4qC,GACA,WAAAxC,EACApoC,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAA,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACA4qC,qRC7xCA,IAAA/3D,EAAA/b,EAAA,GAIAic,EAAAjc,EAAA,GASAgc,EAAAhc,EAAA,GAMAkc,EAAAlc,EAAA,GAcA2pD,EAAA3pD,EAAA,GAWAoc,EAAApc,EAAA,IAIAkC,EAAAlC,EAAA,GAKA,SAAA88D,EACE8d,EACA94E,EACAgC,EACA0kC,EACA0sB,EACAvH,GAEA,IAEIzzC,EACAC,EACAC,EACA04B,EALAtzC,EAASo7E,EAASp7E,OAWtB,OAAQsC,EAAUugB,cAIhB,IAAK,YACH,IAAIpe,EAAO42E,EAAqBD,EAAU92E,EAAe0kC,EAAUmlB,GAEnE,OADAitB,EAASjwB,YAAc3uC,EAAAuE,KAAKW,KACvBjd,EACEA,EAAKR,GAAE,KAAwBQ,EAAKR,GAAE,KACzCjE,EAAO8nC,UAAU,GACjB9nC,EAAO8nC,UAAU,GAHH9nC,EAAOmtC,oBAK3B,IAAK,UACC1oC,EAAO42E,EAAqBD,EAAU92E,EAAe0kC,EAAUmlB,GAEnE,OADAitB,EAASjwB,YAAc3uC,EAAAuE,KAAKW,KACvBjd,EACEA,EAAKR,GAAE,GACVjE,EAAO8nC,UAAU,GACjB9nC,EAAO8nC,UAAU,GAHH9nC,EAAOmtC,oBAK3B,IAAK,WACC1oC,EAAO42E,EAAqBD,EAAU92E,EAAe0kC,EAAUmlB,GAEnE,OADAitB,EAASjwB,YAAc3uC,EAAAuE,KAAKW,KACvBjd,EACEA,EAAKR,GAAE,GACVjE,EAAO8nC,UAAU,GACjB9nC,EAAO8nC,UAAU,GAHH9nC,EAAOmtC,oBAK3B,IAAK,cACC1oC,EAAO42E,EAAqBD,EAAU92E,EAAe0kC,EAAUmlB,GAEnE,OADAitB,EAASjwB,YAAc3uC,EAAAuE,KAAKW,KACvBjd,GACL22E,EAASjwB,YAAc3uC,EAAAuE,KAAKW,KACrBjd,EAAKR,GAAE,KACVjE,EAAO8nC,UAAU,GACjB9nC,EAAO8nC,UAAU,IAJH9nC,EAAOmtC,oBAM3B,IAAK,WACC1oC,EAAO42E,EAAqBD,EAAU92E,EAAe0kC,EAAUmlB,GAEnE,GADAitB,EAASjwB,YAAc3uC,EAAAuE,KAAKW,MACvBjd,EAAM,OAAOzE,EAAOmtC,oBAEzB,GADI+P,EAAYz4C,EAAKg4C,eACN,CACb,IAAI38B,EAAiBs7D,EAASpvD,QAAQlM,eACtC,GAAIA,GAAkBo9B,EAAUjrB,eAAenS,GAAiB,OAAO9f,EAAO8nC,UAAU,GAE1F,OAAO9nC,EAAO8nC,UAAU,GAE1B,IAAK,UACCrjC,EAAO42E,EAAqBD,EAAU92E,EAAe0kC,EAAUmlB,GAEnE,OADAitB,EAASjwB,YAAc3uC,EAAAuE,KAAKW,KACvBjd,EAEe,OADhBy4C,EAAYz4C,EAAKg4C,iBAC6D,MAAtDS,EAAU9qB,eAAe+3B,EAAA7tC,aAAaY,aAC9Dld,EAAO8nC,UAAU,GACjB9nC,EAAO8nC,UAAU,GAJH9nC,EAAOmtC,oBAM3B,IAAK,YAQH,GAPAiuC,EAASjwB,YAAc3uC,EAAAuE,KAAKW,KACxBpd,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,OAKX,OAJAm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,IAAI1kC,EAAU2yE,EAASl7D,SAASg7C,kBAAkBlyB,EAAS,GAAIoyC,EAASxoD,gBAAiBhW,EAAA6uD,WAAW6P,SACpG,OAAOt7E,EAAO8nC,UAAUr/B,EAAU,EAAI,GAExC,IAAK,aAQH,GAPA2yE,EAASjwB,YAAc3uC,EAAAuE,KAAKW,KACxBpd,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,OAKX,OAJAm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,IAAIouC,EAAOH,EAAS7rB,4BAA4BvmB,EAAS,GAAIxsB,EAAAuE,KAAKG,IAAG,GAErE,OADAk6D,EAASjwB,YAAc3uC,EAAAuE,KAAKW,KACrB1hB,EAAO8nC,UAAUprB,EAAA0Y,gBAAgBmmD,IAAS7+D,EAAA2Y,aAAa6C,MAAQ,EAAI,GAK5E,IAAK,MACH,GAAuB,GAAnB8Q,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKG,IAAG,KAEzD,OAAQk6D,EAASjwB,YAAYloD,MAC3B,OACA,OACA,OACA,OACEqwC,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQG,OAAQ1e,GACzC,MAEF,QACA,OACA,OACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQG,OAAQ1e,GACzC,MAEF,OACE,GAAI0gE,EAASjwB,YAAYlnD,GAAE,KAAuB,CAChDm3E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBACb,MAIJ,OACEmG,EAAMtzC,EAAO0oC,YACX0yC,EAASt6D,QAAQkB,SACbtF,EAAAuc,QAAQuiD,OACR9+D,EAAAuc,QAAQG,OACZ1e,GAEF,MAEF,OACA,OACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQuiD,OAAQ9gE,GACzC,MAEF,QACE0gE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBtK,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKG,IAAG,KAEzD,OAAQk6D,EAASjwB,YAAYloD,MAC3B,OACA,OACA,OACA,OACEqwC,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQI,OAAQ3e,GACzC,MAEF,QACA,OACA,OACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQI,OAAQ3e,GACzC,MAEF,OACE,GAAI0gE,EAASjwB,YAAYlnD,GAAE,KAAuB,CAChDm3E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBACb,MAIJ,OACEmG,EAAMtzC,EAAO0oC,YACX0yC,EAASt6D,QAAQkB,SACbtF,EAAAuc,QAAQwiD,OACR/+D,EAAAuc,QAAQI,OACZ3e,GAEF,MAEF,OACA,OACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQwiD,OAAQ/gE,GACzC,MAEF,QACE0gE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAET,IAAK,SACH,GAAuB,GAAnBtK,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKG,IAAG,KAEzD,OAAQk6D,EAASjwB,YAAYloD,MAC3B,OACA,OACA,OACA,OACEqwC,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQK,UAAW5e,GAC5C,MAEF,QACA,OACA,OACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQK,UAAW5e,GAC5C,MAEF,OACE,GAAI0gE,EAASjwB,YAAYlnD,GAAE,KAAuB,CAChDm3E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBACb,MAIJ,OACEmG,EAAMtzC,EAAO0oC,YACX0yC,EAASt6D,QAAQkB,SACbtF,EAAAuc,QAAQyiD,UACRh/D,EAAAuc,QAAQK,UACZ5e,GAEF,MAEF,OACA,OACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQyiD,UAAWhhE,GAC5C,MAEF,QACE0gE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBtK,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKG,IAAG,KAGzD,OADAvG,EAAOygE,EAASvrB,kBAAkB7mB,EAAS,GAAIoyC,EAASjwB,YAAW,KAC3DiwB,EAASjwB,YAAYloD,MAC3B,OACA,OACA,OACA,OACA,QACEqwC,EAAM8nC,EAASrkB,uBACb/2D,EAAO6oC,aAAansB,EAAAqZ,SAAS4lD,QAASjhE,EAAMC,GAC5CygE,EAASjwB,aAIb,OACA,OACE7X,EAAMtzC,EAAO6oC,aAAansB,EAAAqZ,SAAS4lD,QAASjhE,EAAMC,GAClD,MAEF,OACE,GAAIygE,EAASjwB,YAAYlnD,GAAE,KAAuB,CAChDm3E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBACb,MAIJ,OACEmG,EAAMtzC,EAAO6oC,aACXuyC,EAASt6D,QAAQkB,SACbtF,EAAAqZ,SAAS6lD,QACTl/D,EAAAqZ,SAAS4lD,QACbjhE,EACAC,GAEF,MAEF,OACA,OACE24B,EAAMtzC,EAAO6oC,aAAansB,EAAAqZ,SAAS6lD,QAASlhE,EAAMC,GAClD,MAEF,QACEygE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBtK,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKG,IAAG,KAGzD,OADAvG,EAAOygE,EAASvrB,kBAAkB7mB,EAAS,GAAIoyC,EAASjwB,YAAW,KAC3DiwB,EAASjwB,YAAYloD,MAC3B,OACA,OACA,OACA,OACA,QACEqwC,EAAM8nC,EAASrkB,uBACb/2D,EAAO6oC,aAAansB,EAAAqZ,SAAS8lD,QAASnhE,EAAMC,GAC5CygE,EAASjwB,aAEX,MAEF,OACA,OACE7X,EAAMtzC,EAAO6oC,aAAansB,EAAAqZ,SAAS8lD,QAASnhE,EAAMC,GAClD,MAEF,OACE,GAAIygE,EAASjwB,YAAYlnD,GAAE,KAAuB,CAChDm3E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBACb,MAIJ,OACEmG,EAAMtzC,EAAO6oC,aACXuyC,EAASt6D,QAAQkB,SACbtF,EAAAqZ,SAAS+lD,QACTp/D,EAAAqZ,SAAS8lD,QACbnhE,EACAC,GAEF,MAEF,OACA,OACE24B,EAAMtzC,EAAO6oC,aAAansB,EAAAqZ,SAAS+lD,QAASphE,EAAMC,GAClD,MAEF,QACEygE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBtK,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKa,IAAG,KAEzD,OAAQw5D,EAASjwB,YAAYloD,MAC3B,OACA,OACA,OAEE,IAAIoxD,EAAY+mB,EAASxoD,gBAAgBpC,oBAAoBhU,EAAAuE,KAAKG,KAAK,GACvEoyB,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAegrB,EAAUjnC,MAAO1S,GACvC1a,EAAO6oC,aAAansB,EAAAqZ,SAASmjC,OAC3Bl5D,EAAO8nC,UAAU,GACjB9nC,EAAOmpC,eAAekrB,EAAUjnC,MAAO1Q,EAAAsT,WAAWC,MAEpDjwB,EAAO6oC,aAAansB,EAAAqZ,SAASqB,MAC3Bp3B,EAAOmpC,eAAekrB,EAAUjnC,MAAO1Q,EAAAsT,WAAWC,KAClDjwB,EAAO8nC,UAAU,KAGrB,MAEF,OACMusB,EAAY+mB,EAASxoD,gBAAgBpC,oBAAoB4qD,EAASt6D,QAAQW,WAAW,GACzF6xB,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAegrB,EAAUjnC,MAAO1S,GACvC1a,EAAO6oC,aACLuyC,EAASt6D,QAAQkB,SACbtF,EAAAqZ,SAASojC,OACTz8C,EAAAqZ,SAASmjC,OACbkiB,EAASt6D,QAAQW,UAAUk8B,aAAa39C,GACxCA,EAAOmpC,eAAekrB,EAAUjnC,MAAOguD,EAASt6D,QAAQ2sC,iBAE1DztD,EAAO6oC,aACLuyC,EAASt6D,QAAQkB,SACbtF,EAAAqZ,SAASuB,MACT5a,EAAAqZ,SAASqB,MACbp3B,EAAOmpC,eAAekrB,EAAUjnC,MAAOguD,EAASt6D,QAAQ2sC,gBACxD2tB,EAASt6D,QAAQW,UAAUk8B,aAAa39C,KAG5C,MAEF,OACMq0D,EAAY+mB,EAASxoD,gBAAgBpC,oBAAoBhU,EAAAuE,KAAKI,KAAK,GACvEmyB,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAegrB,EAAUjnC,MAAO1S,GACvC1a,EAAO6oC,aAAansB,EAAAqZ,SAASojC,OAC3Bn5D,EAAOkoC,UAAU,EAAG,GACpBloC,EAAOmpC,eAAekrB,EAAUjnC,MAAO1Q,EAAAsT,WAAWE,MAEpDlwB,EAAO6oC,aAAansB,EAAAqZ,SAASuB,MAC3Bt3B,EAAOmpC,eAAekrB,EAAUjnC,MAAO1Q,EAAAsT,WAAWE,KAClDlwB,EAAOkoC,UAAU,EAAG,KAGxB,MAEF,OACE,GAAIkzC,EAASjwB,YAAYlnD,GAAE,KAAuB,CAChDm3E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBACb,MAIJ,OACA,OACA,OACA,OACA,QACEmG,EAAM54B,EACN,MAEF,QACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQ8iD,OAAQrhE,GACzC,MAEF,QACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQ+iD,OAAQthE,GACzC,MAEF,QACE44B,EAAMtzC,EAAOmtC,oBACb,MAEF,QACEiuC,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBtK,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKa,IAAG,KAGzD,OADAjH,EAAOygE,EAASvrB,kBAAkB7mB,EAAS,GAAIoyC,EAASjwB,YAAW,KAC3DiwB,EAASjwB,YAAYloD,MAC3B,OACA,OACA,OACE,IAAIwsB,EAAO2rD,EAASxoD,gBAAgBnD,KAChCwsD,EAAab,EAASxoD,gBAAgBhD,aACxCwrD,EAASjwB,aACR17B,EAAK0F,YAAYza,EAAM0gE,EAASjwB,cAE/B+wB,EAAad,EAASxoD,gBAAgBpC,oBACxC4qD,EAASjwB,aACR17B,EAAK0F,YAAYxa,EAAMygE,EAASjwB,cAEnCiwB,EAASxoD,gBAAgBrC,cAAc0rD,GACvC3oC,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAe4yC,EAAW7uD,MAAO1S,GACxC1a,EAAOqpC,eAAe6yC,EAAW9uD,MAAOzS,GACxC3a,EAAO6oC,aAAansB,EAAAqZ,SAASqB,MAC3Bp3B,EAAOmpC,eAAe8yC,EAAW7uD,MAAO1Q,EAAAsT,WAAWC,KACnDjwB,EAAOmpC,eAAe+yC,EAAW9uD,MAAO1Q,EAAAsT,WAAWC,OAGvD,MAEF,OACA,OACA,OACA,QACMR,EAAO2rD,EAASxoD,gBAAgBnD,KAChCwsD,EAAab,EAASxoD,gBAAgBhD,aACxCwrD,EAASjwB,aACR17B,EAAK0F,YAAYza,EAAM0gE,EAASjwB,cAE/B+wB,EAAad,EAASxoD,gBAAgBpC,oBACxC4qD,EAASjwB,aACR17B,EAAK0F,YAAYxa,EAAMygE,EAASjwB,cAEnCiwB,EAASxoD,gBAAgBrC,cAAc0rD,GACvC3oC,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAe4yC,EAAW7uD,MAAO1S,GACxC1a,EAAOqpC,eAAe6yC,EAAW9uD,MAAOzS,GACxC3a,EAAO6oC,aAAansB,EAAAqZ,SAASsB,MAC3Br3B,EAAOmpC,eAAe8yC,EAAW7uD,MAAO1Q,EAAAsT,WAAWC,KACnDjwB,EAAOmpC,eAAe+yC,EAAW9uD,MAAO1Q,EAAAsT,WAAWC,OAGvD,MAEF,OACMgsD,EAAab,EAASxoD,gBAAgBhD,aAAapT,EAAAuE,KAAKI,KAAK,GAC7D+6D,EAAad,EAASxoD,gBAAgBpC,oBAAoBhU,EAAAuE,KAAKI,KAAK,GACxEi6D,EAASxoD,gBAAgBrC,cAAc0rD,GACvC3oC,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAe4yC,EAAW7uD,MAAO1S,GACxC1a,EAAOqpC,eAAe6yC,EAAW9uD,MAAOzS,GACxC3a,EAAO6oC,aAAansB,EAAAqZ,SAASuB,MAC3Bt3B,EAAOmpC,eAAe8yC,EAAW7uD,MAAO1Q,EAAAsT,WAAWE,KACnDlwB,EAAOmpC,eAAe+yC,EAAW9uD,MAAO1Q,EAAAsT,WAAWE,OAGvD,MAEF,OACM+rD,EAAab,EAASxoD,gBAAgBhD,aAAapT,EAAAuE,KAAKI,KAAK,GAC7D+6D,EAAad,EAASxoD,gBAAgBpC,oBAAoBhU,EAAAuE,KAAKI,KAAK,GACxEi6D,EAASxoD,gBAAgBrC,cAAc0rD,GACvC3oC,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAe4yC,EAAW7uD,MAAO1S,GACxC1a,EAAOqpC,eAAe6yC,EAAW9uD,MAAOzS,GACxC3a,EAAO6oC,aAAansB,EAAAqZ,SAASwB,MAC3Bv3B,EAAOmpC,eAAe8yC,EAAW7uD,MAAO1Q,EAAAsT,WAAWE,KACnDlwB,EAAOmpC,eAAe+yC,EAAW9uD,MAAO1Q,EAAAsT,WAAWE,OAGvD,MAEF,OACM+rD,EAAab,EAASxoD,gBAAgBhD,aAAawrD,EAASt6D,QAAQW,WAAW,GAC/Ey6D,EAAad,EAASxoD,gBAAgBpC,oBAAoB4qD,EAASt6D,QAAQW,WAAW,GAC1F25D,EAASxoD,gBAAgBrC,cAAc0rD,GACvC3oC,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAe4yC,EAAW7uD,MAAO1S,GACxC1a,EAAOqpC,eAAe6yC,EAAW9uD,MAAOzS,GACxC3a,EAAO6oC,aACLuyC,EAASt6D,QAAQkB,SACbtF,EAAAqZ,SAASuB,MACT5a,EAAAqZ,SAASqB,MACbp3B,EAAOmpC,eAAe8yC,EAAW7uD,MAAOguD,EAASt6D,QAAQ2sC,gBACzDztD,EAAOmpC,eAAe+yC,EAAW9uD,MAAOguD,EAASt6D,QAAQ2sC,kBAG7D,MAEF,OACE,GAAI2tB,EAASjwB,YAAYlnD,GAAE,KAAuB,CAChDm3E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBACb,MAEE8uC,EAAab,EAASxoD,gBAAgBhD,aAAawrD,EAASt6D,QAAQW,WAAW,GAC/Ey6D,EAAad,EAASxoD,gBAAgBpC,oBAAoB4qD,EAASt6D,QAAQW,WAAW,GAC1F25D,EAASxoD,gBAAgBrC,cAAc0rD,GACvC3oC,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAe4yC,EAAW7uD,MAAO1S,GACxC1a,EAAOqpC,eAAe6yC,EAAW9uD,MAAOzS,GACxC3a,EAAO6oC,aACLuyC,EAASt6D,QAAQkB,SACbtF,EAAAqZ,SAASwB,MACT7a,EAAAqZ,SAASsB,MACbr3B,EAAOmpC,eAAe8yC,EAAW7uD,MAAOguD,EAASt6D,QAAQ2sC,gBACzDztD,EAAOmpC,eAAe+yC,EAAW9uD,MAAOguD,EAASt6D,QAAQ2sC,kBAG7D,MAEF,QACEna,EAAMtzC,EAAO6oC,aAAansB,EAAAqZ,SAASomD,OAAQzhE,EAAMC,GACjD,MAEF,QACE24B,EAAMtzC,EAAO6oC,aAAansB,EAAAqZ,SAASqmD,OAAQ1hE,EAAMC,GACjD,MAEF,QACEygE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBtK,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKa,IAAG,KAGzD,OADAjH,EAAOygE,EAASvrB,kBAAkB7mB,EAAS,GAAIoyC,EAASjwB,YAAW,KAC3DiwB,EAASjwB,YAAYloD,MAC3B,OACA,OACA,OACMwsB,EAAO2rD,EAASxoD,gBAAgBnD,KAChCwsD,EAAab,EAASxoD,gBAAgBhD,aACxCwrD,EAASjwB,aACR17B,EAAK0F,YAAYza,EAAM0gE,EAASjwB,cAE/B+wB,EAAad,EAASxoD,gBAAgBpC,oBACxC4qD,EAASjwB,aACR17B,EAAK0F,YAAYxa,EAAMygE,EAASjwB,cAEnCiwB,EAASxoD,gBAAgBrC,cAAc0rD,GACvC3oC,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAe4yC,EAAW7uD,MAAO1S,GACxC1a,EAAOqpC,eAAe6yC,EAAW9uD,MAAOzS,GACxC3a,EAAO6oC,aAAansB,EAAAqZ,SAASS,MAC3Bx2B,EAAOmpC,eAAe8yC,EAAW7uD,MAAO1Q,EAAAsT,WAAWC,KACnDjwB,EAAOmpC,eAAe+yC,EAAW9uD,MAAO1Q,EAAAsT,WAAWC,OAGvD,MAEF,OACA,OACA,OACA,QACMR,EAAO2rD,EAASxoD,gBAAgBnD,KAChCwsD,EAAab,EAASxoD,gBAAgBhD,aACxCwrD,EAASjwB,aACR17B,EAAK0F,YAAYza,EAAM0gE,EAASjwB,cAE/B+wB,EAAad,EAASxoD,gBAAgBpC,oBACxC4qD,EAASjwB,aACR17B,EAAK0F,YAAYxa,EAAMygE,EAASjwB,cAEnCiwB,EAASxoD,gBAAgBrC,cAAc0rD,GACvC3oC,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAe4yC,EAAW7uD,MAAO1S,GACxC1a,EAAOqpC,eAAe6yC,EAAW9uD,MAAOzS,GACxC3a,EAAO6oC,aAAansB,EAAAqZ,SAASU,MAC3Bz2B,EAAOmpC,eAAe8yC,EAAW7uD,MAAO1Q,EAAAsT,WAAWC,KACnDjwB,EAAOmpC,eAAe+yC,EAAW9uD,MAAO1Q,EAAAsT,WAAWC,OAGvD,MAEF,OACMgsD,EAAab,EAASxoD,gBAAgBhD,aAAapT,EAAAuE,KAAKI,KAAK,GAC7D+6D,EAAad,EAASxoD,gBAAgBpC,oBAAoBhU,EAAAuE,KAAKI,KAAK,GACxEi6D,EAASxoD,gBAAgBrC,cAAc0rD,GACvC3oC,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAe4yC,EAAW7uD,MAAO1S,GACxC1a,EAAOqpC,eAAe6yC,EAAW9uD,MAAOzS,GACxC3a,EAAO6oC,aAAansB,EAAAqZ,SAASW,MAC3B12B,EAAOmpC,eAAe8yC,EAAW7uD,MAAO1Q,EAAAsT,WAAWE,KACnDlwB,EAAOmpC,eAAe+yC,EAAW9uD,MAAO1Q,EAAAsT,WAAWE,OAGvD,MAEF,OACM+rD,EAAab,EAASxoD,gBAAgBhD,aAAapT,EAAAuE,KAAKI,KAAK,GAC7D+6D,EAAad,EAASxoD,gBAAgBpC,oBAAoBhU,EAAAuE,KAAKI,KAAK,GACxEi6D,EAASxoD,gBAAgBrC,cAAc0rD,GACvC3oC,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAe4yC,EAAW7uD,MAAO1S,GACxC1a,EAAOqpC,eAAe6yC,EAAW9uD,MAAOzS,GACxC3a,EAAO6oC,aAAansB,EAAAqZ,SAASY,MAC3B32B,EAAOmpC,eAAe8yC,EAAW7uD,MAAO1Q,EAAAsT,WAAWE,KACnDlwB,EAAOmpC,eAAe+yC,EAAW9uD,MAAO1Q,EAAAsT,WAAWE,OAGvD,MAEF,OACM+rD,EAAab,EAASxoD,gBAAgBhD,aAAawrD,EAASt6D,QAAQW,WAAW,GAC/Ey6D,EAAad,EAASxoD,gBAAgBpC,oBAAoB4qD,EAASt6D,QAAQW,WAAW,GAC1F25D,EAASxoD,gBAAgBrC,cAAc0rD,GACvC3oC,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAe4yC,EAAW7uD,MAAO1S,GACxC1a,EAAOqpC,eAAe6yC,EAAW9uD,MAAOzS,GACxC3a,EAAO6oC,aACLuyC,EAASt6D,QAAQkB,SACbtF,EAAAqZ,SAASW,MACTha,EAAAqZ,SAASS,MACbx2B,EAAOmpC,eAAe8yC,EAAW7uD,MAAOguD,EAASt6D,QAAQ2sC,gBACzDztD,EAAOmpC,eAAe+yC,EAAW9uD,MAAOguD,EAASt6D,QAAQ2sC,kBAG7D,MAEF,OACE,GAAI2tB,EAASjwB,YAAYlnD,GAAE,KAAuB,CAChDm3E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBACb,MAEE8uC,EAAab,EAASxoD,gBAAgBhD,aAAawrD,EAASt6D,QAAQW,WAAW,GAC/Ey6D,EAAad,EAASxoD,gBAAgBpC,oBAAoB4qD,EAASt6D,QAAQW,WAAW,GAC1F25D,EAASxoD,gBAAgBrC,cAAc0rD,GACvC3oC,EAAMtzC,EAAOqsC,aACXrsC,EAAOqpC,eAAe4yC,EAAW7uD,MAAO1S,GACxC1a,EAAOqpC,eAAe6yC,EAAW9uD,MAAOzS,GACxC3a,EAAO6oC,aACLuyC,EAASt6D,QAAQkB,SACbtF,EAAAqZ,SAASY,MACTja,EAAAqZ,SAASU,MACbz2B,EAAOmpC,eAAe8yC,EAAW7uD,MAAOguD,EAASt6D,QAAQ2sC,gBACzDztD,EAAOmpC,eAAe+yC,EAAW9uD,MAAOguD,EAASt6D,QAAQ2sC,kBAG7D,MAEF,QACEna,EAAMtzC,EAAO6oC,aAAansB,EAAAqZ,SAASsmD,OAAQ3hE,EAAMC,GACjD,MAEF,QACE24B,EAAMtzC,EAAO6oC,aAAansB,EAAAqZ,SAASumD,OAAQ5hE,EAAMC,GACjD,MAEF,QACEygE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBtK,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKa,IAAG,KAEzD,OAAQw5D,EAASjwB,YAAYloD,MAC3B,OACE,GAAIm4E,EAASjwB,YAAYlnD,GAAE,KAAuB,CAChDm3E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBACb,MAIJ,QACEmG,EAAM54B,EACN,MAEF,QACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQsjD,QAAS7hE,GAC1C,MAEF,QACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQujD,QAAS9hE,GAC1C,MAEF,QACE0gE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAET,IAAK,QACH,GAAuB,GAAnBtK,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKa,IAAG,KAEzD,OAAQw5D,EAASjwB,YAAYloD,MAC3B,OACE,GAAIm4E,EAASjwB,YAAYlnD,GAAE,KAAuB,CAChDm3E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBACb,MAIJ,QACEmG,EAAM54B,EACN,MAEF,QACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQwjD,SAAU/hE,GAC3C,MAEF,QACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQyjD,SAAUhiE,GAC3C,MAEF,QACE0gE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAET,IAAK,WACH,GAAuB,GAAnBtK,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKa,IAAG,KAGzD,OADAjH,EAAOygE,EAASvrB,kBAAkB7mB,EAAS,GAAIoyC,EAASjwB,YAAW,KAC3DiwB,EAASjwB,YAAYloD,MAC3B,QACEqwC,EAAMtzC,EAAO6oC,aAAansB,EAAAqZ,SAAS4mD,YAAajiE,EAAMC,GACtD,MAEF,QACE24B,EAAMtzC,EAAO6oC,aAAansB,EAAAqZ,SAAS6mD,YAAaliE,EAAMC,GACtD,MAEF,QACEygE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAET,IAAK,UACH,GAAuB,GAAnBtK,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKa,IAAG,KAEzD,OAAQw5D,EAASjwB,YAAYloD,MAC3B,OACE,GAAIm4E,EAASjwB,YAAYlnD,GAAE,KAAuB,CAChDm3E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBACb,MAIJ,QACEmG,EAAM54B,EACN,MAEF,QACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQ4jD,WAAYniE,GAC7C,MAEF,QACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQ6jD,WAAYpiE,GAC7C,MAEF,QACE0gE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAET,IAAK,cACH,GAAuB,GAAnBtK,EAAS/hC,OAYX,OAXM3C,GAAyC,GAAxBA,EAAc2C,SAC/B3C,GAAiBA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAChF82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOiU,SAAS,IAAM,MAG/EkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,IAAM7oC,GAAyC,GAAxBA,EAAc2C,OAMnC,OALI3C,GAAiBA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAChF82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOiU,SAAS,IAAM,KAEtElb,EAAOmtC,oBAEhB,OAAQ7oC,EAAc,GAAGrB,MACvB,OACA,OACEyX,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKY,IAAG,KACvD2xB,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQ8jD,eAAgBriE,GACjD,MAEF,OACA,OACEA,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKa,IAAG,KACvD0xB,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQ+jD,eAAgBtiE,GACjD,MAEF,OACE,GAAIpW,EAAc,GAAGL,GAAE,KAMrB,OALAm3E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb42E,EAASjwB,YAAc7mD,EAAc,GAC9BtE,EAAOmtC,oBAIlB,OACEzyB,EAAO0gE,EAASvrB,kBACd7mB,EAAS,GACToyC,EAASt6D,QAAQkB,SACbxF,EAAAuE,KAAKa,IACLpF,EAAAuE,KAAKY,IAAG,KAId2xB,EAAMtzC,EAAO0oC,YACX0yC,EAASt6D,QAAQkB,SACbtF,EAAAuc,QAAQ+jD,eACRtgE,EAAAuc,QAAQ8jD,eACZriE,GAEF,MAEF,QACEA,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKG,IAAG,KACvDoyB,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQgkD,eAAgBviE,GACjD,MAEF,QACEA,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKI,IAAG,KACvDmyB,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQikD,eAAgBxiE,GACjD,MAEF,QACE0gE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAKjB,OADAiuC,EAASjwB,YAAc7mD,EAAc,GAC9BgvC,EAET,IAAK,OACH,GAAuB,GAAnBtK,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKa,IAAG,KAEzD,OAAQw5D,EAASjwB,YAAYloD,MAC3B,QACEqwC,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQkkD,QAASziE,GAC1C,MAEF,QACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQmkD,QAAS1iE,GAC1C,MAGF,QACE0gE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAET,IAAK,QACH,GAAuB,GAAnBtK,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,GAAiBA,EAAc2C,OAAQ,CAEzC,GADAm0E,EAASjwB,YAAc7mD,EAAc,GACT,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKa,IAAG,KAEzD,OAAQw5D,EAASjwB,YAAYloD,MAC3B,OACE,GAAIm4E,EAASjwB,YAAYlnD,GAAE,KAAuB,CAChDm3E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBACb,MAIJ,QACEmG,EAAM54B,EACN,MAGF,QACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQokD,SAAU3iE,GAC3C,MAEF,QACE44B,EAAMtzC,EAAO0oC,YAAYhsB,EAAAuc,QAAQqkD,SAAU5iE,GAC3C,MAEF,QACE0gE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAKT,IAAK,OACH,OAAItK,EAAS/hC,OAAS,GAAK+hC,EAAS/hC,OAAS,GACrC3C,GAAyC,GAAxBA,EAAc2C,QACnCm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOiU,SAAS,IAAM,KAG3E8tB,EAAS/hC,OAAS,EACpBm0E,EAAS/+D,MACPE,EAAAnC,eAAesjD,wCACfvP,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAGlDkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAG7Clb,EAAOmtC,qBAEV7oC,GAAyC,GAAxBA,EAAc2C,QAQrCyT,EAAO0gE,EAASvrB,kBACd7mB,EAAS,GACToyC,EAASt6D,QAAQW,UAAS,MAIxB2kB,EAA4B,GAAnB4C,EAAS/hC,OAAcs2E,EAAuBnC,EAAUpyC,EAAS,IAAM,GACvE,EACJhpC,EAAOmtC,qBAEhBiuC,EAASjwB,YAAc7mD,EAAc,GAC9BtE,EAAOypC,WACZnlC,EAAc,GAAG02B,SACjB12B,EAAc,GAAGL,GAAG,GACpByW,EACApW,EAAc,GAAGL,GAAE,IACnByxD,EAAezxD,GAAE,IACjByxD,EAAej9B,KAAOn0B,EAAc,GAAGm0B,MAClC2iD,EAASjwB,YAAcuK,GAAgB3lC,gBACvCqrD,EAASjwB,YAAc7mD,EAAc,IAAIyrB,eAC9CqW,MA3BI9hC,GAAiBA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAChF82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOiU,SAAS,IAAM,KAEtElb,EAAOmtC,qBAyBlB,IAAK,QAEH,GADAiuC,EAASjwB,YAAc3uC,EAAAuE,KAAKc,KACxBmnB,EAAS/hC,OAAS,GAAK+hC,EAAS/hC,OAAS,EAkB3C,OAjBM3C,GAAyC,GAAxBA,EAAc2C,QACnCm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOiU,SAAS,IAAM,KAG3E8tB,EAAS/hC,OAAS,EACpBm0E,EAAS/+D,MACPE,EAAAnC,eAAesjD,wCACfvP,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAGlDkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAG7Clb,EAAOmtC,oBAEhB,IAAM7oC,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJAm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOiU,SAAS,IAAM,KAEtElb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBACd7mB,EAAS,GACToyC,EAASt6D,QAAQW,UAAS,KAI5B9G,EAAOygE,EAASvrB,kBACd7mB,EAAS,GACT1kC,EAAc,GACdA,EAAc,GAAGL,GAAE,GAChB,EACA,EAAwB,GAGzBQ,OAAI,EAoBR,OAlBEH,EAAc,GAAGL,GAAE,MAEhBm3E,EAASjwB,YAAYlnD,GAAE,IACxBm3E,EAASjwB,YAAY1yB,KAAOn0B,EAAc,GAAGm0B,OAG/C9d,EAAOygE,EAAStkB,kBACdn8C,EACAygE,EAASjwB,YAAa7mD,EAAc,GAAE,IAGtC0kC,EAAS,IAEXvkC,EAAOH,EAAc,IAErBG,EAAO22E,EAASjwB,aAEd/kB,EAA4B,GAAnB4C,EAAS/hC,OAAcs2E,EAAuBnC,EAAUpyC,EAAS,IAAM,GACvE,EACJhpC,EAAOmtC,qBAEhBiuC,EAASjwB,YAAc3uC,EAAAuE,KAAKc,KACrB7hB,EAAO8pC,YAAYxlC,EAAc,GAAG02B,SAAUtgB,EAAMC,EAAMlW,EAAKsrB,eAAgBqW,IAExF,IAAK,SAEH,GADAg1C,EAASjwB,YAAciwB,EAASt6D,QAAQW,UACjB,GAAnBunB,EAAS/hC,OAWX,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnCm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOiU,SAAS,IAAM,KAG/EkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEV7oC,GAAyC,GAAxBA,EAAc2C,QACnCm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOiU,SAAS,IAAM,KAG/E,IAAI8f,EAAoB12B,EAAe,GAAG02B,SAkB1C,OAjBIogD,EAASt6D,QAAQkB,SAEf0zC,EAAezxD,GAAE,IAAuByxD,EAAej9B,MAAQ,IACjE2iD,EAASjwB,YAAc3uC,EAAAuE,KAAKQ,IAC5B+xB,EAAMtzC,EAAO8nC,UAAU9M,IAEvBsY,EAAMtzC,EAAOkoC,UAAUlN,EAAU,GAI/B06B,EAAezxD,GAAE,IAA8C,IAAvByxD,EAAej9B,MACzD2iD,EAASjwB,YAAc3uC,EAAAuE,KAAKS,IAC5B8xB,EAAMtzC,EAAOkoC,UAAUlN,EAAU,IAEjCsY,EAAMtzC,EAAO8nC,UAAU9M,GAGpBsY,EAET,IAAK,UAEH,GADA8nC,EAASjwB,YAAciwB,EAASt6D,QAAQW,UACjB,GAAnBunB,EAAS/hC,OAWX,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnCm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOiU,SAAS,IAAM,KAG/EkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,IAAM7oC,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJAm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOiU,SAAS,IAAM,KAEtElb,EAAOmtC,oBAEhB,IACIqwC,OAAS,EACb,OAFIxiD,EAAoB12B,EAAe,GAAG02B,UAGxC,KAAK,EAAKwiD,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,QAA0B,OAAfnrE,QAAO,GAAerS,EAAOmtC,oBAmB1C,OAjBIiuC,EAASt6D,QAAQkB,SAEf0zC,EAAezxD,GAAE,IAAuByxD,EAAej9B,MAAQ,IACjE2iD,EAASjwB,YAAc3uC,EAAAuE,KAAKQ,IAC5B+xB,EAAMtzC,EAAO8nC,UAAU01C,IAEvBlqC,EAAMtzC,EAAOkoC,UAAUs1C,EAAW,GAIhC9nB,EAAezxD,GAAE,IAA8C,IAAvByxD,EAAej9B,MACzD2iD,EAASjwB,YAAc3uC,EAAAuE,KAAKS,IAC5B8xB,EAAMtzC,EAAOkoC,UAAUs1C,EAAW,IAElClqC,EAAMtzC,EAAO8nC,UAAU01C,GAGpBlqC,EAET,IAAK,WAEH,GADA8nC,EAASjwB,YAAciwB,EAASt6D,QAAQW,UACpCunB,EAAS/hC,OAAS,EAWpB,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnCm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOiU,SAAS,IAAM,KAG/EkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,IAAM7oC,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJAm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOiU,SAAS,IAAM,KAEtElb,EAAOmtC,oBAEhB,IAAI+P,EACJ,KADIA,EAAY54C,EAAc,GAAGm4C,gBAM/B,OAJA2+B,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAENxE,EAAOmtC,oBAEhB,IAAI/G,OAAM,EACV,GAAI4C,EAAS/hC,OAAQ,CACnB,GACE+hC,EAAS,GAAG/lC,MAAQwZ,EAAA3Z,SAASI,SACT8lC,EAAS,GAAIr1B,aAAe8I,EAAAhJ,YAAYmB,OAM5D,OAJAwmE,EAAS/+D,MACPE,EAAAnC,eAAesP,wBACfsf,EAAS,GAAGxkC,OAEPxE,EAAOmtC,oBAEhB,IAAIswC,EAAsCz0C,EAAS,GAAIrnC,MACnDmjE,EAAQ5nB,EAAU9wC,QAAU8wC,EAAU9wC,QAAQ7K,IAAIk8E,GAAa,KACnE,IAAM3Y,GAASA,EAAM7hE,MAAQknD,EAAAlrC,YAAYsS,MAKvC,OAJA6pD,EAAS/+D,MACPE,EAAAnC,eAAesjE,yBACf10C,EAAS,GAAGxkC,MAAO04C,EAAUr6B,aAAc46D,GAEtCz9E,EAAOmtC,oBAEhB/G,EAAiB0+B,EAAOtzC,kBAExB4U,EAAS8W,EAAUvrB,oBAErB,OAAIypD,EAASt6D,QAAQkB,SAEf0zC,EAAezxD,GAAE,IAAuByxD,EAAej9B,MAAQ,IACjE2iD,EAASjwB,YAAc3uC,EAAAuE,KAAKQ,IACrBvhB,EAAO8nC,UAAU1B,IAEjBpmC,EAAOkoC,UAAU9B,GAItBsvB,EAAezxD,GAAE,IAA8C,IAAvByxD,EAAej9B,MACzD2iD,EAASjwB,YAAc3uC,EAAAuE,KAAKS,IACrBxhB,EAAOkoC,UAAU9B,IAEjBpmC,EAAO8nC,UAAU1B,GAO9B,IAAK,SACH,GAAuB,GAAnB4C,EAAS/hC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAAS7rB,4BAA4BvmB,EAAS,GAAIxsB,EAAAuE,KAAKG,IAAG,GAE/Dzc,EAAO22E,EAASjwB,YAOpB,OANAxwC,EAAOygE,EAASvrB,kBAAkB7mB,EAAS,GAAIvkC,EAAI,KACnDmW,EAAOwgE,EAASjoB,cACdioB,EAAS7rB,4BAA4BvmB,EAAS,GAAIxsB,EAAAuE,KAAKW,KAAI,GAC3D05D,EAASjwB,aAEXiwB,EAASjwB,YAAc1mD,EACf22E,EAASjwB,YAAYloD,MAC3B,OACA,OACA,OACA,OACA,QAIA,QACEqwC,EAAMtzC,EAAOqsC,aAAa3xB,EAAMC,EAAMC,GACtC,MAEF,QACEwgE,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMtzC,EAAOmtC,oBAIjB,OAAOmG,EAET,IAAK,cAaH,OAZuB,GAAnBtK,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAGhD5W,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGzB7iB,EAAOmtC,oBAKhB,IAAK,cAcH,OAbAiuC,EAASjwB,YAAc3uC,EAAAuE,KAAKG,IACL,GAAnB8nB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAGhD5W,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGzB7iB,EAAO+oC,WAAWrsB,EAAA4oB,OAAOq4C,eAElC,IAAK,cAiBH,OAhBAvC,EAASjwB,YAAc3uC,EAAAuE,KAAKG,IACL,GAAnB8nB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDR,EAAO1a,EAAOmtC,qBAEdzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAIxsB,EAAAuE,KAAKG,IAAG,KAErD5c,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGzB7iB,EAAO+oC,WAAWrsB,EAAA4oB,OAAOs4C,WAAY,MAAQljE,IAGtD,IAAK,cAOH,GANIpW,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,OAMX,OALAm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc3uC,EAAAuE,KAAKc,KACrB7hB,EAAOmtC,oBAqBhB,MAnBAzyB,EAAO0gE,EAASvrB,kBACd7mB,EAAS,GACToyC,EAASt6D,QAAQW,UAAS,KAI5B9G,EAAOygE,EAASvrB,kBACd7mB,EAAS,GACToyC,EAASt6D,QAAQW,UAAS,KAI5B7G,EAAOwgE,EAASvrB,kBACd7mB,EAAS,GACToyC,EAASt6D,QAAQW,UAAS,KAI5B25D,EAASjwB,YAAc3uC,EAAAuE,KAAKc,KACtB,IAAI2D,MAAM,mBAGlB,IAAK,cAOH,GANIlhB,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,OAMX,OALAm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc3uC,EAAAuE,KAAKc,KACrB7hB,EAAOmtC,oBAqBhB,MAnBAzyB,EAAO0gE,EAASvrB,kBACd7mB,EAAS,GACToyC,EAASt6D,QAAQW,UAAS,KAI5B9G,EAAOygE,EAASvrB,kBACd7mB,EAAS,GACTxsB,EAAAuE,KAAKQ,IAAG,KAIV3G,EAAOwgE,EAASvrB,kBACd7mB,EAAS,GACToyC,EAASt6D,QAAQW,UAAS,KAI5B25D,EAASjwB,YAAc3uC,EAAAuE,KAAKc,KACtB,IAAI2D,MAAM,mBAMlB,IAAK,aACH,OAAMlhB,GAAyC,GAAxBA,EAAc2C,OAQd,GAAnB+hC,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc7mD,EAAc,GAC9BtE,EAAOmtC,sBAEhBzyB,EAAO0gE,EAAS7rB,4BACdvmB,EAAS,GACT1kC,EAAc,GAAE,GAGlB82E,EAASjwB,YAAc7mD,EAAc,GACjC82E,EAASjwB,YAAY1yB,MAAQn0B,EAAc,GAAGm0B,MAChD2iD,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAENxE,EAAOmtC,qBAITzyB,IA9BDpW,GAAiBA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAChF82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOiU,SAAS,IAAM,KAEtElb,EAAOmtC,qBA2BlB,IAAK,SACH,GAAInE,EAAS/hC,OAAS,GAAK+hC,EAAS/hC,OAAS,EAqB3C,OApBI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,GAAGq4C,iBACtC,GAAxBr4C,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAIvD8tB,EAAS/hC,OAAS,EACpBm0E,EAAS/+D,MACPE,EAAAnC,eAAesjD,wCACfvP,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAEzC8tB,EAAS/hC,OAAS,GAC3Bm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAG7Clb,EAAOmtC,oBAEhB,GAAI7oC,EAAe,CAEjB,GADIA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,GAAGq4C,iBACtC,GAAxBr4C,EAAc2C,OAKhB,OAJAm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhBzyB,EAAO0gE,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,UAE/DoW,EAAO0gE,EAAS7rB,4BAA4BvmB,EAAS,GAAIxsB,EAAAuE,KAAKW,KAAI,GAGhEjd,EAAO22E,EAASjwB,YAIpB,GAHAiwB,EAASjwB,YAAc1mD,EAAKk4C,gBAGxBy+B,EAASt6D,QAAQoB,SACnB,OAAIwzC,GAAkBl5C,EAAAuE,KAAKc,MACzBu5D,EAASjwB,YAAc3uC,EAAAuE,KAAKc,KACrB7hB,EAAOisC,aAETvxB,EAGT,IAAImjE,EAAQ3oB,EAAakmB,EAA6B,GAAnBpyC,EAAS/hC,OAAc+hC,EAAS,GAAK,KAAMmlB,GAI9E,GAFAitB,EAASjwB,YAAc1mD,EAAKk4C,gBAExB+Y,GAAkBl5C,EAAAuE,KAAKc,KAAM,CAC/B,OAAQu5D,EAASjwB,YAAYloD,MAC3B,QACEqwC,EAAMtzC,EAAO+rC,SACX/rC,EAAO0oC,YAAYhsB,EAAAuc,QAAQC,OACzBxe,GAEFmjE,GAEF,MAEF,OACA,OACEvqC,EAAMtzC,EAAO+rC,SACX/rC,EAAO0oC,YAAYhsB,EAAAuc,QAAQE,OACzBze,GAEFmjE,GAEF,MAEF,OACA,OACEvqC,EAAMtzC,EAAO+rC,SACX/rC,EAAO0oC,YACL0yC,EAASt6D,QAAQkB,SACbtF,EAAAuc,QAAQE,OACRzc,EAAAuc,QAAQC,OACZxe,GAEFmjE,GAEF,MAGF,QACEvqC,EAAMtzC,EAAO+rC,SACX/rC,EAAO6oC,aAAansB,EAAAqZ,SAASG,MAC3Bxb,EACA1a,EAAOsoC,UAAU,IAEnBu1C,GAEF,MAEF,QACEvqC,EAAMtzC,EAAO+rC,SACX/rC,EAAO6oC,aAAansB,EAAAqZ,SAASI,MAC3Bzb,EACA1a,EAAOwoC,UAAU,IAEnBq1C,GAEF,MAEF,QACEzC,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMuqC,EAIVzC,EAASjwB,YAAc3uC,EAAAuE,KAAKc,UAE5B,OAAQu5D,EAASjwB,YAAYloD,MAC3B,OACA,OACA,OACA,OACA,QACMwsB,EAAO2rD,EAASxoD,gBAAgBnD,KAChC4kC,EAAY+mB,EAASxoD,gBAAgBpC,oBACvC4qD,EAASjwB,aACR17B,EAAK0F,YAAYza,EAAM0gE,EAASjwB,cAEnC7X,EAAMtzC,EAAO+rC,SACX/rC,EAAOqpC,eAAegrB,EAAUjnC,MAAO1S,GACvC1a,EAAOmpC,eAAekrB,EAAUjnC,MAAO1Q,EAAAsT,WAAWC,KAClD4tD,GAEF,MAEF,OACA,OACA,QACMxpB,EAAY+mB,EAASxoD,gBAAgBpC,oBAAoBhU,EAAAuE,KAAKG,KAAK,GACvEoyB,EAAMtzC,EAAO+rC,SACX/rC,EAAOqpC,eAAegrB,EAAUjnC,MAAO1S,GACvC1a,EAAOmpC,eAAekrB,EAAUjnC,MAAO1Q,EAAAsT,WAAWC,KAClD4tD,GAEF,MAEF,OACA,OACMxpB,EAAY+mB,EAASxoD,gBAAgBpC,oBAAoBhU,EAAAuE,KAAKI,KAAK,GACvEmyB,EAAMtzC,EAAO+rC,SACX/rC,EAAO0oC,YAAYhsB,EAAAuc,QAAQE,OACzBn5B,EAAOqpC,eAAegrB,EAAUjnC,MAAO1S,IAEzCmjE,EACA79E,EAAOmpC,eAAekrB,EAAUjnC,MAAO1Q,EAAAsT,WAAWE,MAEpD,MAEF,OACA,OACMmkC,EAAY+mB,EAASxoD,gBAAgBpC,oBAAoB4qD,EAASt6D,QAAQW,WAAW,GACzF6xB,EAAMtzC,EAAO+rC,SACX/rC,EAAO0oC,YACL0yC,EAASt6D,QAAQkB,SACbtF,EAAAuc,QAAQE,OACRzc,EAAAuc,QAAQC,OACZl5B,EAAOqpC,eAAegrB,EAAUjnC,MAAO1S,IAEzCmjE,EACA79E,EAAOmpC,eAAekrB,EAAUjnC,MAAOguD,EAASt6D,QAAQ2sC,iBAE1D,MAEF,QACM4G,EAAY+mB,EAASxoD,gBAAgBpC,oBAAoBhU,EAAAuE,KAAKY,KAAK,GACvE2xB,EAAMtzC,EAAO+rC,SACX/rC,EAAO6oC,aAAansB,EAAAqZ,SAASG,MAC3Bl2B,EAAOqpC,eAAegrB,EAAUjnC,MAAO1S,GACvC1a,EAAOsoC,UAAU,IAEnBu1C,EACA79E,EAAOmpC,eAAekrB,EAAUjnC,MAAO1Q,EAAAsT,WAAWG,MAEpD,MAEF,QACMkkC,EAAY+mB,EAASxoD,gBAAgBpC,oBAAoBhU,EAAAuE,KAAKa,KAAK,GACvE0xB,EAAMtzC,EAAO+rC,SACX/rC,EAAO6oC,aAAansB,EAAAqZ,SAASI,MAC3Bn2B,EAAOqpC,eAAegrB,EAAUjnC,MAAO1S,GACvC1a,EAAOwoC,UAAU,IAEnBq1C,EACA79E,EAAOmpC,eAAekrB,EAAUjnC,MAAO1Q,EAAAsT,WAAWI,MAEpD,MAEF,QACEgrD,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAEb8uC,EAAMuqC,EAKZ,OAAOvqC,EAET,IAAK,YAOH,OANIhvC,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,uBAEZ1d,EAAO2rD,EAASxoD,gBAAgBnD,MAC/BrrB,IAAG,MACRkvC,EAAM8nC,EAAS7rB,4BAA4BvmB,EAAS,GAAI0sB,EAAc,GACtEjmC,EAAK0D,MAAK,MACHmgB,GAET,IAAK,gBACH,GAAItK,EAAS/hC,OAAS,EAcpB,OAbI3C,IACEA,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,MAI3DkgE,EAAS/+D,MACPE,EAAAnC,eAAesjD,wCACfvP,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3Clb,EAAOmtC,oBAEhB,IAAI3nC,OAAU,EACd,GAAIlB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm0E,EAASjwB,YAAc7mD,EAAc,IAC/D82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhDlb,EAAOmtC,oBAEhB3nC,EAAalB,EAAc,QAE3BkB,EAAakwD,EAGf,GADAh7C,EAAO0gE,EAAS7rB,4BAA4BvmB,EAAS,GAAIxsB,EAAAuE,KAAKQ,IAAG,GACpC,GAAzB65D,EAASjwB,YAAYloD,KAKvB,OAJAm4E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfshB,EAAS,GAAGxkC,OAEPxE,EAAOmtC,oBAOhB,IALA,IAAIsyB,EAAcz2B,EAAS/hC,OAAS,EAChC62E,EAAe,IAAI3nE,MAAqBspD,GACxCse,EAAiB,IAAI5nE,MAAcspD,EAAc,GACjDzD,EAAmBx2D,EAAWuqB,eAC9BiuD,EAAmB,IAAI7nE,MAAkBspD,GACpC/+D,EAAI,EAAGA,EAAI++D,IAAe/+D,EAAG,CACpCo9E,EAAap9E,GAAK06E,EAAS7rB,4BAA4BvmB,EAAS,EAAItoC,GAAI8b,EAAAuE,KAAKG,IAAG,GAChF,IAAI+8D,EAAc7C,EAASjwB,YAC3B4yB,EAAer9E,GAAKu9E,EAAY9sD,oBAChC6sD,EAAiBt9E,GAAKu9E,EAAYluD,eAEpCguD,EAAete,GAAej6D,EAAW2rB,oBACzC,IAAI8b,EAAW8wC,EAAeliE,KAAK,IAC/BkyB,EAAU/tC,EAAO0nC,2BAA2Bs0B,EAAkBgiB,GAKlE,OAJKjwC,IAASA,EAAU/tC,EAAOonC,gBAAgB6F,EAAU+uB,EAAkBgiB,IAC3E5C,EAASjwB,YAAc3lD,EAGhBxF,EAAOgtC,mBAAmBtyB,EAAMojE,EAAc7wC,GAKvD,IAAK,QAKH,OAJAmuC,EAAS/+D,MACPE,EAAAnC,eAAe8jE,eACf/vB,EAAW3pD,OAAQwkC,EAAS/hC,OAAS+hC,EAAS,GAAKmlB,GAAY3pD,MAAM0W,YAEhElb,EAAOmtC,oBAEhB,IAAK,UAKH,OAJAiuC,EAASh/D,QACPG,EAAAnC,eAAe8jE,eACf/vB,EAAW3pD,OAAQwkC,EAAS/hC,OAAS+hC,EAAS,GAAKmlB,GAAY3pD,MAAM0W,YAEhElb,EAAOisC,YAEhB,IAAK,OAKH,OAJAmvC,EAASj/D,KACPI,EAAAnC,eAAe8jE,eACf/vB,EAAW3pD,OAAQwkC,EAAS/hC,OAAS+hC,EAAS,GAAKmlB,GAAY3pD,MAAM0W,YAEhElb,EAAOisC,YAKhB,IAAK,KAOH,OANI3nC,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc3uC,EAAAuE,KAAKC,GACrBhhB,EAAOmtC,qBAETiuC,EAASvrB,kBACd7mB,EAAS,GACTxsB,EAAAuE,KAAKC,GAAE,KAKX,IAAK,MAOH,OANI1c,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc3uC,EAAAuE,KAAKE,IACrBjhB,EAAOmtC,qBAETiuC,EAASvrB,kBACd7mB,EAAS,GACTxsB,EAAAuE,KAAKE,IAAG,KAKZ,IAAK,MAOH,OANI3c,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc3uC,EAAAuE,KAAKG,IACrBlhB,EAAOmtC,qBAETiuC,EAASvrB,kBACd7mB,EAAS,GACTxsB,EAAAuE,KAAKG,IAAG,KAKZ,IAAK,MAOH,OANI5c,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc3uC,EAAAuE,KAAKI,IACrBnhB,EAAOmtC,qBAETiuC,EAASvrB,kBACd7mB,EAAS,GACTxsB,EAAAuE,KAAKI,IAAG,KAKZ,IAAK,QAOH,OANI7c,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAciwB,EAASt6D,QAAQkB,SACpCxF,EAAAuE,KAAK67B,QACLpgC,EAAAuE,KAAK87B,QACF78C,EAAOmtC,qBAETiuC,EAASvrB,kBACd7mB,EAAS,GACToyC,EAASt6D,QAAQkB,SACbxF,EAAAuE,KAAK67B,QACLpgC,EAAAuE,KAAK87B,QAAO,KAKpB,IAAK,KAOH,OANIv4C,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc3uC,EAAAuE,KAAKM,GACrBrhB,EAAOmtC,qBAETiuC,EAASvrB,kBACd7mB,EAAS,GACTxsB,EAAAuE,KAAKM,GAAE,KAKX,IAAK,MAOH,OANI/c,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc3uC,EAAAuE,KAAKO,IACrBthB,EAAOmtC,qBAETiuC,EAASvrB,kBACd7mB,EAAS,GACTxsB,EAAAuE,KAAKO,IAAG,KAKZ,IAAK,MAOH,OANIhd,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc3uC,EAAAuE,KAAKQ,IACrBvhB,EAAOmtC,qBAETiuC,EAASvrB,kBACd7mB,EAAS,GACTxsB,EAAAuE,KAAKQ,IAAG,KAKZ,IAAK,MAOH,OANIjd,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc3uC,EAAAuE,KAAKS,IACrBxhB,EAAOmtC,qBAETiuC,EAASvrB,kBACd7mB,EAAS,GACTxsB,EAAAuE,KAAKS,IAAG,KAKZ,IAAK,QAOH,OANIld,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAciwB,EAASt6D,QAAQW,UACjCzhB,EAAOmtC,qBAETiuC,EAASvrB,kBACd7mB,EAAS,GACToyC,EAASt6D,QAAQW,UAAS,KAK9B,IAAK,OAOH,OANInd,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc3uC,EAAAuE,KAAKW,KACrB1hB,EAAOmtC,qBAETiuC,EAASvrB,kBACd7mB,EAAS,GACTxsB,EAAAuE,KAAKW,KAAI,KAKb,IAAK,MAOH,OANIpd,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc3uC,EAAAuE,KAAKY,IACrB3hB,EAAOmtC,qBAETiuC,EAASvrB,kBACd7mB,EAAS,GACTxsB,EAAAuE,KAAKY,IAAG,KAKZ,IAAK,MAOH,OANIrd,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,QACXm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc3uC,EAAAuE,KAAKa,IACrB5hB,EAAOmtC,qBAETiuC,EAASvrB,kBACd7mB,EAAS,GACTxsB,EAAAuE,KAAKa,IAAG,KAQZ,IAAK,eAOH,GANItd,GACF82E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGT,GAAnBmmB,EAAS/hC,OAMX,OALAm0E,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAElDkgE,EAASjwB,YAAc3uC,EAAAuE,KAAKc,KACrB7hB,EAAOmtC,oBAEhB,IAAIgxC,EAAO/C,EAAS7rB,4BAA4BvmB,EAAS,GAAIxsB,EAAAuE,KAAKQ,IAAG,GAEjEm7B,GADAj4C,EAAO22E,EAASjwB,aACUzO,mBAE9B,OADA0+B,EAASjwB,YAAc3uC,EAAAuE,KAAKc,KAEzBpd,EAAKR,GAAE,MACPy4C,GAC2C,GAA5CA,EAAmBrtB,eAAepoB,QAClCy1C,EAAmBrtB,eAAe,IAAM+rD,EAASt6D,QAAQW,WAQ3D25D,EAASjwB,YAAc3uC,EAAAuE,KAAKc,KAE5Bu5D,EAAS3vB,mBAAoB,EACtBzrD,EAAO4sC,WAAW,iBAAmBuxC,GAAQzhE,EAAAsT,WAAWub,QAT7D6vC,EAAS/+D,MACPE,EAAAnC,eAAeo1C,mCACfrB,EAAW3pD,MAAOC,EAAKyW,WAAY,wBAE9Blb,EAAOmtC,qBAQpB,IAAI3mC,EAkBN,SACE40E,EACA94E,EACA0mC,EACA0sB,EACAvH,GAEA,OAAQ7rD,EAAUugB,cAOhB,IAAK,UAAW,OAAOu7D,EAAS,MAAOhD,EAAU5+D,EAAAuE,KAAKG,IAAK8nB,EAAUxsB,EAAAuE,KAAKG,IAAKitC,GAC/E,IAAK,UAAW,OAAOiwB,EAAS,MAAOhD,EAAU5+D,EAAAuE,KAAKI,IAAK6nB,EAAUxsB,EAAAuE,KAAKI,IAAKgtC,GAE/E,IAAK,UAAW,OAAOiwB,EAAS,MAAOhD,EAAU5+D,EAAAuE,KAAKG,IAAK8nB,EAAUxsB,EAAAuE,KAAKG,IAAKitC,GAC/E,IAAK,UAAW,OAAOiwB,EAAS,MAAOhD,EAAU5+D,EAAAuE,KAAKI,IAAK6nB,EAAUxsB,EAAAuE,KAAKI,IAAKgtC,GAE/E,IAAK,aAAc,OAAOiwB,EAAS,SAAUhD,EAAU5+D,EAAAuE,KAAKG,IAAK8nB,EAAUxsB,EAAAuE,KAAKG,IAAKitC,GACrF,IAAK,aAAc,OAAOiwB,EAAS,SAAUhD,EAAU5+D,EAAAuE,KAAKI,IAAK6nB,EAAUxsB,EAAAuE,KAAKI,IAAKgtC,GAErF,IAAK,WAAY,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKG,IAAK8nB,EAAUxsB,EAAAuE,KAAKG,IAAKitC,GACjF,IAAK,WAAY,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKI,IAAK6nB,EAAUxsB,EAAAuE,KAAKI,IAAKgtC,GAEjF,IAAK,WAAY,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKG,IAAK8nB,EAAUxsB,EAAAuE,KAAKG,IAAKitC,GACjF,IAAK,WAAY,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKI,IAAK6nB,EAAUxsB,EAAAuE,KAAKI,IAAKgtC,GAEjF,IAAK,UAAW,OAAOiwB,EAAS,MAAOhD,EAAU5+D,EAAAuE,KAAKY,IAAKqnB,EAAUxsB,EAAAuE,KAAKY,IAAKwsC,GAC/E,IAAK,UAAW,OAAOiwB,EAAS,MAAOhD,EAAU5+D,EAAAuE,KAAKa,IAAKonB,EAAUxsB,EAAAuE,KAAKa,IAAKusC,GAE/E,IAAK,UAAW,OAAOiwB,EAAS,MAAOhD,EAAU5+D,EAAAuE,KAAKY,IAAKqnB,EAAUxsB,EAAAuE,KAAKY,IAAKwsC,GAC/E,IAAK,UAAW,OAAOiwB,EAAS,MAAOhD,EAAU5+D,EAAAuE,KAAKa,IAAKonB,EAAUxsB,EAAAuE,KAAKa,IAAKusC,GAE/E,IAAK,UAAW,OAAOiwB,EAAS,MAAOhD,EAAU5+D,EAAAuE,KAAKY,IAAKqnB,EAAUxsB,EAAAuE,KAAKY,IAAKwsC,GAC/E,IAAK,UAAW,OAAOiwB,EAAS,MAAOhD,EAAU5+D,EAAAuE,KAAKa,IAAKonB,EAAUxsB,EAAAuE,KAAKa,IAAKusC,GAE/E,IAAK,WAAY,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKY,IAAKqnB,EAAUxsB,EAAAuE,KAAKY,IAAKwsC,GACjF,IAAK,WAAY,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKa,IAAKonB,EAAUxsB,EAAAuE,KAAKa,IAAKusC,GAEjF,IAAK,YAAa,OAAOiwB,EAAS,QAAShD,EAAU5+D,EAAAuE,KAAKY,IAAKqnB,EAAUxsB,EAAAuE,KAAKY,IAAKwsC,GACnF,IAAK,YAAa,OAAOiwB,EAAS,QAAShD,EAAU5+D,EAAAuE,KAAKa,IAAKonB,EAAUxsB,EAAAuE,KAAKa,IAAKusC,GAEnF,IAAK,eAAgB,OAAOiwB,EAAS,WAAYhD,EAAU5+D,EAAAuE,KAAKY,IAAKqnB,EAAUxsB,EAAAuE,KAAKY,IAAKwsC,GACzF,IAAK,eAAgB,OAAOiwB,EAAS,WAAYhD,EAAU5+D,EAAAuE,KAAKa,IAAKonB,EAAUxsB,EAAAuE,KAAKa,IAAKusC,GAEzF,IAAK,cAAe,OAAOiwB,EAAS,UAAWhD,EAAU5+D,EAAAuE,KAAKY,IAAKqnB,EAAUxsB,EAAAuE,KAAKY,IAAKwsC,GACvF,IAAK,cAAe,OAAOiwB,EAAS,UAAWhD,EAAU5+D,EAAAuE,KAAKa,IAAKonB,EAAUxsB,EAAAuE,KAAKa,IAAKusC,GAEvF,IAAK,sBAAuB,OAAOiwB,EAAS,cAAehD,EAAU5+D,EAAAuE,KAAKG,IAAK8nB,EAAUxsB,EAAAuE,KAAKY,IAAKwsC,GACnG,IAAK,sBAAuB,OAAOiwB,EAAS,cAAehD,EAAU5+D,EAAAuE,KAAKI,IAAK6nB,EAAUxsB,EAAAuE,KAAKa,IAAKusC,GACnG,IAAK,sBAAuB,OAAOiwB,EAAS,cAAehD,EAAU5+D,EAAAuE,KAAKY,IAAKqnB,EAAUxsB,EAAAuE,KAAKG,IAAKitC,GACnG,IAAK,sBAAuB,OAAOiwB,EAAS,cAAehD,EAAU5+D,EAAAuE,KAAKa,IAAKonB,EAAUxsB,EAAAuE,KAAKI,IAAKgtC,GAEnG,IAAK,WAAY,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKY,IAAKqnB,EAAUxsB,EAAAuE,KAAKY,IAAKwsC,GACjF,IAAK,WAAY,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKa,IAAKonB,EAAUxsB,EAAAuE,KAAKa,IAAKusC,GAEjF,IAAK,YAAa,OAAOiwB,EAAS,QAAShD,EAAU5+D,EAAAuE,KAAKY,IAAKqnB,EAAUxsB,EAAAuE,KAAKY,IAAKwsC,GACnF,IAAK,YAAa,OAAOiwB,EAAS,QAAShD,EAAU5+D,EAAAuE,KAAKa,IAAKonB,EAAUxsB,EAAAuE,KAAKa,IAAKusC,GAEnF,IAAK,cAAe,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKC,GAAIgoB,EAAUxsB,EAAAuE,KAAKG,IAAKitC,GACnF,IAAK,cAAe,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKM,GAAI2nB,EAAUxsB,EAAAuE,KAAKQ,IAAK4sC,GACnF,IAAK,eAAgB,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKE,IAAK+nB,EAAUxsB,EAAAuE,KAAKG,IAAKitC,GACrF,IAAK,eAAgB,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKO,IAAK0nB,EAAUxsB,EAAAuE,KAAKQ,IAAK4sC,GACrF,IAAK,WAAY,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKG,IAAK8nB,EAAUxsB,EAAAuE,KAAKG,IAAKitC,GACjF,IAAK,cAAe,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKC,GAAIgoB,EAAUxsB,EAAAuE,KAAKI,IAAKgtC,GACnF,IAAK,cAAe,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKM,GAAI2nB,EAAUxsB,EAAAuE,KAAKS,IAAK2sC,GACnF,IAAK,eAAgB,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKE,IAAK+nB,EAAUxsB,EAAAuE,KAAKI,IAAKgtC,GACrF,IAAK,eAAgB,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKO,IAAK0nB,EAAUxsB,EAAAuE,KAAKS,IAAK2sC,GACrF,IAAK,eAAgB,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKG,IAAK8nB,EAAUxsB,EAAAuE,KAAKI,IAAKgtC,GACrF,IAAK,eAAgB,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKQ,IAAKynB,EAAUxsB,EAAAuE,KAAKS,IAAK2sC,GACrF,IAAK,WAAY,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKI,IAAK6nB,EAAUxsB,EAAAuE,KAAKI,IAAKgtC,GACjF,IAAK,WAAY,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKY,IAAKqnB,EAAUxsB,EAAAuE,KAAKY,IAAKwsC,GACjF,IAAK,WAAY,OAAOiwB,EAAS,OAAQhD,EAAU5+D,EAAAuE,KAAKa,IAAKonB,EAAUxsB,EAAAuE,KAAKa,IAAKusC,GAEjF,IAAK,aAAc,OAAOiwB,EAAS,QAAShD,EAAU5+D,EAAAuE,KAAKC,GAAIgoB,EAAUxsB,EAAAuE,KAAKG,IAAKitC,GACnF,IAAK,cAAe,OAAOiwB,EAAS,QAAShD,EAAU5+D,EAAAuE,KAAKE,IAAK+nB,EAAUxsB,EAAAuE,KAAKG,IAAKitC,GACrF,IAAK,YAAa,OAAOiwB,EAAS,QAAShD,EAAU5+D,EAAAuE,KAAKG,IAAK8nB,EAAUxsB,EAAAuE,KAAKG,IAAKitC,GACnF,IAAK,aAAc,OAAOiwB,EAAS,QAAShD,EAAU5+D,EAAAuE,KAAKC,GAAIgoB,EAAUxsB,EAAAuE,KAAKI,IAAKgtC,GACnF,IAAK,cAAe,OAAOiwB,EAAS,QAAShD,EAAU5+D,EAAAuE,KAAKE,IAAK+nB,EAAUxsB,EAAAuE,KAAKI,IAAKgtC,GACrF,IAAK,cAAe,OAAOiwB,EAAS,QAAShD,EAAU5+D,EAAAuE,KAAKG,IAAK8nB,EAAUxsB,EAAAuE,KAAKI,IAAKgtC,GACrF,IAAK,YAAa,OAAOiwB,EAAS,QAAShD,EAAU5+D,EAAAuE,KAAKI,IAAK6nB,EAAUxsB,EAAAuE,KAAKI,IAAKgtC,GACnF,IAAK,YAAa,OAAOiwB,EAAS,QAAShD,EAAU5+D,EAAAuE,KAAKY,IAAKqnB,EAAUxsB,EAAAuE,KAAKY,IAAKwsC,GACnF,IAAK,YAAa,OAAOiwB,EAAS,QAAShD,EAAU5+D,EAAAuE,KAAKa,IAAKonB,EAAUxsB,EAAAuE,KAAKa,IAAKusC,GAErF,OAAO,EAxGIkwB,CAAajD,EAAU94E,EAAW0mC,EAAU0sB,EAAgBvH,GACvE,OAAI3nD,GACElC,GAAiBA,EAAc2C,QACjCm0E,EAAS/+D,MACPE,EAAAnC,eAAemiD,sBACfpO,EAAW3pD,MAAOlC,EAAUugB,cAGzBrc,IAET40E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfymC,EAAW3pD,OAENxE,EAAOmtC,qBA8FhB,SAAAixC,EACEn9E,EACAm6E,EACAkD,EACAt1C,EACAu1C,EACApwB,GAEA,IAAI7rD,EAAY+P,OAAO+oE,EAASpvD,QAAQzM,eAAehe,IAAIN,IAE3D,OADAoR,OAAO/P,EAAUW,MAAQknD,EAAAlrC,YAAY6G,oBAC9Bw3C,EAAY8d,EAA6B94E,GAAag8E,GAAgBt1C,EAAUu1C,EAAWpwB,GAIpG,SAAAktB,EACED,EACA92E,EACA0kC,EACAmlB,GAEA,GAAuB,GAAnBnlB,EAAS/hC,OACX,OAAK3C,GAAyC,GAAxBA,EAAc2C,OAO7B3C,EAAc,IANnB82E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOiU,SAAS,IAAM,KAEtE,MAIX,GAAuB,GAAnB8tB,EAAS/hC,OAAa,CACxB,GAAI3C,EACF,GAA4B,GAAxBA,EAAc2C,OAChBm0E,EAASvrB,kBAAkB7mB,EAAS,GAAI1kC,EAAc,GAAE,SACnD,CACL,GAAIA,EAAc2C,OAKhB,OAJAm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAEhD,KAETkgE,EAAS7rB,4BAA4BvmB,EAAS,GAAIxsB,EAAAuE,KAAKG,IAAG,QAG5Dk6D,EAAS7rB,4BAA4BvmB,EAAS,GAAIxsB,EAAAuE,KAAKG,IAAG,GAE5D,OAAOk6D,EAASjwB,YAYlB,OAVI7mD,GAAiBA,EAAc2C,OAAS,GAC1Cm0E,EAAS/+D,MACPE,EAAAnC,eAAemyD,oCACfpe,EAAW3pD,MAAO,IAAKF,EAAc2C,OAAOiU,SAAS,KAGzDkgE,EAAS/+D,MACPE,EAAAnC,eAAeuP,+BACfwkC,EAAW3pD,MAAO,IAAKwkC,EAAS/hC,OAAOiU,SAAS,KAE3C,KAIT,SAAAqiE,EAAgCnC,EAAoB/zE,GAClD,IAAIb,EACA7E,EA6BJ,OA5BIy5E,EAASt6D,QAAQkB,UACnBxb,EAAO40E,EAAShpC,qBAAqB/qC,EAAYmV,EAAAuE,KAAK+7B,QAAO,MAE3DpgC,EAAA0Y,gBAAgB5uB,IAASkW,EAAA2Y,aAAa6C,OACtCxb,EAAA6c,kBAAkB/yB,IAASkW,EAAAsT,WAAWE,KACR,GAA9BxT,EAAA25B,qBAAqB7vC,KACpB7E,EAAQ+a,EAAA8c,oBAAoBhzB,IAAS,KAEtC40E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAEb7C,GAAS,KAGX6E,EAAO40E,EAAShpC,qBAAqB/qC,EAAYmV,EAAAuE,KAAKg8B,QAAO,MAE3DrgC,EAAA0Y,gBAAgB5uB,IAASkW,EAAA2Y,aAAa6C,OACtCxb,EAAA6c,kBAAkB/yB,IAASkW,EAAAsT,WAAWC,MACrCtuB,EAAQ+a,EAAAyb,iBAAiB3xB,IAAS,KAEnC40E,EAAS/+D,MACPE,EAAAnC,eAAesN,wBACfrgB,EAAW7C,OAEb7C,GAAS,IAGNA,EAmCT,SAAAuzD,EACEkmB,EACA3gE,EACA0zC,GAEA,IAAIniC,EAAUovD,EAASpvD,QACnBhsB,EAASo7E,EAASp7E,OAElB+hE,EAAa/1C,EAAQvM,YAAYle,IAAI,UACzC,IAAKwgE,EAAY,OAAO/hE,EAAOmtC,oBAE/B,IAAIntB,EAAgBgM,EAAQhM,cAC5B,IAAMA,IAAiBo7D,EAAS3qB,gBAAgBzwC,GAAiB,OAAOhgB,EAAOmtC,oBAEnD,MAAX1yB,EACb2gE,EAASvrB,kBAAkBp1C,EAASsnD,EAAU,KAC9CA,EAAWpkB,aAAa39C,GAEVo7E,EAAS5Z,oBAAoBrT,EAAW3pD,MAAMiJ,OAAOJ,gBAGvE,OADA+tE,EAASjwB,YAAc3uC,EAAAuE,KAAKc,KACrB7hB,EAAOqrC,YAAY,MACxBrrC,EAAO8sC,iBACL9sB,EAAc6C,gBACdnG,EAAAsT,WAAWub,MAEbvrC,EAAOmtC,sBAnzFXptC,EAAAu9D,cA0vFAv9D,EAAA0jE,gBAAA,SACE2X,EACAzX,EACAxV,GAEA,IAAIniC,EAAUovD,EAASpvD,QACvB3Z,OAAOsxD,EAAc33C,SAAWA,GAChC,IAAIhsB,EAASo7E,EAASp7E,OAClB8gB,EAAUs6D,EAASt6D,QACnB09D,EAAmBxyD,EAAQ/L,uBAC/B,OAAKu+D,EAOApD,EAAS3qB,gBAAgB+tB,IAE9BpD,EAASjwB,YAAcwY,EAAcl/D,KAC9BzE,EAAO4sC,WACZ4xC,EAAiB37D,cACf/B,EAAQkB,SACJhiB,EAAOkoC,UAAUy7B,EAAchyC,qBAC/B3xB,EAAO8nC,UAAU67B,EAAchyC,sBAErC7Q,EAAQ2sC,iBAT8CztD,EAAOmtC,qBAN7DnhB,EAAQ3P,MACNE,EAAAnC,eAAeuK,mBACfwpC,EAAW3pD,MAAO,mBAEbxE,EAAOmtC,sBAgBlBptC,EAAAm1D,eA+BAn1D,EAAA8sD,oBAAA,SAAoCuuB,WAC9Bp7E,EAASo7E,EAASp7E,OAClB+/D,EAAQ,IAAI5pD,UAEhB,IAAoB,IAAA+Y,EAAAlL,EAAAo3D,EAASpvD,QAAQzM,eAAezV,UAAQsa,EAAA8K,EAAAhL,QAAAE,EAAAD,KAAAC,EAAA8K,EAAAhL,OAAE,CAAzD,IAAIzb,EAAO2b,EAAAziB,MACd,GAAI8G,EAAQxF,MAAQknD,EAAAlrC,YAAYtM,OAAhC,CACA,IAAIkZ,EAAiBpjB,EACjBg0C,EAAiB5wB,EAAOpnB,KAAKg4C,eACjC,GACE5wB,EAAO5nB,GAAGvB,EAAAqB,YAAYupD,WACH,OAAnB7Q,IACCA,EAAet1B,aAAagjC,EAAAjrC,eAAenM,WAE5C,GAAI8Y,EAAO5nB,GAAGvB,EAAAqB,YAAYipB,SAAU,CAClC,IAAIrrB,EAAQkqB,EAAOkB,qBACnBgzC,EAAMnkD,KACJ5b,EAAOgtC,mBACLhtC,EAAOmpC,eAAe,EAAGzsB,EAAAsT,WAAWC,MAElCmrD,EAASt6D,QAAQkB,SACbhiB,EAAOkoC,UAAUmI,QAAQ1uC,GAAQ2uC,SAAS3uC,IAC1C3B,EAAO8nC,UAAUuI,QAAQ1uC,KAE/B,YAIJo+D,EAAMnkD,KACJ5b,EAAOgtC,mBACLhtC,EAAOmpC,eAAe,EAAGzsB,EAAAsT,WAAWC,MAElCjwB,EAAOupC,gBACL1d,EAAOhJ,aACPu4D,EAASt6D,QAAQ2sC,iBAGrB,0GAMV,IAAI1f,EAAUqtC,EAAShvB,oBAAqB5vC,EAAAuE,KAAKG,KAAO1E,EAAAuE,KAAKc,MAC7D7hB,EAAOwtC,YAAY,gBAAiBO,KAClCgyB,EAAM94D,OACFjH,EAAOqrC,YAAY,KAAM00B,GACzB//D,EAAOisC,6FCn6Ff,SAAkBwyC,GAEhBA,IAAA,eACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,8CACAA,IAAA,yBAEAA,IAAA,kBACAA,IAAA,yCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,oCACAA,IAAA,gCACAA,IAAA,0CACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,8CACAA,IAAA,2CACAA,IAAA,4CACAA,IAAA,oBAEAA,IAAA,UAEAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UAEAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,6BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,mBAEAA,IAAA,yBACAA,IAAA,wBACAA,IAAA,qCACAA,IAAA,aACAA,IAAA,8BAnIF,CAAkB1+E,EAAA0+E,WAAA1+E,EAAA0+E,cAuIlB1+E,EAAA2b,YAAA,SAA4B3a,GAC1B,OAAQA,GACN,QACA,QACA,UACA,UACE,OAAO,EAET,QACE,OAAO,IAMbhB,EAAAsmD,aAAA,SAA6BtlD,GAC3B,OAAQA,GACN,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACE,OAAO,EAET,QACE,OAAOA,GAAC,MAAuBA,GAAC,OAMtChB,EAAA4kD,eAAA,SAA+B5jD,GAC7B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAwoD,aAAA,SAA6BxnD,GAC3B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAA+lD,kBAAA,SAAkC/kD,GAChC,OAAOA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACnB,IAADA,GACC,IAADA,GACAA,EAAI,KAiLb,SAAkCyZ,GAChC,QAAOA,EAAO,GAAKA,EAAO,QACnBkkE,EAAmBlkE,EAAamkE,GAnLpBC,CAAyB79E,IAI9ChB,EAAAgmD,mBAAA,SAAmChlD,GACjC,OAAOA,GAAC,IAAkBA,GAAC,KAI7BhB,EAAAkmD,iBAAA,SAAiCllD,GAC/B,OAAOA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAmBA,GAAC,IACpB,IAADA,GACC,IAADA,GACAA,EAAI,KAuKb,SAAiCyZ,GAC/B,QAAOA,EAAO,GAAKA,EAAO,QACnBkkE,EAAmBlkE,EAAaqkE,GAzKpBC,CAAwB/9E,IAI7C,IAAM49E,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__16__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  EXTERNAL,\n  BUILTIN\n}\n\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a:{\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.d:{\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is compiled. */\n  COMPILED = 1 << 21,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 22,\n  /** Is scoped. */\n  SCOPED = 1 << 23,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 24,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 25,\n  /** Is the main function. */\n  MAIN = 1 << 26,\n\n  // Other\n\n  QUOTED = 1 << 27\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Abi\n} from \"./abi\";\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents a module-level export. */\nclass ModuleExport {\n  element: Element;\n  identifier: IdentifierExpression;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\n\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n\n  toAbi(): Abi {\n    let abi = new Abi(this);\n    abi.resolve();\n    return abi;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let element = this.elementsLookup.get(name);\n          if (element) this.elementsLookup.set(alias, element);\n          else throw new Error(\"element not found: \" + name);\n        }\n      }\n    }\n\n    // register 'Array'\n    if (this.elementsLookup.has(\"Array\")) {\n      let element = assert(this.elementsLookup.get(\"Array\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>element;\n    }\n\n    // register 'String'\n    if (this.elementsLookup.has(\"String\")) {\n      let element = assert(this.elementsLookup.get(\"String\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\n      if (instance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>element).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = instance;\n          this.typesLookup.set(\"string\", instance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n\n    // register 'abort' if present\n    if (this.elementsLookup.has(\"abort\")) {\n      let element = <Element>this.elementsLookup.get(\"abort\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      if (instance) this.abortInstance = instance;\n    }\n\n    // register 'memory.allocate' if present\n    if (this.elementsLookup.has(\"memory\")) {\n      let element = <Element>this.elementsLookup.get(\"memory\");\n      let members = element.members;\n      if (members) {\n        if (members.has(\"allocate\")) {\n          element = assert(members.get(\"allocate\"));\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.memoryAllocateInstance = instance;\n        }\n      }\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (flag == DecoratorFlags.BUILTIN) {\n          if (decorator.range.source.isLibrary) {\n            presentFlags |= flag;\n          } else {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          }\n        } else if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias globally if explicitly annotated @global or exported from a top-level library file\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n      }\n    }\n    // builtins use the global name directly\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\n      element.internalName = declaration.programLevelInternalName;\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    externalIdentifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = externalIdentifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = externalIdentifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if a top-level export of a library file\n    var source = externalIdentifier.range.source;\n    if (source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          externalIdentifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n\n    // add module level export if a top-level export of an entry file\n    } else if (source.isEntry) {\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\n        element,\n        identifier: externalIdentifier\n      });\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (this.elementsLookup.has(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          <Element>this.elementsLookup.get(referencedName),\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          if (existingExport.element !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: namespace,\n            identifier: declaration.name\n          });\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.INLINE |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: global,\n            identifier: declaration.name\n          });\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  _internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this._internalName = internalName;\n  }\n\n  static replaceComma(str: string):string{\n    if(!str) return str;\n    let result  = \"\";\n    for(let ch of str){\n      result +=  ch == \",\" ? \"_\" : ch;\n    }\n    return result;\n  }\n\n  get internalName():string{\n    return Element.replaceComma(this._internalName);\n  }\n\n  set internalName(internalName:string) {\n    this._internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32 = _BinaryenTypeInt32(),\n  I64 = _BinaryenTypeInt64(),\n  F32 = _BinaryenTypeFloat32(),\n  F64 =  _BinaryenTypeFloat64(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = memory.allocate(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n      memory.free(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocPtrArray(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0; // for free'ing\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    memory.free(this.cachedByValue);\n    memory.free(this.cachedTemporaryName);\n    memory.free(this.cachedPrecomputeName);\n    memory.free(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate,\n  compileAbort,\n  compileIterateRoots\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: Function[] = [];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      this.options.isWasm64\n        ? Module.MAX_MEMORY_WASM64\n        : Module.MAX_MEMORY_WASM32,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    var functionTableExported = false;\n    if (functionTableSize) {\n      let entries = new Array<FunctionRef>(functionTableSize);\n      for (let i = 0; i < functionTableSize; ++i) {\n        entries[i] = functionTable[i].ref;\n      }\n      module.setFunctionTable(entries);\n      module.addTableExport(\"0\", \"table\");\n      functionTableExported = true;\n    }\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\n    }\n\n    // set up module exports\n    for (let [name, moduleExport] of program.moduleLevelExports) {\n      this.makeModuleExport(name, moduleExport.element);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      }\n    }\n\n    switch (element.kind) {\n\n      // export global\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<Global>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<EnumValue>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n\n      // export function\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n\n      // export getter and setter\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>element).getterPrototype);\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterPrototype;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export a getter and a setter\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // skip prototype and export instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          let ctor = instance.constructorInstance;\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n\n      // all possible members already handled above\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE: break;\n\n      default: assert(false);\n    }\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration, global.parent);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (declaration !== null && declaration.initializer !== null) {\n      if (!initExpr) {\n        initExpr = this.compileExpression(\n          declaration.initializer,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        let initExpr: ExpressionRef;\n        if (valueDeclaration.value) {\n          initExpr = this.compileExpression(\n            <Expression>valueDeclaration.value,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueDeclaration.value.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              valueDeclaration.range\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          previousValueIsMut = true;\n        } else {\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration, instance.prototype.parent); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let element = fileLevelExports.get(\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\n      );\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ], terminated ? NativeType.Unreachable : NativeType.None);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyExpr = this.compileStatement(statement.statement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    var terminated = alwaysTrue && flow.isAny(FlowFlags.ANY_TERMINATING);\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel,\n        module.createBlock(null, repeatBlock, NativeType.None)\n      )\n    );\n\n    return module.createBlock(\n      breakLabel,\n      breakBlock,\n      terminated\n        ? NativeType.Unreachable\n        : NativeType.None\n      );\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var alwaysReturns = alwaysTrue && flow.is(FlowFlags.RETURNS);\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var expr = module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ], alwaysReturns ? NativeType.Unreachable : NativeType.None);\n    return expr;\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.resolver.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(\n            prototype,\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n      case ElementKind.PROPERTY: // TODO\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        this.currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\n    return ret;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  compileStaticString(stringValue: string): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var stringSegments = this.stringSegments;\n\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\n    if (!stringSegment) {\n      let stringLength = stringValue.length;\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\n      stringBuffer[0] =  stringLength         & 0xff;\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\n      for (let i = 0; i < stringLength; ++i) {\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\n      }\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\n      stringSegments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    var stringType = this.program.typesLookup.get(\"string\");\n    this.currentType = stringType ? stringType : options.usizeType;\n    if (options.isWasm64) {\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    }\n    assert(i64_is_i32(stringOffset));\n    return module.createI32(i64_low(stringOffset));\n  }\n\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\n    var isStatic = true;\n    var module = this.module;\n\n    // obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    var elementCount = expressions.length;\n    if (elementCount) { // non-empty static or dynamic\n      let nativeElementType = elementType.toNativeType();\n      let values: usize;\n      let byteLength: usize;\n      switch (nativeElementType) {\n        case NativeType.I32: {\n          values = changetype<usize>(new Int32Array(elementCount));\n          byteLength = elementCount * 4;\n          break;\n        }\n        case NativeType.I64: {\n          values = changetype<usize>(new Array<I64>(elementCount));\n          byteLength = elementCount * 8;\n          break;\n        }\n        case NativeType.F32: {\n          values = changetype<usize>(new Float32Array(elementCount));\n          byteLength = elementCount * 4;\n          break;\n        }\n        case NativeType.F64: {\n          values = changetype<usize>(new Float64Array(elementCount));\n          byteLength = elementCount * 8;\n          break;\n        }\n        default: {\n          assert(false);\n          return module.createUnreachable();\n        }\n      }\n\n      // precompute value expressions\n      let exprs = new Array<ExpressionRef>(elementCount);\n      let expr: BinaryenExpressionRef;\n      for (let i = 0; i < elementCount; ++i) {\n        exprs[i] = expressions[i]\n          ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n          : elementType.toNativeZero(module);\n        if (isStatic) {\n          expr = module.precomputeExpression(exprs[i]);\n          if (getExpressionId(expr) == ExpressionId.Const) {\n            assert(getExpressionType(expr) == nativeElementType);\n            switch (nativeElementType) {\n              case NativeType.I32: {\n                changetype<i32[]>(values)[i] = getConstValueI32(expr);\n                break;\n              }\n              case NativeType.I64: {\n                changetype<I64[]>(values)[i] = i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                );\n                break;\n              }\n              case NativeType.F32: {\n                changetype<f32[]>(values)[i] = getConstValueF32(expr);\n                break;\n              }\n              case NativeType.F64: {\n                changetype<f64[]>(values)[i] = getConstValueF64(expr);\n                break;\n              }\n              default: assert(false); // checked above\n            }\n          } else {\n            // TODO: emit a warning if declared 'const'\n            // if (isConst) {\n            //   this.warn(\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n            //     reportNode.range\n            //   );\n            // }\n            isStatic = false;\n          }\n        }\n      }\n\n      let usizeTypeSize = this.options.usizeType.byteSize;\n      if (isStatic) { // non-empty, all elements can be precomputed\n\n        // Create a combined static memory segment composed of:\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\n\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\n        let data = new Uint8Array(arraySize + bufferTotalSize);\n        let segment = this.addMemorySegment(data);\n        let offset = 0;\n\n        // write Array struct\n        if (usizeTypeSize == 8) {\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\n          offset += 8;\n        } else {\n          assert(i64_high(segment.offset) == 0);\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\n          offset += 4;\n        }\n        writeI32(elementCount, data, offset); // length_\n        offset += 4;\n        assert(offset == arraySize);\n\n        // write ArrayBuffer struct\n        writeI32(byteLength, data, offset);\n        offset += bufferHeaderSize; // incl. alignment\n\n        // write ArrayBuffer data\n        switch (nativeElementType) {\n          case NativeType.I32: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        assert(offset <= arraySize + bufferTotalSize);\n\n        this.currentType = arrayType;\n        return usizeTypeSize == 8\n          ? module.createI64(\n              i64_low(segment.offset),\n              i64_high(segment.offset)\n            )\n          : module.createI32(\n              i64_low(segment.offset)\n            );\n\n      } else { // non-empty, some elements can't be precomputed\n\n        this.currentType = arrayType;\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n        if (!setter) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            reportNode.range, arrayInstance.internalName\n          );\n          return module.createUnreachable();\n        }\n        let nativeArrayType = arrayType.toNativeType();\n        let currentFunction = this.currentFunction;\n        let tempLocal = currentFunction.getTempLocal(arrayType, false);\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\n        let index = 0;\n        stmts[index++] = module.createSetLocal(tempLocal.index,\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n            module.createI32(0), // this\n            module.createI32(elementCount)\n          ])\n        );\n        for (let i = 0; i < elementCount; ++i) {\n          stmts[index++] = this.makeCallDirect(setter, [\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\n            module.createI32(i),\n            exprs[i]\n          ]);\n        }\n        assert(index + 1 == stmts.length);\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n        currentFunction.freeTempLocal(tempLocal);\n        this.currentType = arrayType;\n        return module.createBlock(null, stmts, nativeArrayType);\n      }\n\n    } else { // empty, TBD: cache this somehow?\n      this.currentType = arrayType;\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(0)\n      ]);\n    }\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      compileAllocate(this, classReference, expression)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the top-most visible constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance: Function | null = null;\n    do {\n      constructorInstance = currentClassInstance.constructorInstance;\n      if (constructorInstance) break; // TODO: check visibility\n    } while (currentClassInstance = currentClassInstance.base);\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>target).getterPrototype;\n        if (prototype) {\n          let instance = this.resolver.resolveFunction(prototype, null);\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.parent);\n            assert(parent.kind == ElementKind.CLASS);\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr, inline);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, 0, inline);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement,\n  parentElement: Element | null = null\n): void {\n  mangleImportName_moduleName = parentElement ? parentElement.simpleName : declaration.range.source.simplePath;\n  mangleImportName_elementName = element.simpleName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","import {\n  SerializeHelper,\n  SerializePoint,\n  VariableDeclaration,\n  VarialbeKind,\n  NodeUtil\n} from \"./serialize\";\n\nimport {\n  Type,\n  TypeKind,\n  Signature\n} from \"./types\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement,\n  Class\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  DecoratorNode,\n  SignatureNode,\n  ClassDeclaration,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  TypeNode,\n  NodeKind,\n  Source,\n  ParameterNode,\n  Expression,\n  Node,\n  VariableLikeDeclarationStatement,\n  LiteralKind,\n  StringLiteralExpression,\n  CommonTypeNode\n} from \"./ast\";\n\nclass Struct {\n\n  name: string;\n  base: string;\n  fields: Array<Object> = new Array<Object>();\n}\n\nclass AbiTypeAlias {\n  new_type_name: string;\n  type: string\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\nclass Action {\n\n  name: string;\n  type: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string) {\n    this.name = name;\n    this.type = type;\n  }\n}\n\n\nexport class AbiHelper {\n\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"bool\", \"uint8\"], // eos not support the bool\n    [\"f32\", \"f32\"],\n    [\"f64\", \"f64\"],\n    [\"boolean\", \"uint8\"], // eos not suppot the bool\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass Table {\n  name: string;\n  type: string;\n  index_type: string = \"int64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string) {\n    this.name = name;\n    this.type = type;\n  }\n}\n\n\nexport class Abi {\n\n  abiInfo: {\n    version: string,\n    types: Array<AbiTypeAlias>,\n    structs: Array<Struct>,\n    actions: Array<Action>,\n    tables: Array<Table>\n  };\n\n  dispatch: string;\n\n  program: Program;\n\n  abiTypeLookup: Map<string, string> = new Map();\n\n  typeAliasSet: Set<string> = new Set<string>();\n\n  structsLookup: Map<string, Struct> = new Map();\n\n  elementLookup: Map<string, Element> = new Map();\n\n  fileSerializeLookup: Map<string, Array<SerializePoint>> = new Map<string, Array<SerializePoint>>();\n\n  constructor(program: Program) {\n\n    this.program = program;\n\n    this.abiInfo = {\n      version: \"ultraio:1.0\",\n      types: new Array<AbiTypeAlias>(),\n      structs: new Array<Struct>(),\n      actions: new Array<Action>(),\n      tables: new Array<Table>()\n    };\n\n    this.abiTypeLookup = AbiHelper.abiTypeLookup;\n  }\n\n  /**\n  *  Add abi struct for abi info.\n  */\n  toAbiStruct(methodName: string, signature: SignatureNode): Struct {\n\n    let struct = new Struct();\n    struct.name = methodName;\n    struct.base = \"\";\n\n    let types = signature.parameters;\n    if (types) {\n      for (let type of types) {\n        let typeKind = type.type.range.toString();\n        this.addAbiTypeAlias(typeKind);\n        struct.fields.push({ name: type.name.range.toString(), type: type.type.range.toString() });\n      }\n    }\n    return struct;\n  }\n\n\n  addAbiTypeAlias(typeKindName: string): void {\n\n    if (!this.typeAliasSet.has(typeKindName)) {\n      // It's the assemblyscript internal type \n      let originalTypeName = this.findContractOriginalType(typeKindName);\n      let wasmType = this.abiTypeLookup.get(originalTypeName);\n      if (wasmType) {\n        this.abiInfo.types.push(new AbiTypeAlias(typeKindName, wasmType));\n      }\n      this.typeAliasSet.add(typeKindName);\n    }\n  }\n\n  /**\n  * Find the original type name, \n  * eg: declare type account_name = u64;\n        declare type account_name_alias = account_name;\n\n    findContractOriginalType(\"account_name_alias\") return \"account_name\";\n  */\n  findContractOriginalType(typeKindName: string): string {\n\n    let abiType: string | null = this.abiTypeLookup.get(typeKindName);\n    if (abiType) {\n      return typeKindName;\n    }\n    let typeAlias = this.program.typeAliases.get(typeKindName);\n    if (typeAlias) {\n      let commonaTypeName = typeAlias.type.range.toString()\n      return this.findContractOriginalType(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find the script original type name\n  * @param typeKindName\n  */\n  findScriptOriginalTypeName(typeKindName: string): string {\n    let typeAlias = this.program.typeAliases.get(typeKindName);\n    if (typeAlias) {\n      let commonaTypeName = typeAlias.type.range.toString()\n      return this.findScriptOriginalTypeName(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find assemblyscript original type name \n  * eg: account_name return 'u64'\n  * \n  * @param typeKindName\n  */\n  findScriptOriginalType(typeKindName: string): Type | null {\n    let originalName = this.findScriptOriginalTypeName(typeKindName);\n    //Get the AssemblyScript original type \n    let scriptType: Type | null = this.program.typesLookup.get(originalName);\n    return scriptType;\n  }\n\n\n  // Check the FunctionPrototype weather has decoratorKind\n  checkFuncPrototypeDecorator(funcPrototype: FunctionPrototype, decoratorKind: DecoratorKind): bool {\n    let decorators = funcPrototype.declaration.decorators;\n    let isActionDecorator = false;\n    if (decorators) {\n      for (let decorator of decorators) {\n        if (decorator.decoratorKind == decoratorKind) {\n          isActionDecorator = true;\n        }\n      }\n    }\n    return isActionDecorator;\n  }\n\n  isWrapWithQutation(str: string): bool {\n\n    if (str == undefined || str == null) {\n      return false;\n    }\n    return str.charAt(0) == \"\\\"\" && str.charAt(str.length - 1) == \"\\\"\"\n      ? true : false;\n  }\n\n\n  /**\n  *  Check that element whether is functionPrototype  \n  *\n  */\n  isActionFuncPrototype(element: Element): bool {\n\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return this.checkFuncPrototypeDecorator(funcType, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  /**\n  * Resolve the class database decoreator \n  */\n  resolveClassDecorator(decorators: DecoratorNode[]): void {\n    for (let decorator of decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments \n        if (decorator.arguments.length < 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n\n        let type = decorator.arguments[0].range.toString();\n        let name = this.retrieveArgumentText(decorator.arguments[1]);\n\n        this.abiInfo.tables.push(new Table(name, type));\n\n        this.resolveExpressionToStruct(decorator.arguments[0]);\n      }\n    }\n  }\n\n\n  retrieveArgumentText(expr: Expression): string {\n    let argu: string = expr.range.toString();\n\n    if (this.isWrapWithQutation(argu)) {\n      return argu.substring(1, argu.length - 2);\n    }\n\n    let internalName = NodeUtil.getInternalName(expr);\n    let element: Element | null = this.program.elementsLookup.get(internalName);\n\n    if (element) {\n      let declaration: VariableLikeDeclarationStatement | null = (<VariableLikeElement>element).declaration;\n      if (declaration && declaration.initializer) {\n        let literal: StringLiteralExpression = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Cann't find constant ${internalName}`);\n  }\n\n  /**\n  *  Get struct from expression. \n  */\n  resolveExpressionToStruct(expr: Expression): void {\n\n    let internalPath = expr.range.source.internalPath;\n    let name = expr.range.toString();\n    let internalName = `${internalPath}/${name}`;\n    this.retrieveStructByInternalName(internalName);\n  }\n\n  retrieveStructByInternalName(internalName: string): void {\n\n    let element = this.program.elementsLookup.get(internalName);\n    if (!element || element.kind != ElementKind.CLASS_PROTOTYPE) {\n      throw new Error(`Element ${internalName} not found, pleasure make sure that class ${internalName} was existed.`);\n    }\n    let classPrototype = <ClassPrototype>element;\n    this.resolveClassPrototypeToStruct(classPrototype);\n  }\n\n\n  resolveClassPrototypeToStruct(classPrototype: ClassPrototype): void {\n\n    let members: DeclarationStatement[] = classPrototype.declaration.members;\n    let struct = new Struct();\n    struct.name = classPrototype.simpleName;\n\n    if (this.abiTypeLookup.get(struct.name)) {\n      return;\n    }\n\n    struct.base = \"\";\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let filedDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let filedName = member.name.range.toString();\n        let filedType = filedDeclare.type;\n\n        if (filedType) {\n          struct.fields.push({ name: filedName, type: filedType.range.toString() });\n        }\n      }\n    }\n    this.addStruct(struct);\n  }\n\n\n  addStruct(struct: Struct): void {\n\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n\n  static nameMap:string = \"._0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n  checkName(str: string): void {\n\n    assert(str.length > 0, `Action name should not empty`);\n    assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n  }\n\n\n  /**\n  *  Resolve ClassPrototype to dispatcher  \n  */\n  resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n\n    let body = new Array<string>();\n    let hasActionDecorator = false;\n    if (clzPrototype.instanceMembers) {\n\n      let contractName = clzPrototype.simpleName; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  if (receiver == code) {`);\n      body.push(`    let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n      body.push(`    let action = new NameEx(actH, actL);`);\n\n      for (let instance of clzPrototype.instanceMembers.values()) {\n        if (this.isActionFuncPrototype(instance)) {\n\n          this.resolveFunctionPrototype(<FunctionPrototype>instance);\n          hasActionDecorator = true;\n          let declaration: FunctionDeclaration = (<FunctionPrototype>instance).declaration; // FunctionDeclaration\n\n          let funcName = declaration.name.range.toString();\n          let types = declaration.signature.parameters; // FunctionDeclaration parameter types\n\n          this.checkName(funcName);\n          //let action = new NameEx(actH, actL);\n          body.push(`    if (action == NEX(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (var index = 0; index < types.length; index++) {\n            let type: ParameterNode = types[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n\n\n            let variableDeclaration: VariableDeclaration = new VariableDeclaration(this.program, type.type);\n            let abiType = variableDeclaration.resolveAbiParameterType();\n\n            if (abiType.isArray) {\n              if (abiType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${abiType.factType}>();`);\n              } else if (abiType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${parameterName} = ds.readVector<u8>();`);\n              } else if (abiType.kind == VarialbeKind.STRING) {\n\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${abiType.baseType}>();`);\n              }\n            } else {\n              if (abiType.kind == VarialbeKind.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${parameterName} = ds.read<u8>() != 0;`);\n              } else if (abiType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${abiType.factType}>();`);\n              } else {\n                let internalName = NodeUtil.getInternalName(type.type);\n                this.retrieveStructByInternalName(internalName);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n          body.push(`      ${contractVarName}.${funcName}(${fields.join(',')});`);\n          body.push(\"    }\");\n        }\n      }\n      body.push(\"  }\");\n\n      if (hasActionDecorator) {\n        let clzName = clzPrototype.simpleName;\n        let sourcePath = clzPrototype.declaration.range.source.internalPath;\n        if (clzPrototype.declaration.decorators) {\n          this.resolveClassDecorator(clzPrototype.declaration.decorators);\n        }\n      }\n    }\n    return hasActionDecorator ? body : new Array();\n  }\n\n  resolveFunctionPrototype(funcPrototype: FunctionPrototype): void {\n\n    let declaration: FunctionDeclaration = funcPrototype.declaration;\n    let funcName = declaration.name.range.toString();\n    let signature = funcPrototype.declaration.signature;\n    let struct = this.toAbiStruct(funcName, signature);\n\n    this.addStruct(struct)\n    this.abiInfo.actions.push(new Action(funcName, funcName));\n  }\n\n\n  printTypeAliasInfo(): void {\n\n    let typesLookupKeys = this.program.typesLookup.keys();\n    for (let key of typesLookupKeys) {\n      let value = this.program.typesLookup.get(key);\n      if (value) {\n        console.log(`type look up key: ${key}. value: ${value.kind}`);\n      }\n    }\n\n    let typesAliasKeys = this.program.typeAliases.keys();\n    for (let key of typesAliasKeys) {\n      let value = this.program.typeAliases.get(key);\n      if (value) {\n        console.log(`type alias key: ${key}. Value: ${value.type.range.toString()}`);\n      }\n    }\n  }\n\n  printElementLookUpInfo(): void {\n    let keys = this.program.elementsLookup.keys();\n    for (let key of keys) {\n      let value = this.program.elementsLookup.get(key);\n      if (value)\n        console.log(`Element lookup key:${key}.Kind:${value.kind}`);\n    }\n  }\n\n  private printClassProtoTypeInfo(): void {\n    let keys = this.program.elementsLookup.keys();\n    for (let key of keys) {\n      let value: Element | null = this.program.elementsLookup.get(key);\n      if (value && value.kind == ElementKind.CLASS_PROTOTYPE) {\n        // console.log(`Element lookup key:${key}.Kind:${value.kind}`);\n        let classPrototype: ClassPrototype = <ClassPrototype>value;\n        if (classPrototype.basePrototype)\n          console.log(`Element lookup key:${key}. Base prototype:${classPrototype.basePrototype.simpleName}`);\n      }\n\n    }\n  }\n\n  resolve(): void {\n\n    // this.printTypeAliasInfo();\n    // this.printElementLookUpInfo();\n    // this.findDBManager();\n    // this.printClassProtoTypeInfo();\n\n    let serializeHelper: SerializeHelper = new SerializeHelper(this.program);\n    serializeHelper.resolve();\n    this.fileSerializeLookup = serializeHelper.fileSerializeLookup;\n\n    let dispatchBuffer = new Array<string>();\n\n    for (let element of this.program.elementsLookup.values()) {\n      // The element is ClassPrototype\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(clzPrototype.internalName)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          classDispatch.forEach((value: string, index: number): void => {\n            dispatchBuffer.push(value);\n          });\n          this.elementLookup.set(clzPrototype.internalName, element);\n        }\n      }\n    }\n\n    if (dispatchBuffer.length == 0) {\n      // throw new Error(`The smart contract must specify one action.`);\n    }\n\n    this.dispatch = this.assemblyDispatch(dispatchBuffer);\n  }\n\n  hasElement(name: string):bool{\n    let element:Element|null = this.program.elementsLookup.get(name);\n    console.log(`hasElement name ${name}    ${ element ? true: false} `);\n    return element ? true: false;\n  } \n\n  // Concat the dispatch message\n  private assemblyDispatch(body: Array<string>): string {\n\n    let sb = new Array<string>();\n    sb.push(\"export function apply(receiver: u64, code: u64, actH: u64, actL: u64): void {\");\n\n    body.forEach((value: string, index: number): void => {\n      sb.push(value);\n    });\n    sb.push(\"}\");\n\n    return sb.join(\"\\n\");\n  }\n}\n\n\n\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              contextualTypeArguments,\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    {\n      let typeArgumentNodes = typeNode.typeArguments;\n      if (typeArgumentNodes) {\n        let numTypeArguments = typeArgumentNodes.length;\n        let paramTypes = new Array<Type>(numTypeArguments);\n        for (let i = 0; i < numTypeArguments; ++i) {\n          let paramType = this.resolveType( // reports\n            typeArgumentNodes[i],\n            contextualTypeArguments,\n            reportMode\n          );\n          if (!paramType) return null;\n          paramTypes[i] = paramType;\n        }\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\n          let instanceKey = typesToString(paramTypes);\n          if (instanceKey.length) {\n            localName += \"<\" + instanceKey + \">\";\n            globalName += \"<\" + instanceKey + \">\";\n          }\n        } else if (contextualTypeArguments) {\n          let placeholderType = contextualTypeArguments.get(globalName);\n          if (placeholderType) return placeholderType;\n        }\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        return type;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let classReference = (<VariableLikeElement>target).type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          null,\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType(\n          (<AssertionExpression>expression).toType,\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this.program, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = prototype.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(prototype.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (prototype.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Copy contextual type arguments so we don't pollute the original map\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    if (prototype.constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        prototype.constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\n      } else {\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let typeParameterNodes = prototype.declaration.typeParameters;\n      let expectedTypeArguments = typeParameterNodes.length;\n      assert(expectedTypeArguments > 0);\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\n      if (expectedTypeArguments != actualTypeArguments) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\n          );\n        }\n        return null;\n      }\n      resolvedTypeArguments = this.resolveTypeArguments(\n        typeParameterNodes,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return new binaryen.Module(this.ref).emitText();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return new binaryen.Module(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__16__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[ptr + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[ptr + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags,\n  Global,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"memory.size\": { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // user-defined diagnostic macros\n\n    case \"ERROR\": {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case \"WARNING\": {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case \"INFO\": {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n\n    // gc\n\n    case \"iterateRoots\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n  var allocateInstance = program.memoryAllocateInstance;\n  if (!allocateInstance) {\n    program.error(\n      DiagnosticCode.Cannot_find_name_0,\n      reportNode.range, \"memory.allocate\"\n    );\n    return module.createUnreachable();\n  }\n  if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n\n  compiler.currentType = classInstance.type;\n  return module.createCall(\n    allocateInstance.internalName, [\n      options.isWasm64\n        ? module.createI64(classInstance.currentMemoryOffset)\n        : module.createI32(classInstance.currentMemoryOffset)\n    ],\n    options.nativeSizeType\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\");\n  if (!stringType) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsLookup.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"iv\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"iv\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","import {\n    Type,\n    TypeKind,\n    Signature,\n    typesToString\n} from \"./types\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    ElementKind,\n    Element,\n    ClassPrototype,\n    FunctionPrototype,\n    Program,\n    VariableLikeElement,\n    Class,\n    Field,\n    FieldPrototype\n} from \"./program\";\n\nimport {\n    DecoratorKind,\n    DecoratorNode,\n    SignatureNode,\n    ClassDeclaration,\n    FunctionDeclaration,\n    DeclarationStatement,\n    FieldDeclaration,\n    TypeNode,\n    NodeKind,\n    Source,\n    ParameterNode,\n    Expression,\n    Node,\n    VariableLikeDeclarationStatement,\n    LiteralKind,\n    StringLiteralExpression,\n    CommonTypeNode,\n    IdentifierExpression\n} from \"./ast\";\nimport { AbiHelper } from \"./abi\";\n\nexport enum VarialbeKind {\n    BOOL, // boolean and bool\n    NUMBER, // original type except boolean and bool\n    STRING, // string kind\n    ARRAY, // array kind\n    CLASS // class kind\n}\n\n\n\nexport class NodeUtil {\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        let internalPath = node.range.source.internalPath;\n        let name = node.range.toString();\n        let internalName = `${internalPath}/${name}`;\n        return internalName;\n    }\n}\n\n\n\nexport class VariableDeclaration {\n\n    program: Program;\n\n    abiTypeLookup: Map<string, string> = new Map();\n\n    commonTypeNode: CommonTypeNode;\n\n    kind: VarialbeKind;\n    /** Parameter name, u64 */\n    declareType: string;\n    /** Base Parameter type */\n    baseType:string;\n    /** The abi field type, eg:account_name */\n    abiType: string; \n    /** The field fact type, eg: u64, u32 */\n    factType: string;\n    // /** Whether parameter or field is array  */\n\n    constructor(program: Program, commonTypeNode: CommonTypeNode) {\n        this.program = program;\n        this.commonTypeNode = commonTypeNode;\n        this.abiTypeLookup = AbiHelper.abiTypeLookup;\n  \n    }\n\n    /**\n     * string TypeKind is 9, and usize TypeKind is also 9.\n     * @param type \n     */\n    resolveAbiParameterType(): VariableDeclaration {\n\n        let variableType = this.commonTypeNode.range.toString();\n        let typeAlias = this.program.typeAliases.get(variableType);\n        if (typeAlias) {\n            variableType = typeAlias.type.range.toString();\n        }\n        this.declareType = variableType;\n        let baseTypeName: string = this.getBaseTypeName(variableType);\n        this.baseType = baseTypeName;\n        \n        if (baseTypeName == \"string\" || baseTypeName == \"String\") {\n            this.kind = VarialbeKind.STRING;\n            this.factType = \"string\";\n            return this;\n        }\n\n        this.abiType = this.findAbiType(baseTypeName);\n        let factType: Type | null = this.findFactType(this.abiType);\n\n        if (!factType) {\n            this.kind = VarialbeKind.CLASS;\n        } else if (factType.kind == TypeKind.BOOL) {\n            this.kind = VarialbeKind.BOOL;\n            this.factType = factType.toString();\n        } else {\n            this.kind = VarialbeKind.NUMBER\n            this.factType = factType.toString();\n        }\n        return this;\n    }\n\n    /**\n     * Find the original type name, \n     * eg: declare type account_name = u64;\n     *     declare type account_name_alias = account_name;\n     *     findAbiType(\"account_name_alias\") return \"account_name\";\n     * \n     * eg: findAbiType(\"u64\") return \"u64\";\n     * @param typeKindName\n     * */\n    findAbiType(typeKindName: string): string {\n\n        /**Watch the type whether was the root type */\n        let abiType: string | null = this.abiTypeLookup.get(typeKindName);\n        if (abiType) {\n            return typeKindName;\n        }\n        let typeAlias = this.program.typeAliases.get(typeKindName);\n        if (typeAlias) {\n            let typeName = typeAlias.type.range.toString()\n            return this.findAbiType(typeName);\n        } else {\n            return typeKindName;\n        }\n    }\n\n    get isArray(): bool {\n        return this.declareType.includes(\"[\");\n    }\n\n    /**\n     * Get the base type name, \n     * If the type name is string[], so the base type name is string\n     * @param typeName \n     */\n    getBaseTypeName(typeName: string): string {\n\n        let bracketIndex = typeName.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = typeName.indexOf(\" \") == -1 ? bracketIndex : typeName.indexOf(\" \");\n            let baseTypeName = typeName.substring(0, index);\n            return baseTypeName;\n        }\n        return typeName;\n    }\n\n    /**\n     *  Find the script original type name\n     *  @param typeKindName\n     * \n     */\n    private findFactTypeName(typeKindName: string): string {\n        let typeAlias = this.program.typeAliases.get(typeKindName);\n        if (typeAlias) {\n            let commonaTypeName = typeAlias.type.range.toString()\n            return this.findFactTypeName(commonaTypeName);\n        } else {\n            return typeKindName;\n        }\n    }\n\n    /**\n    * Find assemblyscript original type name \n    * eg: account_name return 'u64'\n    * \n    * @param typeKindName\n    */\n    private findFactType(typeKindName: string): Type | null {\n        let originalName = this.findFactTypeName(typeKindName);\n        //Get the AssemblyScript original type \n        let scriptType: Type | null = this.program.typesLookup.get(originalName);\n        return scriptType;\n    }\n}\n\n/**\n * \n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needImplSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needImplDeSerialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needImplPrimary: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.generatorSerializeFlag();\n    }\n\n    getInternalName(node: Node): string {\n        let internalPath = node.range.source.internalPath;\n        let name = node.range.toString();\n        let internalName = `${internalPath}/${name}`;\n        return internalName;\n    }\n\n    generatorSerializeFlag(): void {\n\n        if (!this.classPrototype.instanceMembers) {\n            return;\n        }\n\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                let functionPrototype = <FunctionPrototype>element;\n                if (functionPrototype.declaration.name.range.toString() == this.SERIALIZE_METHOD_NAME) {\n                    this.needImplSerialize = false;\n                }\n                if (functionPrototype.declaration.name.range.toString() == this.DESERIALIZE_METHOD_NAME) {\n                    this.needImplDeSerialize = false;\n                }\n                if (functionPrototype.declaration.name.range.toString() == this.PRIMARY_METHOD_NAME) {\n                    this.needImplPrimary = false;\n                }\n            }\n        }\n    }\n\n\n    checkFieldImplSerialize(typeNode: CommonTypeNode): bool {\n\n        let internalName = NodeUtil.getInternalName(typeNode);\n        let element: Element | null = this.classPrototype.program.elementsLookup.get(internalName)\n\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = SerializeHelper.hasImplSerialize((<ClassPrototype>element).declaration);\n            if (!hasImpl) {\n                throw new Error(`Class ${internalName} not implements the interface ${SerializeHelper.SERIALIZE_INTERFANCE}`);\n            }\n        }\n        return true;\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoints(): SerializePoint {\n\n        let serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.needDeserialize = this.needImplDeSerialize;\n        serializePoint.needSerialize = this.needImplSerialize;\n        serializePoint.needPrimaryKey = this.needImplPrimary;\n\n        if (!this.classPrototype.instanceMembers)\n            return serializePoint;\n\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = fieldPrototype.declaration;\n                let commonType: CommonTypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.TYPE) {\n\n                    let typeNode = <TypeNode>commonType;\n                    if (this.needImplDeSerialize && this.checkFieldImplSerialize(commonType))\n                        serializePoint.addSerializeExpr(this.serializeField(fieldName, typeNode));\n\n                    if (this.needImplSerialize && this.checkFieldImplSerialize(commonType))\n                        serializePoint.addDeserializeExpr(this.deserializeField(fieldName, typeNode));\n                }\n            }\n        }\n        serializePoint.addDeserializeExpr(`   }`);\n        serializePoint.addSerializeExpr(`   }`);\n\n        return serializePoint;\n    }\n\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: TypeNode): string {\n\n        let typeNodeHelper: VariableDeclaration = new VariableDeclaration(this.classPrototype.program, typeNode);\n        let body: Array<string> = new Array<string>();\n        let paramDeclaration: VariableDeclaration = typeNodeHelper.resolveAbiParameterType();\n\n        if (paramDeclaration.isArray) {\n            if (paramDeclaration.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${fieldName} = ds.readVector<${paramDeclaration.abiType}>();`);\n            } else if (paramDeclaration.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${fieldName} = ds.readVector<u8>();`);\n            } else if (paramDeclaration.kind == VarialbeKind.STRING) {\n\n            } else {\n                body.push(`      let ${fieldName} = ds.readComplexVector<${paramDeclaration.declareType}>();`);\n            }\n        } else {\n            if (paramDeclaration.kind == VarialbeKind.STRING) {\n                body.push(`      ds.writeString(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.BOOL) {\n                body.push(`      ds.write<u8>(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.NUMBER) {\n                body.push(`      ds.write<${paramDeclaration.declareType}>(this.${fieldName});`);\n            } else {\n                body.push(`      this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return body.join(\"\\n\");\n    }\n\n    deserializeField(fieldName: string, type: TypeNode): string {\n\n        let typeNodeHelper: VariableDeclaration = new VariableDeclaration(this.classPrototype.program, type);\n\n        let body: Array<string> = new Array<string>();\n        let variableType:VariableDeclaration = typeNodeHelper.resolveAbiParameterType();\n\n        if (variableType.isArray) {\n            if (variableType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${fieldName} = ds.readVector<${variableType.factType}>();`);\n            } else if (variableType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${fieldName} = ds.readVector<u8>();`);\n            } else if (variableType.kind == VarialbeKind.STRING) {\n\n            } else {\n                body.push(`      let ${fieldName} = ds.readComplexVector<${variableType.baseType}>();`);\n            }\n        } else {\n            if (variableType.kind == VarialbeKind.STRING) {\n                body.push(`      this.${fieldName} = ds.readString();`);\n            } else if (variableType.kind == VarialbeKind.BOOL) {\n                body.push(`      this.${fieldName} = ds.read<u8>() != 0;`);\n            } else if (variableType.kind == VarialbeKind.NUMBER) {\n                body.push(`      this.${fieldName} = ds.read<${variableType.factType}>();`);\n            } else {\n                body.push(`      this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return body.join(\"\\n\");\n    }\n}\n\nexport class SerializePoint {\n\n    private serialize: Array<string> = new Array<string>();\n\n    private deserialize: Array<string> = new Array<string>();\n\n    private primaryKey: Array<string> = new Array<string>();\n\n    needSerialize: bool;\n\n    needDeserialize: bool;\n\n    needPrimaryKey: bool;\n\n    range: Range;\n\n    get line(): i32 {\n        return this.range.line;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get classpath(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    constructor(range: Range) {\n        this.range = range;\n        this.serialize.push(`    serialize(ds: DataStream): void {`);\n        this.deserialize.push(`    deserialize(ds: DataStream): void {`);\n        \n        this.primaryKey.push(`     primaryKey(): id_type {`);\n        this.primaryKey.push(`       return 0;`)\n        this.primaryKey.push(`    }`)\n    }\n\n    addSerializeExpr(expr: string): void {\n        this.serialize.push(expr);\n    }\n\n    addDeserializeExpr(expr: string): void {\n        this.deserialize.push(expr);\n    }\n\n    toSerialize(): string {\n        if (!this.needSerialize) {\n            return \"\";\n        }\n        return this.serialize.join(\"\\n\");\n    }\n\n    toDeserialize(): string {\n        if (!this.needDeserialize) {\n            return \"\";\n        }\n        return this.deserialize.join(\"\\n\");\n    }\n\n    toPrimarykey(): string {\n        return  this.needPrimaryKey ? this.primaryKey.join(\"\\n\") : \"\";\n    }\n}\n\n\nexport class SerializeHelper {\n\n    static SERIALIZE_INTERFANCE: string = \"ISerializable\";\n    /**Program  */\n    program: Program;\n\n    serializeClassname: Set<string> = new Set<string>();\n\n    fileSerializeLookup: Map<string, Array<SerializePoint>> = new Map<string, Array<SerializePoint>>();\n\n    constructor(program: Program) {\n        this.program = program;\n    }\n\n    static hasImplSerialize(classDeclaration: ClassDeclaration): bool {\n        let classDeclareStr = classDeclaration.range.toString();\n        return classDeclareStr.includes(this.SERIALIZE_INTERFANCE)\n    }\n\n    resolve(): void {\n\n        for (let [key, element] of this.program.elementsLookup) {\n\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let classDeclaration: ClassDeclaration = (<ClassPrototype>element).declaration;\n                if (SerializeHelper.hasImplSerialize(classDeclaration)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n                    let serializePoint: SerializePoint = generator.getSerializePoints();\n\n                    if (!this.serializeClassname.has(serializePoint.classpath)) {\n                        this.addSerializePoint(serializePoint);\n                        this.serializeClassname.add(serializePoint.classpath);\n                    }\n                }\n            }\n        }\n        this.sortSerializePoints();\n    }\n\n    /**\n     * Add the serialize point\n     * @param serialize The serialize point\n     */\n    addSerializePoint(serialize: SerializePoint): void {\n\n        let normalizedPath = serialize.normalizedPath;\n        let fileSerialize: Array<SerializePoint> | null = this.fileSerializeLookup.get(normalizedPath);\n\n        if (fileSerialize) {\n            fileSerialize.push(serialize);\n        } else {\n            fileSerialize = new Array<SerializePoint>();\n            fileSerialize.push(serialize);\n            this.fileSerializeLookup.set(normalizedPath, fileSerialize);\n        }\n    }\n\n    /**\n     * Sorting the serialize points by the line number, \n     * the max line number is in front of.\n     */\n    sortSerializePoints(): void {\n        for (let [key, array] of this.fileSerializeLookup) {\n            let compartor = (a: SerializePoint, b: SerializePoint): i32 => {\n                return (b.line - a.line);\n            }\n            array.sort(compartor);\n        }\n    }\n}","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\n      // FIXME: doesn't honor the actual externally visible name\n      this.visitElement(moduleExport.element);\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    // return backlog.length ? backlog.shift() : null;\n    let fileName = backlog.length ? backlog.shift() : null;\n\n    return fileName;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorator.range\n        );\n      }\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET | CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression?\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) return null;\n        expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos)); // is again callable\n      }\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n"],"sourceRoot":""}